
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "beginner/basics/saveloadrun_tutorial.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_beginner_basics_saveloadrun_tutorial.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_beginner_basics_saveloadrun_tutorial.py:


`Learn the Basics <intro.html>`_ ||
`Quickstart <quickstart_tutorial.html>`_ ||
`Tensors <tensorqs_tutorial.html>`_ ||
`Datasets & DataLoaders <data_tutorial.html>`_ ||
`Transforms <transforms_tutorial.html>`_ ||
`Build Model <buildmodel_tutorial.html>`_ ||
`Autograd <autogradqs_tutorial.html>`_ ||
`Optimization <optimization_tutorial.html>`_ ||
**Save & Load Model**

Save and Load the Model
============================

In this section we will look at how to persist model state with saving, loading and running model predictions.

.. GENERATED FROM PYTHON SOURCE LINES 17-22

.. code-block:: default


    import torch
    import torchvision.models as models









.. GENERATED FROM PYTHON SOURCE LINES 23-28

Saving and Loading Model Weights
--------------------------------
PyTorch models store the learned parameters in an internal
state dictionary, called ``state_dict``. These can be persisted via the ``torch.save``
method:

.. GENERATED FROM PYTHON SOURCE LINES 28-32

.. code-block:: default


    model = models.vgg16(pretrained=True)
    torch.save(model.state_dict(), 'model_weights.pth')





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    /opt/conda/lib/python3.10/site-packages/torchvision/models/_utils.py:208: UserWarning:

    The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.

    /opt/conda/lib/python3.10/site-packages/torchvision/models/_utils.py:223: UserWarning:

    Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=VGG16_Weights.IMAGENET1K_V1`. You can also use `weights=VGG16_Weights.DEFAULT` to get the most up-to-date weights.

    Downloading: "https://download.pytorch.org/models/vgg16-397923af.pth" to /var/lib/jenkins/.cache/torch/hub/checkpoints/vgg16-397923af.pth

      0%|          | 0.00/528M [00:00<?, ?B/s]
      1%|          | 3.89M/528M [00:00<00:15, 35.7MB/s]
      2%|1         | 9.04M/528M [00:00<00:12, 43.8MB/s]
      4%|4         | 22.1M/528M [00:00<00:06, 83.8MB/s]
      6%|6         | 32.4M/528M [00:00<00:05, 92.7MB/s]
      8%|7         | 41.4M/528M [00:00<00:06, 78.1MB/s]
     10%|9         | 52.7M/528M [00:00<00:05, 90.2MB/s]
     12%|#1        | 63.0M/528M [00:00<00:05, 95.3MB/s]
     14%|#3        | 72.4M/528M [00:00<00:05, 89.5MB/s]
     16%|#5        | 83.9M/528M [00:01<00:04, 98.1MB/s]
     18%|#8        | 95.3M/528M [00:01<00:04, 104MB/s] 
     20%|##        | 108M/528M [00:01<00:03, 113MB/s] 
     23%|##2       | 119M/528M [00:01<00:04, 107MB/s]
     25%|##5       | 133M/528M [00:01<00:03, 119MB/s]
     27%|##7       | 145M/528M [00:01<00:03, 114MB/s]
     30%|##9       | 157M/528M [00:01<00:03, 117MB/s]
     32%|###1      | 168M/528M [00:01<00:03, 107MB/s]
     34%|###3      | 178M/528M [00:01<00:03, 106MB/s]
     36%|###5      | 189M/528M [00:01<00:03, 107MB/s]
     38%|###7      | 199M/528M [00:02<00:03, 105MB/s]
     40%|###9      | 209M/528M [00:02<00:03, 89.8MB/s]
     41%|####1     | 218M/528M [00:02<00:03, 81.9MB/s]
     43%|####2     | 226M/528M [00:02<00:04, 72.5MB/s]
     44%|####4     | 234M/528M [00:02<00:04, 68.4MB/s]
     47%|####6     | 248M/528M [00:02<00:03, 87.8MB/s]
     50%|#####     | 265M/528M [00:02<00:02, 112MB/s] 
     53%|#####3    | 281M/528M [00:02<00:02, 126MB/s]
     56%|#####5    | 294M/528M [00:03<00:02, 107MB/s]
     59%|#####8    | 310M/528M [00:03<00:01, 122MB/s]
     61%|######1   | 322M/528M [00:03<00:01, 117MB/s]
     63%|######3   | 334M/528M [00:03<00:01, 102MB/s]
     66%|######5   | 346M/528M [00:03<00:01, 106MB/s]
     68%|######7   | 357M/528M [00:03<00:01, 107MB/s]
     70%|######9   | 368M/528M [00:04<00:02, 68.4MB/s]
     71%|#######1  | 376M/528M [00:04<00:02, 71.9MB/s]
     73%|#######2  | 384M/528M [00:04<00:02, 70.6MB/s]
     76%|#######6  | 403M/528M [00:04<00:01, 98.8MB/s]
     79%|#######9  | 418M/528M [00:04<00:01, 113MB/s] 
     82%|########1 | 431M/528M [00:04<00:00, 114MB/s]
     84%|########3 | 442M/528M [00:04<00:00, 99.0MB/s]
     86%|########5 | 453M/528M [00:05<00:01, 65.8MB/s]
     87%|########7 | 461M/528M [00:05<00:01, 69.5MB/s]
     89%|########8 | 470M/528M [00:05<00:00, 67.1MB/s]
     92%|#########1| 483M/528M [00:05<00:00, 83.9MB/s]
     94%|#########4| 497M/528M [00:05<00:00, 98.0MB/s]
     97%|#########6| 510M/528M [00:05<00:00, 108MB/s] 
     99%|#########9| 525M/528M [00:05<00:00, 119MB/s]
    100%|##########| 528M/528M [00:05<00:00, 95.8MB/s]




.. GENERATED FROM PYTHON SOURCE LINES 33-35

To load model weights, you need to create an instance of the same model first, and then load the parameters
using ``load_state_dict()`` method.

.. GENERATED FROM PYTHON SOURCE LINES 35-40

.. code-block:: default


    model = models.vgg16() # we do not specify pretrained=True, i.e. do not load default weights
    model.load_state_dict(torch.load('model_weights.pth'))
    model.eval()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    VGG(
      (features): Sequential(
        (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (3): ReLU(inplace=True)
        (4): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
        (5): Conv2d(64, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (6): ReLU(inplace=True)
        (7): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (8): ReLU(inplace=True)
        (9): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
        (10): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (11): ReLU(inplace=True)
        (12): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (13): ReLU(inplace=True)
        (14): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (15): ReLU(inplace=True)
        (16): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
        (17): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (18): ReLU(inplace=True)
        (19): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (20): ReLU(inplace=True)
        (21): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (22): ReLU(inplace=True)
        (23): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
        (24): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (25): ReLU(inplace=True)
        (26): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (27): ReLU(inplace=True)
        (28): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (29): ReLU(inplace=True)
        (30): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
      )
      (avgpool): AdaptiveAvgPool2d(output_size=(7, 7))
      (classifier): Sequential(
        (0): Linear(in_features=25088, out_features=4096, bias=True)
        (1): ReLU(inplace=True)
        (2): Dropout(p=0.5, inplace=False)
        (3): Linear(in_features=4096, out_features=4096, bias=True)
        (4): ReLU(inplace=True)
        (5): Dropout(p=0.5, inplace=False)
        (6): Linear(in_features=4096, out_features=1000, bias=True)
      )
    )



.. GENERATED FROM PYTHON SOURCE LINES 41-42

.. note:: be sure to call ``model.eval()`` method before inferencing to set the dropout and batch normalization layers to evaluation mode. Failing to do this will yield inconsistent inference results.

.. GENERATED FROM PYTHON SOURCE LINES 44-49

Saving and Loading Models with Shapes
-------------------------------------
When loading model weights, we needed to instantiate the model class first, because the class
defines the structure of a network. We might want to save the structure of this class together with
the model, in which case we can pass ``model`` (and not ``model.state_dict()``) to the saving function:

.. GENERATED FROM PYTHON SOURCE LINES 49-52

.. code-block:: default


    torch.save(model, 'model.pth')








.. GENERATED FROM PYTHON SOURCE LINES 53-54

We can then load the model like this:

.. GENERATED FROM PYTHON SOURCE LINES 54-57

.. code-block:: default


    model = torch.load('model.pth')








.. GENERATED FROM PYTHON SOURCE LINES 58-59

.. note:: This approach uses Python `pickle <https://docs.python.org/3/library/pickle.html>`_ module when serializing the model, thus it relies on the actual class definition to be available when loading the model.

.. GENERATED FROM PYTHON SOURCE LINES 61-64

Related Tutorials
-----------------
`Saving and Loading a General Checkpoint in PyTorch <https://pytorch.org/tutorials/recipes/recipes/saving_and_loading_a_general_checkpoint.html>`_


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  12.238 seconds)


.. _sphx_glr_download_beginner_basics_saveloadrun_tutorial.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: saveloadrun_tutorial.py <saveloadrun_tutorial.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: saveloadrun_tutorial.ipynb <saveloadrun_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
