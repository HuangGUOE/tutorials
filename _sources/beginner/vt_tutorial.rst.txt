
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "beginner/vt_tutorial.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_beginner_vt_tutorial.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_beginner_vt_tutorial.py:


Optimizing Vision Transformer Model for Deployment
===========================

`Jeff Tang <https://github.com/jeffxtang>`_,
`Geeta Chauhan <https://github.com/gchauhan/>`_

Vision Transformer models apply the cutting-edge attention-based
transformer models, introduced in Natural Language Processing to achieve
all kinds of the state of the art (SOTA) results, to Computer Vision
tasks. Facebook Data-efficient Image Transformers `DeiT <https://ai.facebook.com/blog/data-efficient-image-transformers-a-promising-new-technique-for-image-classification>`_
is a Vision Transformer model trained on ImageNet for image
classification.

In this tutorial, we will first cover what DeiT is and how to use it,
then go through the complete steps of scripting, quantizing, optimizing,
and using the model in iOS and Android apps. We will also compare the
performance of quantized, optimized and non-quantized, non-optimized
models, and show the benefits of applying quantization and optimization
to the model along the steps.

.. GENERATED FROM PYTHON SOURCE LINES 27-47

What is DeiT
---------------------

Convolutional Neural Networks (CNNs) have been the main models for image
classification since deep learning took off in 2012, but CNNs typically
require hundreds of millions of images for training to achieve the
SOTAresults. DeiT is a vision transformer model that requires a lot less
data and computing resources for training to compete with the leading
CNNs in performing image classification, which is made possible by two
key components of of DeiT:

-  Data augmentation that simulates training on a much larger dataset;
-  Native distillation that allows the transformer network to learn from
   a CNNâ€™s output.

DeiT shows that Transformers can be successfully applied to computer
vision tasks, with limited access to data and resources. For more
details on DeiT, see the `repo <https://github.com/facebookresearch/deit>`_
and `paper <https://arxiv.org/abs/2012.12877>`_.


.. GENERATED FROM PYTHON SOURCE LINES 50-56

Classifying Images with DeiT
-------------------------------

Follow the README at the DeiT repo for detailed information on how to
classify images using DeiT, or for a quick test, first install the
required packages:

.. GENERATED FROM PYTHON SOURCE LINES 56-59

.. code-block:: default


    # pip install torch torchvision timm pandas requests








.. GENERATED FROM PYTHON SOURCE LINES 60-61

To run in Google Colab, uncomment the following line:

.. GENERATED FROM PYTHON SOURCE LINES 61-64

.. code-block:: default


    # !pip install timm pandas requests








.. GENERATED FROM PYTHON SOURCE LINES 65-66

then run the script below:

.. GENERATED FROM PYTHON SOURCE LINES 66-95

.. code-block:: default


    from PIL import Image
    import torch
    import timm
    import requests
    import torchvision.transforms as transforms
    from timm.data.constants import IMAGENET_DEFAULT_MEAN, IMAGENET_DEFAULT_STD

    print(torch.__version__)
    # should be 1.8.0


    model = torch.hub.load('facebookresearch/deit:main', 'deit_base_patch16_224', pretrained=True)
    model.eval()

    transform = transforms.Compose([
        transforms.Resize(256, interpolation=3),
        transforms.CenterCrop(224),
        transforms.ToTensor(),
        transforms.Normalize(IMAGENET_DEFAULT_MEAN, IMAGENET_DEFAULT_STD),
    ])

    img = Image.open(requests.get("https://raw.githubusercontent.com/pytorch/ios-demo-app/master/HelloWorld/HelloWorld/HelloWorld/image.png", stream=True).raw)
    img = transform(img)[None,]
    out = model(img)
    clsidx = torch.argmax(out)
    print(clsidx.item())






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    1.12.1+cu102
    Downloading: "https://github.com/facebookresearch/deit/zipball/main" to /var/lib/jenkins/.cache/torch/hub/main.zip
    Downloading: "https://dl.fbaipublicfiles.com/deit/deit_base_patch16_224-b5f2ef4d.pth" to /var/lib/jenkins/.cache/torch/hub/checkpoints/deit_base_patch16_224-b5f2ef4d.pth

      0%|          | 0.00/330M [00:00<?, ?B/s]
      0%|          | 56.0k/330M [00:00<10:45, 536kB/s]
      0%|          | 192k/330M [00:00<05:55, 975kB/s] 
      0%|          | 312k/330M [00:00<05:36, 1.03MB/s]
      0%|          | 448k/330M [00:00<05:01, 1.15MB/s]
      0%|          | 704k/330M [00:00<03:34, 1.61MB/s]
      1%|          | 1.80M/330M [00:00<01:13, 4.67MB/s]
      2%|1         | 5.75M/330M [00:00<00:22, 15.0MB/s]
      4%|3         | 12.0M/330M [00:00<00:11, 29.6MB/s]
      5%|4         | 15.3M/330M [00:00<00:10, 31.1MB/s]
      6%|6         | 20.4M/330M [00:01<00:08, 37.8MB/s]
      7%|7         | 24.1M/330M [00:01<00:08, 38.0MB/s]
      9%|8         | 29.5M/330M [00:01<00:07, 43.2MB/s]
     11%|#         | 34.9M/330M [00:01<00:06, 46.0MB/s]
     12%|#2        | 40.3M/330M [00:01<00:06, 47.9MB/s]
     14%|#3        | 44.9M/330M [00:01<00:06, 45.2MB/s]
     15%|#4        | 49.2M/330M [00:01<00:06, 43.5MB/s]
     16%|#6        | 53.4M/330M [00:01<00:06, 42.6MB/s]
     17%|#7        | 57.5M/330M [00:01<00:07, 40.4MB/s]
     19%|#8        | 61.4M/330M [00:02<00:07, 40.0MB/s]
     20%|#9        | 65.2M/330M [00:02<00:07, 39.4MB/s]
     21%|##        | 69.0M/330M [00:02<00:07, 38.7MB/s]
     22%|##2       | 72.7M/330M [00:02<00:07, 37.9MB/s]
     23%|##3       | 76.3M/330M [00:02<00:07, 37.5MB/s]
     24%|##4       | 80.2M/330M [00:02<00:06, 37.6MB/s]
     26%|##5       | 84.3M/330M [00:02<00:06, 38.4MB/s]
     27%|##6       | 88.0M/330M [00:02<00:06, 36.3MB/s]
     28%|##7       | 91.4M/330M [00:02<00:08, 31.0MB/s]
     29%|##8       | 94.5M/330M [00:03<00:08, 27.6MB/s]
     29%|##9       | 97.3M/330M [00:03<00:09, 24.7MB/s]
     30%|###       | 99.8M/330M [00:03<00:10, 22.9MB/s]
     31%|###       | 102M/330M [00:03<00:11, 20.1MB/s] 
     31%|###1      | 104M/330M [00:03<00:13, 17.9MB/s]
     32%|###2      | 106M/330M [00:03<00:15, 14.8MB/s]
     32%|###2      | 107M/330M [00:04<00:16, 14.0MB/s]
     33%|###2      | 109M/330M [00:04<00:18, 12.7MB/s]
     33%|###3      | 110M/330M [00:04<00:18, 12.4MB/s]
     34%|###3      | 111M/330M [00:04<00:21, 10.9MB/s]
     34%|###4      | 112M/330M [00:04<00:20, 11.1MB/s]
     34%|###4      | 113M/330M [00:04<00:23, 9.85MB/s]
     35%|###4      | 114M/330M [00:04<00:24, 9.40MB/s]
     35%|###4      | 115M/330M [00:05<00:24, 9.03MB/s]
     35%|###5      | 116M/330M [00:05<00:29, 7.74MB/s]
     35%|###5      | 117M/330M [00:05<00:28, 7.80MB/s]
     36%|###5      | 118M/330M [00:05<00:31, 7.14MB/s]
     36%|###5      | 118M/330M [00:05<00:32, 6.81MB/s]
     36%|###6      | 119M/330M [00:05<00:33, 6.66MB/s]
     36%|###6      | 120M/330M [00:05<00:34, 6.46MB/s]
     36%|###6      | 120M/330M [00:05<00:35, 6.28MB/s]
     37%|###6      | 121M/330M [00:06<00:34, 6.29MB/s]
     37%|###6      | 122M/330M [00:06<00:34, 6.31MB/s]
     37%|###7      | 122M/330M [00:06<00:34, 6.27MB/s]
     37%|###7      | 123M/330M [00:06<00:35, 6.10MB/s]
     37%|###7      | 123M/330M [00:06<00:37, 5.84MB/s]
     38%|###7      | 124M/330M [00:06<00:33, 6.52MB/s]
     38%|###7      | 125M/330M [00:06<00:33, 6.49MB/s]
     38%|###8      | 126M/330M [00:06<00:33, 6.36MB/s]
     38%|###8      | 126M/330M [00:06<00:34, 6.24MB/s]
     38%|###8      | 127M/330M [00:06<00:33, 6.31MB/s]
     39%|###8      | 127M/330M [00:07<00:33, 6.42MB/s]
     39%|###8      | 128M/330M [00:07<00:32, 6.47MB/s]
     39%|###9      | 129M/330M [00:07<00:32, 6.51MB/s]
     39%|###9      | 130M/330M [00:07<00:32, 6.57MB/s]
     39%|###9      | 130M/330M [00:07<00:31, 6.56MB/s]
     40%|###9      | 131M/330M [00:07<00:32, 6.48MB/s]
     40%|###9      | 132M/330M [00:07<00:31, 6.64MB/s]
     40%|####      | 132M/330M [00:07<00:31, 6.58MB/s]
     40%|####      | 133M/330M [00:07<00:31, 6.65MB/s]
     40%|####      | 134M/330M [00:08<00:30, 6.71MB/s]
     41%|####      | 134M/330M [00:08<00:30, 6.73MB/s]
     41%|####      | 135M/330M [00:08<00:30, 6.76MB/s]
     41%|####1     | 136M/330M [00:08<00:30, 6.77MB/s]
     41%|####1     | 137M/330M [00:08<00:30, 6.72MB/s]
     42%|####1     | 137M/330M [00:08<00:29, 6.82MB/s]
     42%|####1     | 138M/330M [00:08<00:30, 6.72MB/s]
     42%|####1     | 139M/330M [00:08<00:29, 6.80MB/s]
     42%|####2     | 139M/330M [00:08<00:29, 6.89MB/s]
     42%|####2     | 140M/330M [00:09<00:29, 6.84MB/s]
     43%|####2     | 141M/330M [00:09<00:28, 6.88MB/s]
     43%|####2     | 142M/330M [00:09<00:28, 6.85MB/s]
     43%|####3     | 142M/330M [00:09<00:28, 6.86MB/s]
     43%|####3     | 143M/330M [00:09<00:28, 6.78MB/s]
     44%|####3     | 144M/330M [00:09<00:28, 6.83MB/s]
     44%|####3     | 144M/330M [00:09<00:28, 6.80MB/s]
     44%|####3     | 145M/330M [00:09<00:28, 6.79MB/s]
     44%|####4     | 146M/330M [00:09<00:28, 6.83MB/s]
     44%|####4     | 146M/330M [00:10<00:27, 6.93MB/s]
     45%|####4     | 147M/330M [00:10<00:27, 6.89MB/s]
     45%|####4     | 148M/330M [00:10<00:27, 6.90MB/s]
     45%|####4     | 149M/330M [00:10<00:27, 6.90MB/s]
     45%|####5     | 149M/330M [00:10<00:27, 6.97MB/s]
     45%|####5     | 150M/330M [00:10<00:27, 6.95MB/s]
     46%|####5     | 151M/330M [00:10<00:27, 6.94MB/s]
     46%|####5     | 151M/330M [00:10<00:27, 6.93MB/s]
     46%|####6     | 152M/330M [00:10<00:27, 6.81MB/s]
     46%|####6     | 153M/330M [00:10<00:27, 6.85MB/s]
     46%|####6     | 153M/330M [00:11<00:26, 7.00MB/s]
     47%|####6     | 154M/330M [00:11<00:26, 6.97MB/s]
     47%|####6     | 155M/330M [00:11<00:26, 7.03MB/s]
     47%|####7     | 155M/330M [00:11<00:26, 7.00MB/s]
     47%|####7     | 156M/330M [00:11<00:25, 7.25MB/s]
     48%|####7     | 157M/330M [00:11<00:25, 7.12MB/s]
     48%|####7     | 158M/330M [00:11<00:29, 6.24MB/s]
     48%|####7     | 158M/330M [00:11<00:33, 5.46MB/s]
     48%|####8     | 159M/330M [00:12<00:37, 4.78MB/s]
     48%|####8     | 159M/330M [00:12<00:42, 4.22MB/s]
     48%|####8     | 160M/330M [00:12<00:48, 3.72MB/s]
     48%|####8     | 160M/330M [00:12<00:52, 3.42MB/s]
     49%|####8     | 160M/330M [00:12<00:54, 3.29MB/s]
     49%|####8     | 161M/330M [00:12<00:54, 3.24MB/s]
     49%|####8     | 161M/330M [00:12<01:00, 2.95MB/s]
     49%|####8     | 161M/330M [00:13<00:58, 3.05MB/s]
     49%|####8     | 162M/330M [00:13<00:58, 3.04MB/s]
     49%|####9     | 162M/330M [00:13<01:04, 2.75MB/s]
     49%|####9     | 162M/330M [00:13<00:57, 3.07MB/s]
     49%|####9     | 163M/330M [00:13<00:56, 3.12MB/s]
     49%|####9     | 163M/330M [00:13<00:56, 3.09MB/s]
     49%|####9     | 163M/330M [00:13<00:56, 3.10MB/s]
     50%|####9     | 164M/330M [00:13<00:55, 3.14MB/s]
     50%|####9     | 164M/330M [00:13<00:54, 3.18MB/s]
     50%|####9     | 164M/330M [00:14<00:55, 3.14MB/s]
     50%|####9     | 165M/330M [00:14<01:00, 2.88MB/s]
     50%|####9     | 165M/330M [00:14<01:03, 2.75MB/s]
     50%|#####     | 165M/330M [00:14<01:07, 2.56MB/s]
     50%|#####     | 165M/330M [00:14<01:09, 2.50MB/s]
     50%|#####     | 166M/330M [00:14<01:10, 2.44MB/s]
     50%|#####     | 166M/330M [00:14<01:09, 2.47MB/s]
     50%|#####     | 166M/330M [00:14<01:12, 2.36MB/s]
     50%|#####     | 166M/330M [00:14<01:12, 2.38MB/s]
     50%|#####     | 167M/330M [00:15<01:17, 2.23MB/s]
     51%|#####     | 167M/330M [00:15<01:23, 2.06MB/s]
     51%|#####     | 167M/330M [00:15<01:26, 1.99MB/s]
     51%|#####     | 167M/330M [00:15<01:27, 1.96MB/s]
     51%|#####     | 167M/330M [00:15<01:28, 1.92MB/s]
     51%|#####     | 168M/330M [00:15<01:30, 1.88MB/s]
     51%|#####     | 168M/330M [00:15<01:30, 1.89MB/s]
     51%|#####     | 168M/330M [00:15<01:30, 1.88MB/s]
     51%|#####     | 168M/330M [00:15<01:28, 1.92MB/s]
     51%|#####     | 168M/330M [00:16<01:27, 1.94MB/s]
     51%|#####1    | 169M/330M [00:16<01:26, 1.97MB/s]
     51%|#####1    | 169M/330M [00:16<01:26, 1.96MB/s]
     51%|#####1    | 169M/330M [00:16<01:30, 1.86MB/s]
     51%|#####1    | 169M/330M [00:16<01:19, 2.13MB/s]
     51%|#####1    | 170M/330M [00:16<01:18, 2.14MB/s]
     51%|#####1    | 170M/330M [00:16<01:19, 2.11MB/s]
     51%|#####1    | 170M/330M [00:16<01:20, 2.09MB/s]
     52%|#####1    | 170M/330M [00:16<01:22, 2.03MB/s]
     52%|#####1    | 170M/330M [00:17<01:23, 2.01MB/s]
     52%|#####1    | 171M/330M [00:17<01:26, 1.94MB/s]
     52%|#####1    | 171M/330M [00:17<01:30, 1.86MB/s]
     52%|#####1    | 171M/330M [00:17<01:35, 1.75MB/s]
     52%|#####1    | 171M/330M [00:17<01:36, 1.72MB/s]
     52%|#####1    | 171M/330M [00:17<01:34, 1.76MB/s]
     52%|#####1    | 171M/330M [00:17<01:34, 1.77MB/s]
     52%|#####1    | 172M/330M [00:17<01:31, 1.81MB/s]
     52%|#####2    | 172M/330M [00:17<01:31, 1.82MB/s]
     52%|#####2    | 172M/330M [00:18<01:29, 1.84MB/s]
     52%|#####2    | 172M/330M [00:18<01:29, 1.86MB/s]
     52%|#####2    | 172M/330M [00:18<01:25, 1.93MB/s]
     52%|#####2    | 173M/330M [00:18<01:25, 1.93MB/s]
     52%|#####2    | 173M/330M [00:18<01:23, 1.98MB/s]
     52%|#####2    | 173M/330M [00:18<01:24, 1.94MB/s]
     52%|#####2    | 173M/330M [00:18<01:22, 2.00MB/s]
     53%|#####2    | 174M/330M [00:18<01:22, 2.00MB/s]
     53%|#####2    | 174M/330M [00:18<01:20, 2.04MB/s]
     53%|#####2    | 174M/330M [00:19<01:18, 2.07MB/s]
     53%|#####2    | 174M/330M [00:19<01:18, 2.09MB/s]
     53%|#####2    | 174M/330M [00:19<01:16, 2.14MB/s]
     53%|#####2    | 175M/330M [00:19<01:15, 2.17MB/s]
     53%|#####2    | 175M/330M [00:19<01:19, 2.04MB/s]
     53%|#####3    | 175M/330M [00:19<01:15, 2.14MB/s]
     53%|#####3    | 175M/330M [00:19<01:14, 2.18MB/s]
     53%|#####3    | 176M/330M [00:19<01:13, 2.21MB/s]
     53%|#####3    | 176M/330M [00:19<01:13, 2.22MB/s]
     53%|#####3    | 176M/330M [00:20<01:12, 2.22MB/s]
     53%|#####3    | 176M/330M [00:20<01:12, 2.24MB/s]
     53%|#####3    | 176M/330M [00:20<01:11, 2.25MB/s]
     54%|#####3    | 177M/330M [00:20<01:12, 2.22MB/s]
     54%|#####3    | 177M/330M [00:20<01:10, 2.27MB/s]
     54%|#####3    | 177M/330M [00:20<01:09, 2.31MB/s]
     54%|#####3    | 177M/330M [00:20<01:08, 2.35MB/s]
     54%|#####3    | 178M/330M [00:20<01:09, 2.30MB/s]
     54%|#####3    | 178M/330M [00:20<01:07, 2.37MB/s]
     54%|#####3    | 178M/330M [00:21<01:06, 2.40MB/s]
     54%|#####4    | 178M/330M [00:21<01:06, 2.40MB/s]
     54%|#####4    | 179M/330M [00:21<01:04, 2.47MB/s]
     54%|#####4    | 179M/330M [00:21<01:03, 2.50MB/s]
     54%|#####4    | 179M/330M [00:21<01:03, 2.49MB/s]
     54%|#####4    | 180M/330M [00:21<01:01, 2.59MB/s]
     54%|#####4    | 180M/330M [00:21<01:00, 2.59MB/s]
     55%|#####4    | 180M/330M [00:21<01:00, 2.62MB/s]
     55%|#####4    | 180M/330M [00:21<01:00, 2.59MB/s]
     55%|#####4    | 181M/330M [00:22<00:58, 2.67MB/s]
     55%|#####4    | 181M/330M [00:22<00:57, 2.73MB/s]
     55%|#####4    | 181M/330M [00:22<01:02, 2.52MB/s]
     55%|#####4    | 182M/330M [00:22<00:54, 2.85MB/s]
     55%|#####5    | 182M/330M [00:22<00:53, 2.89MB/s]
     55%|#####5    | 182M/330M [00:22<00:53, 2.91MB/s]
     55%|#####5    | 183M/330M [00:22<00:52, 2.95MB/s]
     55%|#####5    | 183M/330M [00:22<00:53, 2.90MB/s]
     55%|#####5    | 183M/330M [00:22<00:53, 2.91MB/s]
     56%|#####5    | 183M/330M [00:22<00:53, 2.87MB/s]
     56%|#####5    | 184M/330M [00:23<00:52, 2.91MB/s]
     56%|#####5    | 184M/330M [00:23<00:52, 2.94MB/s]
     56%|#####5    | 184M/330M [00:23<00:51, 2.99MB/s]
     56%|#####5    | 185M/330M [00:23<00:50, 3.03MB/s]
     56%|#####5    | 185M/330M [00:23<00:49, 3.06MB/s]
     56%|#####6    | 185M/330M [00:23<00:49, 3.09MB/s]
     56%|#####6    | 186M/330M [00:23<00:48, 3.10MB/s]
     56%|#####6    | 186M/330M [00:23<00:48, 3.14MB/s]
     56%|#####6    | 186M/330M [00:23<00:47, 3.20MB/s]
     57%|#####6    | 187M/330M [00:24<00:47, 3.17MB/s]
     57%|#####6    | 187M/330M [00:24<00:46, 3.21MB/s]
     57%|#####6    | 187M/330M [00:24<00:46, 3.23MB/s]
     57%|#####6    | 188M/330M [00:24<00:46, 3.23MB/s]
     57%|#####6    | 188M/330M [00:24<00:44, 3.32MB/s]
     57%|#####7    | 188M/330M [00:24<00:44, 3.34MB/s]
     57%|#####7    | 189M/330M [00:25<01:47, 1.38MB/s]
     58%|#####7    | 191M/330M [00:25<00:34, 4.21MB/s]
     58%|#####7    | 191M/330M [00:25<00:35, 4.14MB/s]
     58%|#####8    | 192M/330M [00:25<00:36, 3.96MB/s]
     58%|#####8    | 193M/330M [00:25<00:36, 3.95MB/s]
     58%|#####8    | 193M/330M [00:25<00:37, 3.81MB/s]
     59%|#####8    | 194M/330M [00:26<00:37, 3.84MB/s]
     59%|#####8    | 194M/330M [00:26<00:37, 3.86MB/s]
     59%|#####8    | 194M/330M [00:26<00:36, 3.85MB/s]
     59%|#####8    | 195M/330M [00:26<00:37, 3.84MB/s]
     59%|#####9    | 195M/330M [00:26<00:37, 3.83MB/s]
     59%|#####9    | 196M/330M [00:26<00:36, 3.84MB/s]
     59%|#####9    | 196M/330M [00:26<00:36, 3.82MB/s]
     59%|#####9    | 196M/330M [00:26<00:35, 3.98MB/s]
     60%|#####9    | 197M/330M [00:26<00:35, 3.98MB/s]
     60%|#####9    | 197M/330M [00:27<00:33, 4.13MB/s]
     60%|#####9    | 198M/330M [00:27<00:32, 4.30MB/s]
     60%|#####9    | 198M/330M [00:27<00:33, 4.13MB/s]
     60%|######    | 199M/330M [00:27<00:30, 4.46MB/s]
     60%|######    | 199M/330M [00:27<00:30, 4.55MB/s]
     60%|######    | 200M/330M [00:27<00:30, 4.48MB/s]
     61%|######    | 200M/330M [00:27<00:27, 4.97MB/s]
     61%|######    | 201M/330M [00:27<00:26, 5.07MB/s]
     61%|######    | 201M/330M [00:27<00:25, 5.20MB/s]
     61%|######1   | 202M/330M [00:28<00:25, 5.38MB/s]
     61%|######1   | 202M/330M [00:28<00:24, 5.52MB/s]
     61%|######1   | 203M/330M [00:28<00:24, 5.43MB/s]
     62%|######1   | 204M/330M [00:28<00:23, 5.74MB/s]
     62%|######1   | 204M/330M [00:28<00:24, 5.31MB/s]
     62%|######2   | 205M/330M [00:28<00:20, 6.30MB/s]
     62%|######2   | 206M/330M [00:28<00:19, 6.55MB/s]
     63%|######2   | 206M/330M [00:28<00:19, 6.63MB/s]
     63%|######2   | 207M/330M [00:28<00:19, 6.67MB/s]
     63%|######2   | 208M/330M [00:29<00:18, 6.99MB/s]
     63%|######3   | 209M/330M [00:29<00:17, 7.19MB/s]
     63%|######3   | 209M/330M [00:29<00:17, 7.17MB/s]
     64%|######3   | 210M/330M [00:29<00:17, 7.37MB/s]
     64%|######3   | 211M/330M [00:29<00:16, 7.55MB/s]
     64%|######4   | 212M/330M [00:29<00:15, 7.96MB/s]
     64%|######4   | 213M/330M [00:29<00:15, 7.93MB/s]
     65%|######4   | 213M/330M [00:29<00:16, 7.26MB/s]
     65%|######4   | 214M/330M [00:29<00:17, 6.90MB/s]
     65%|######5   | 215M/330M [00:29<00:17, 6.82MB/s]
     65%|######5   | 215M/330M [00:30<00:18, 6.66MB/s]
     65%|######5   | 216M/330M [00:30<00:18, 6.55MB/s]
     66%|######5   | 217M/330M [00:30<00:18, 6.53MB/s]
     66%|######5   | 217M/330M [00:30<00:18, 6.55MB/s]
     66%|######6   | 218M/330M [00:30<00:17, 6.83MB/s]
     66%|######6   | 219M/330M [00:30<00:17, 6.86MB/s]
     66%|######6   | 220M/330M [00:30<00:16, 6.97MB/s]
     67%|######6   | 220M/330M [00:30<00:16, 7.17MB/s]
     67%|######6   | 221M/330M [00:30<00:15, 7.24MB/s]
     67%|######7   | 222M/330M [00:31<00:15, 7.19MB/s]
     67%|######7   | 222M/330M [00:31<00:15, 7.39MB/s]
     68%|######7   | 223M/330M [00:31<00:15, 7.36MB/s]
     68%|######7   | 224M/330M [00:31<00:15, 7.34MB/s]
     68%|######8   | 225M/330M [00:31<00:14, 7.44MB/s]
     68%|######8   | 225M/330M [00:31<00:14, 7.47MB/s]
     68%|######8   | 226M/330M [00:31<00:16, 6.50MB/s]
     69%|######8   | 227M/330M [00:31<00:14, 7.29MB/s]
     69%|######8   | 228M/330M [00:31<00:15, 6.88MB/s]
     69%|######9   | 228M/330M [00:32<00:16, 6.58MB/s]
     69%|######9   | 229M/330M [00:32<00:16, 6.37MB/s]
     70%|######9   | 230M/330M [00:32<00:16, 6.30MB/s]
     70%|######9   | 230M/330M [00:32<00:16, 6.18MB/s]
     70%|######9   | 231M/330M [00:32<00:17, 6.02MB/s]
     70%|#######   | 232M/330M [00:32<00:17, 5.99MB/s]
     70%|#######   | 232M/330M [00:32<00:17, 5.86MB/s]
     70%|#######   | 233M/330M [00:32<00:17, 5.95MB/s]
     71%|#######   | 233M/330M [00:32<00:16, 6.02MB/s]
     71%|#######   | 234M/330M [00:33<00:16, 6.10MB/s]
     71%|#######1  | 235M/330M [00:33<00:16, 6.27MB/s]
     71%|#######1  | 235M/330M [00:33<00:16, 6.21MB/s]
     71%|#######1  | 236M/330M [00:33<00:16, 6.17MB/s]
     72%|#######1  | 236M/330M [00:33<00:15, 6.27MB/s]
     72%|#######1  | 237M/330M [00:33<00:15, 6.17MB/s]
     72%|#######1  | 238M/330M [00:33<00:15, 6.25MB/s]
     72%|#######2  | 238M/330M [00:33<00:15, 6.26MB/s]
     72%|#######2  | 239M/330M [00:33<00:15, 6.25MB/s]
     73%|#######2  | 240M/330M [00:33<00:14, 6.36MB/s]
     73%|#######2  | 240M/330M [00:34<00:14, 6.37MB/s]
     73%|#######2  | 241M/330M [00:34<00:14, 6.42MB/s]
     73%|#######3  | 242M/330M [00:34<00:14, 6.48MB/s]
     73%|#######3  | 242M/330M [00:34<00:14, 6.51MB/s]
     74%|#######3  | 243M/330M [00:34<00:13, 6.54MB/s]
     74%|#######3  | 244M/330M [00:34<00:13, 6.53MB/s]
     74%|#######3  | 244M/330M [00:34<00:13, 6.65MB/s]
     74%|#######4  | 245M/330M [00:34<00:13, 6.69MB/s]
     74%|#######4  | 246M/330M [00:34<00:13, 6.82MB/s]
     75%|#######4  | 246M/330M [00:35<00:13, 6.73MB/s]
     75%|#######4  | 247M/330M [00:35<00:13, 6.53MB/s]
     75%|#######5  | 248M/330M [00:35<00:13, 6.61MB/s]
     75%|#######5  | 248M/330M [00:35<00:12, 6.63MB/s]
     75%|#######5  | 249M/330M [00:35<00:12, 6.67MB/s]
     76%|#######5  | 250M/330M [00:35<00:12, 6.76MB/s]
     76%|#######5  | 250M/330M [00:35<00:12, 6.74MB/s]
     76%|#######6  | 251M/330M [00:35<00:12, 6.59MB/s]
     76%|#######6  | 252M/330M [00:35<00:12, 6.58MB/s]
     76%|#######6  | 252M/330M [00:36<00:12, 6.56MB/s]
     77%|#######6  | 253M/330M [00:36<00:12, 6.49MB/s]
     77%|#######6  | 254M/330M [00:36<00:12, 6.68MB/s]
     77%|#######7  | 254M/330M [00:36<00:11, 6.63MB/s]
     77%|#######7  | 255M/330M [00:36<00:11, 6.65MB/s]
     77%|#######7  | 256M/330M [00:36<00:12, 6.48MB/s]
     78%|#######7  | 257M/330M [00:36<00:11, 6.82MB/s]
     78%|#######7  | 257M/330M [00:36<00:11, 6.81MB/s]
     78%|#######8  | 258M/330M [00:36<00:11, 6.79MB/s]
     78%|#######8  | 259M/330M [00:36<00:11, 6.78MB/s]
     78%|#######8  | 259M/330M [00:37<00:11, 6.76MB/s]
     79%|#######8  | 260M/330M [00:37<00:10, 6.91MB/s]
     79%|#######8  | 261M/330M [00:37<00:10, 6.81MB/s]
     79%|#######9  | 261M/330M [00:37<00:10, 6.71MB/s]
     79%|#######9  | 262M/330M [00:37<00:10, 6.77MB/s]
     80%|#######9  | 263M/330M [00:37<00:10, 6.82MB/s]
     80%|#######9  | 263M/330M [00:37<00:10, 6.92MB/s]
     80%|#######9  | 264M/330M [00:37<00:10, 6.89MB/s]
     80%|########  | 265M/330M [00:37<00:09, 6.93MB/s]
     80%|########  | 265M/330M [00:38<00:09, 6.94MB/s]
     81%|########  | 266M/330M [00:38<00:09, 6.95MB/s]
     81%|########  | 267M/330M [00:38<00:09, 7.08MB/s]
     81%|########1 | 268M/330M [00:38<00:09, 7.07MB/s]
     81%|########1 | 268M/330M [00:38<00:09, 7.18MB/s]
     81%|########1 | 269M/330M [00:38<00:08, 7.27MB/s]
     82%|########1 | 270M/330M [00:38<00:08, 7.07MB/s]
     82%|########1 | 271M/330M [00:38<00:08, 7.20MB/s]
     82%|########2 | 271M/330M [00:38<00:08, 6.95MB/s]
     82%|########2 | 272M/330M [00:38<00:08, 7.12MB/s]
     83%|########2 | 273M/330M [00:39<00:08, 7.22MB/s]
     83%|########2 | 274M/330M [00:39<00:08, 7.20MB/s]
     83%|########3 | 274M/330M [00:39<00:07, 7.33MB/s]
     83%|########3 | 275M/330M [00:39<00:07, 7.33MB/s]
     84%|########3 | 276M/330M [00:39<00:07, 7.37MB/s]
     84%|########3 | 277M/330M [00:39<00:07, 7.34MB/s]
     84%|########4 | 277M/330M [00:39<00:07, 7.36MB/s]
     84%|########4 | 278M/330M [00:39<00:07, 7.48MB/s]
     84%|########4 | 279M/330M [00:39<00:07, 7.50MB/s]
     85%|########4 | 280M/330M [00:40<00:07, 7.54MB/s]
     85%|########4 | 280M/330M [00:40<00:06, 7.48MB/s]
     85%|########5 | 281M/330M [00:40<00:06, 7.49MB/s]
     85%|########5 | 282M/330M [00:40<00:06, 7.48MB/s]
     86%|########5 | 283M/330M [00:40<00:06, 7.61MB/s]
     86%|########5 | 283M/330M [00:40<00:06, 7.44MB/s]
     86%|########6 | 284M/330M [00:40<00:06, 7.66MB/s]
     86%|########6 | 285M/330M [00:40<00:06, 7.89MB/s]
     87%|########6 | 286M/330M [00:40<00:05, 7.89MB/s]
     87%|########6 | 287M/330M [00:40<00:05, 7.86MB/s]
     87%|########7 | 287M/330M [00:41<00:09, 4.93MB/s]
     88%|########7 | 290M/330M [00:41<00:04, 8.57MB/s]
     88%|########7 | 291M/330M [00:41<00:04, 8.50MB/s]
     88%|########8 | 292M/330M [00:41<00:04, 8.29MB/s]
     89%|########8 | 292M/330M [00:41<00:04, 8.21MB/s]
     89%|########8 | 293M/330M [00:41<00:04, 8.38MB/s]
     89%|########9 | 294M/330M [00:41<00:04, 8.35MB/s]
     89%|########9 | 295M/330M [00:42<00:04, 8.17MB/s]
     90%|########9 | 296M/330M [00:42<00:04, 7.90MB/s]
     90%|########9 | 297M/330M [00:42<00:04, 8.26MB/s]
     90%|######### | 298M/330M [00:42<00:04, 8.51MB/s]
     90%|######### | 299M/330M [00:42<00:03, 8.60MB/s]
     91%|######### | 300M/330M [00:42<00:03, 8.76MB/s]
     91%|######### | 300M/330M [00:42<00:03, 8.85MB/s]
     91%|#########1| 301M/330M [00:42<00:03, 9.00MB/s]
     92%|#########1| 302M/330M [00:42<00:03, 8.98MB/s]
     92%|#########1| 303M/330M [00:43<00:03, 9.19MB/s]
     92%|#########2| 304M/330M [00:43<00:02, 9.37MB/s]
     92%|#########2| 305M/330M [00:43<00:02, 9.43MB/s]
     93%|#########2| 306M/330M [00:43<00:02, 9.39MB/s]
     93%|#########3| 307M/330M [00:43<00:02, 9.81MB/s]
     93%|#########3| 308M/330M [00:43<00:02, 10.0MB/s]
     94%|#########3| 309M/330M [00:43<00:02, 9.83MB/s]
     94%|#########3| 310M/330M [00:43<00:02, 9.94MB/s]
     94%|#########4| 311M/330M [00:43<00:01, 9.90MB/s]
     95%|#########4| 313M/330M [00:44<00:01, 10.4MB/s]
     95%|#########4| 314M/330M [00:44<00:01, 10.6MB/s]
     95%|#########5| 315M/330M [00:44<00:01, 10.2MB/s]
     96%|#########5| 316M/330M [00:44<00:01, 11.1MB/s]
     96%|#########6| 317M/330M [00:44<00:01, 11.4MB/s]
     96%|#########6| 318M/330M [00:44<00:01, 11.5MB/s]
     97%|#########6| 320M/330M [00:44<00:00, 11.5MB/s]
     97%|#########7| 321M/330M [00:44<00:00, 11.9MB/s]
     98%|#########7| 322M/330M [00:44<00:00, 12.3MB/s]
     98%|#########7| 323M/330M [00:44<00:00, 12.5MB/s]
     98%|#########8| 325M/330M [00:45<00:00, 12.3MB/s]
     99%|#########8| 326M/330M [00:45<00:00, 12.0MB/s]
     99%|#########9| 327M/330M [00:45<00:00, 12.6MB/s]
     99%|#########9| 329M/330M [00:45<00:00, 13.0MB/s]
    100%|#########9| 330M/330M [00:45<00:00, 13.3MB/s]
    100%|##########| 330M/330M [00:45<00:00, 7.60MB/s]
    /opt/conda/lib/python3.7/site-packages/torchvision/transforms/transforms.py:333: UserWarning:

    Argument 'interpolation' of type int is deprecated since 0.13 and will be removed in 0.15. Please use InterpolationMode enum.

    269




.. GENERATED FROM PYTHON SOURCE LINES 96-104

The output should be 269, which, according to the ImageNet list of class
index to `labels file <https://gist.github.com/yrevar/942d3a0ac09ec9e5eb3a>`_, maps to â€˜timber
wolf, grey wolf, gray wolf, Canis lupusâ€™.

Now that we have verified that we can use the DeiT model to classify
images, letâ€™s see how to modify the model so it can run on iOS and
Android apps.


.. GENERATED FROM PYTHON SOURCE LINES 107-114

Scripting DeiT
----------------------
To use the model on mobile, we first need to script the
model. See the `Script and Optimize recipe <https://pytorch.org/tutorials/recipes/script_optimized.html>`_ for a
quick overview. Run the code below to convert the DeiT model used in the
previous step to the TorchScript format that can run on mobile.


.. GENERATED FROM PYTHON SOURCE LINES 114-122

.. code-block:: default



    model = torch.hub.load('facebookresearch/deit:main', 'deit_base_patch16_224', pretrained=True)
    model.eval()
    scripted_model = torch.jit.script(model)
    scripted_model.save("fbdeit_scripted.pt")






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Using cache found in /var/lib/jenkins/.cache/torch/hub/facebookresearch_deit_main




.. GENERATED FROM PYTHON SOURCE LINES 123-126

The scripted model file fbdeit_scripted.pt of size about 346MB is
generated.


.. GENERATED FROM PYTHON SOURCE LINES 129-140

Quantizing DeiT
---------------------
To reduce the trained model size significantly while
keeping the inference accuracy about the same, quantization can be
applied to the model. Thanks to the transformer model used in DeiT, we
can easily apply dynamic-quantization to the model, because dynamic
quantization works best for LSTM and transformer models (see `here <https://pytorch.org/docs/stable/quantization.html?highlight=quantization#dynamic-quantization>`_
for more details).

Now run the code below:


.. GENERATED FROM PYTHON SOURCE LINES 140-151

.. code-block:: default


    # Use 'fbgemm' for server inference and 'qnnpack' for mobile inference
    backend = "fbgemm" # replaced with qnnpack causing much worse inference speed for quantized model on this notebook
    model.qconfig = torch.quantization.get_default_qconfig(backend)
    torch.backends.quantized.engine = backend

    quantized_model = torch.quantization.quantize_dynamic(model, qconfig_spec={torch.nn.Linear}, dtype=torch.qint8)
    scripted_quantized_model = torch.jit.script(quantized_model)
    scripted_quantized_model.save("fbdeit_scripted_quantized.pt")






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    /opt/conda/lib/python3.7/site-packages/torch/ao/quantization/observer.py:178: UserWarning:

    Please use quant_min and quant_max to specify the range for observers.                     reduce_range will be deprecated in a future release of PyTorch.





.. GENERATED FROM PYTHON SOURCE LINES 152-156

This generates the scripted and quantized version of the model
fbdeit_quantized_scripted.pt, with size about 89MB, a 74% reduction of
the non-quantized model size of 346MB!


.. GENERATED FROM PYTHON SOURCE LINES 158-161

You can use the ``scripted_quantized_model`` to generate the same
inference result:


.. GENERATED FROM PYTHON SOURCE LINES 161-167

.. code-block:: default


    out = scripted_quantized_model(img)
    clsidx = torch.argmax(out)
    print(clsidx.item())
    # The same output 269 should be printed





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    269




.. GENERATED FROM PYTHON SOURCE LINES 168-173

Optimizing DeiT
---------------------
The final step before using the quantized and scripted
model on mobile is to optimize it:


.. GENERATED FROM PYTHON SOURCE LINES 173-179

.. code-block:: default


    from torch.utils.mobile_optimizer import optimize_for_mobile
    optimized_scripted_quantized_model = optimize_for_mobile(scripted_quantized_model)
    optimized_scripted_quantized_model.save("fbdeit_optimized_scripted_quantized.pt")









.. GENERATED FROM PYTHON SOURCE LINES 180-184

The generated fbdeit_optimized_scripted_quantized.pt file has about the
same size as the quantized, scripted, but non-optimized model. The
inference result remains the same.


.. GENERATED FROM PYTHON SOURCE LINES 184-193

.. code-block:: default




    out = optimized_scripted_quantized_model(img)
    clsidx = torch.argmax(out)
    print(clsidx.item())
    # Again, the same output 269 should be printed






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    /opt/conda/lib/python3.7/site-packages/torch/nn/modules/module.py:1130: UserWarning:

    Named tensors and all their associated APIs are an experimental feature and subject to change. Please do not use them for anything important until they are released as stable. (Triggered internally at  ../c10/core/TensorImpl.h:1408.)

    269




.. GENERATED FROM PYTHON SOURCE LINES 194-200

Using Lite Interpreter
------------------------

To see how much model size reduction and inference speed up the Lite
Interpreter can result in, letâ€™s create the lite version of the model.


.. GENERATED FROM PYTHON SOURCE LINES 200-205

.. code-block:: default


    optimized_scripted_quantized_model._save_for_lite_interpreter("fbdeit_optimized_scripted_quantized_lite.ptl")
    ptl = torch.jit.load("fbdeit_optimized_scripted_quantized_lite.ptl")









.. GENERATED FROM PYTHON SOURCE LINES 206-209

Although the lite model size is comparable to the non-lite version, when
running the lite version on mobile, the inference speed up is expected.


.. GENERATED FROM PYTHON SOURCE LINES 212-219

Comparing Inference Speed
---------------------------

To see how the inference speed differs for the four models - the
original model, the scripted model, the quantized-and-scripted model,
the optimized-quantized-and-scripted model - run the code below:


.. GENERATED FROM PYTHON SOURCE LINES 219-237

.. code-block:: default


    with torch.autograd.profiler.profile(use_cuda=False) as prof1:
        out = model(img)
    with torch.autograd.profiler.profile(use_cuda=False) as prof2:
        out = scripted_model(img)
    with torch.autograd.profiler.profile(use_cuda=False) as prof3:
        out = scripted_quantized_model(img)
    with torch.autograd.profiler.profile(use_cuda=False) as prof4:
        out = optimized_scripted_quantized_model(img)
    with torch.autograd.profiler.profile(use_cuda=False) as prof5:
        out = ptl(img)

    print("original model: {:.2f}ms".format(prof1.self_cpu_time_total/1000))
    print("scripted model: {:.2f}ms".format(prof2.self_cpu_time_total/1000))
    print("scripted & quantized model: {:.2f}ms".format(prof3.self_cpu_time_total/1000))
    print("scripted & quantized & optimized model: {:.2f}ms".format(prof4.self_cpu_time_total/1000))
    print("lite model: {:.2f}ms".format(prof5.self_cpu_time_total/1000))





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    original model: 340.58ms
    scripted model: 383.65ms
    scripted & quantized model: 256.93ms
    scripted & quantized & optimized model: 232.74ms
    lite model: 222.31ms




.. GENERATED FROM PYTHON SOURCE LINES 238-248

The results running on a Google Colab are:

::

   original model: 1236.69ms
   scripted model: 1226.72ms
   scripted & quantized model: 593.19ms
   scripted & quantized & optimized model: 598.01ms
   lite model: 600.72ms


.. GENERATED FROM PYTHON SOURCE LINES 251-255

The following results summarize the inference time taken by each model
and the percentage reduction of each model relative to the original
model.


.. GENERATED FROM PYTHON SOURCE LINES 255-283

.. code-block:: default


    import pandas as pd
    import numpy as np

    df = pd.DataFrame({'Model': ['original model','scripted model', 'scripted & quantized model', 'scripted & quantized & optimized model', 'lite model']})
    df = pd.concat([df, pd.DataFrame([
        ["{:.2f}ms".format(prof1.self_cpu_time_total/1000), "0%"],
        ["{:.2f}ms".format(prof2.self_cpu_time_total/1000),
         "{:.2f}%".format((prof1.self_cpu_time_total-prof2.self_cpu_time_total)/prof1.self_cpu_time_total*100)],
        ["{:.2f}ms".format(prof3.self_cpu_time_total/1000),
         "{:.2f}%".format((prof1.self_cpu_time_total-prof3.self_cpu_time_total)/prof1.self_cpu_time_total*100)],
        ["{:.2f}ms".format(prof4.self_cpu_time_total/1000),
         "{:.2f}%".format((prof1.self_cpu_time_total-prof4.self_cpu_time_total)/prof1.self_cpu_time_total*100)],
        ["{:.2f}ms".format(prof5.self_cpu_time_total/1000),
         "{:.2f}%".format((prof1.self_cpu_time_total-prof5.self_cpu_time_total)/prof1.self_cpu_time_total*100)]],
        columns=['Inference Time', 'Reduction'])], axis=1)

    print(df)

    """
            Model                             Inference Time    Reduction
    0	original model                             1236.69ms           0%
    1	scripted model                             1226.72ms        0.81%
    2	scripted & quantized model                  593.19ms       52.03%
    3	scripted & quantized & optimized model      598.01ms       51.64%
    4	lite model                                  600.72ms       51.43%
    """





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

                                        Model Inference Time Reduction
    0                          original model       340.58ms        0%
    1                          scripted model       383.65ms   -12.65%
    2              scripted & quantized model       256.93ms    24.56%
    3  scripted & quantized & optimized model       232.74ms    31.66%
    4                              lite model       222.31ms    34.73%

    '\n        Model                             Inference Time    Reduction\n0\toriginal model                             1236.69ms           0%\n1\tscripted model                             1226.72ms        0.81%\n2\tscripted & quantized model                  593.19ms       52.03%\n3\tscripted & quantized & optimized model      598.01ms       51.64%\n4\tlite model                                  600.72ms       51.43%\n'



.. GENERATED FROM PYTHON SOURCE LINES 284-290

Learn More
~~~~~~~~~~~~~~~~~

- `Facebook Data-efficient Image Transformers <https://ai.facebook.com/blog/data-efficient-image-transformers-a-promising-new-technique-for-image-classification>`__
- `Vision Transformer with ImageNet and MNIST on iOS <https://github.com/pytorch/ios-demo-app/tree/master/ViT4MNIST>`__
- `Vision Transformer with ImageNet and MNIST on Android <https://github.com/pytorch/android-demo-app/tree/master/ViT4MNIST>`__


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 1 minutes  6.408 seconds)


.. _sphx_glr_download_beginner_vt_tutorial.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: vt_tutorial.py <vt_tutorial.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: vt_tutorial.ipynb <vt_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
