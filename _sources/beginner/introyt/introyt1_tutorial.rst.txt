
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "beginner/introyt/introyt1_tutorial.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_beginner_introyt_introyt1_tutorial.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_beginner_introyt_introyt1_tutorial.py:


**Introduction** ||
`Tensors <tensors_deeper_tutorial.html>`_ ||
`Autograd <autogradyt_tutorial.html>`_ ||
`Building Models <modelsyt_tutorial.html>`_ ||
`TensorBoard Support <tensorboardyt_tutorial.html>`_ ||
`Training Models <trainingyt.html>`_ ||
`Model Understanding <captumyt.html>`_

Introduction to PyTorch
=======================

Follow along with the video below or on `youtube <https://www.youtube.com/watch?v=IC0_FRiX-sw>`__.

.. raw:: html

   <div style="margin-top:10px; margin-bottom:10px;">
     <iframe width="560" height="315" src="https://www.youtube.com/embed/IC0_FRiX-sw" frameborder="0" allow="accelerometer; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>
   </div>

PyTorch Tensors
---------------

Follow along with the video beginning at `03:50 <https://www.youtube.com/watch?v=IC0_FRiX-sw&t=230s>`__.

First, we’ll import pytorch.

.. GENERATED FROM PYTHON SOURCE LINES 29-32

.. code-block:: default


    import torch








.. GENERATED FROM PYTHON SOURCE LINES 33-36

Let’s see a few basic tensor manipulations. First, just a few of the
ways to create tensors:


.. GENERATED FROM PYTHON SOURCE LINES 36-42

.. code-block:: default


    z = torch.zeros(5, 3)
    print(z)
    print(z.dtype)






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    tensor([[0., 0., 0.],
            [0., 0., 0.],
            [0., 0., 0.],
            [0., 0., 0.],
            [0., 0., 0.]])
    torch.float32




.. GENERATED FROM PYTHON SOURCE LINES 43-50

Above, we create a 5x3 matrix filled with zeros, and query its datatype
to find out that the zeros are 32-bit floating point numbers, which is
the default PyTorch.

What if you wanted integers instead? You can always override the
default:


.. GENERATED FROM PYTHON SOURCE LINES 50-55

.. code-block:: default


    i = torch.ones((5, 3), dtype=torch.int16)
    print(i)






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    tensor([[1, 1, 1],
            [1, 1, 1],
            [1, 1, 1],
            [1, 1, 1],
            [1, 1, 1]], dtype=torch.int16)




.. GENERATED FROM PYTHON SOURCE LINES 56-62

You can see that when we do change the default, the tensor helpfully
reports this when printed.

It’s common to initialize learning weights randomly, often with a
specific seed for the PRNG for reproducibility of results:


.. GENERATED FROM PYTHON SOURCE LINES 62-78

.. code-block:: default


    torch.manual_seed(1729)
    r1 = torch.rand(2, 2)
    print('A random tensor:')
    print(r1)

    r2 = torch.rand(2, 2)
    print('\nA different random tensor:')
    print(r2) # new values

    torch.manual_seed(1729)
    r3 = torch.rand(2, 2)
    print('\nShould match r1:')
    print(r3) # repeats values of r1 because of re-seed






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    A random tensor:
    tensor([[0.3126, 0.3791],
            [0.3087, 0.0736]])

    A different random tensor:
    tensor([[0.4216, 0.0691],
            [0.2332, 0.4047]])

    Should match r1:
    tensor([[0.3126, 0.3791],
            [0.3087, 0.0736]])




.. GENERATED FROM PYTHON SOURCE LINES 79-83

PyTorch tensors perform arithmetic operations intuitively. Tensors of
similar shapes may be added, multiplied, etc. Operations with scalars
are distributed over the tensor:


.. GENERATED FROM PYTHON SOURCE LINES 83-100

.. code-block:: default


    ones = torch.ones(2, 3)
    print(ones)

    twos = torch.ones(2, 3) * 2 # every element is multiplied by 2
    print(twos)

    threes = ones + twos       # addition allowed because shapes are similar
    print(threes)              # tensors are added element-wise
    print(threes.shape)        # this has the same dimensions as input tensors

    r1 = torch.rand(2, 3)
    r2 = torch.rand(3, 2)
    # uncomment this line to get a runtime error
    # r3 = r1 + r2






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    tensor([[1., 1., 1.],
            [1., 1., 1.]])
    tensor([[2., 2., 2.],
            [2., 2., 2.]])
    tensor([[3., 3., 3.],
            [3., 3., 3.]])
    torch.Size([2, 3])




.. GENERATED FROM PYTHON SOURCE LINES 101-103

Here’s a small sample of the mathematical operations available:


.. GENERATED FROM PYTHON SOURCE LINES 103-129

.. code-block:: default


    r = (torch.rand(2, 2) - 0.5) * 2 # values between -1 and 1
    print('A random matrix, r:')
    print(r)

    # Common mathematical operations are supported:
    print('\nAbsolute value of r:')
    print(torch.abs(r))

    # ...as are trigonometric functions:
    print('\nInverse sine of r:')
    print(torch.asin(r))

    # ...and linear algebra operations like determinant and singular value decomposition
    print('\nDeterminant of r:')
    print(torch.det(r))
    print('\nSingular value decomposition of r:')
    print(torch.svd(r))

    # ...and statistical and aggregate operations:
    print('\nAverage and standard deviation of r:')
    print(torch.std_mean(r))
    print('\nMaximum value of r:')
    print(torch.max(r))






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    A random matrix, r:
    tensor([[ 0.9956, -0.2232],
            [ 0.3858, -0.6593]])

    Absolute value of r:
    tensor([[0.9956, 0.2232],
            [0.3858, 0.6593]])

    Inverse sine of r:
    tensor([[ 1.4775, -0.2251],
            [ 0.3961, -0.7199]])

    Determinant of r:
    tensor(-0.5703)

    Singular value decomposition of r:
    torch.return_types.svd(
    U=tensor([[-0.8353, -0.5497],
            [-0.5497,  0.8353]]),
    S=tensor([1.1793, 0.4836]),
    V=tensor([[-0.8851, -0.4654],
            [ 0.4654, -0.8851]]))

    Average and standard deviation of r:
    (tensor(0.7217), tensor(0.1247))

    Maximum value of r:
    tensor(0.9956)




.. GENERATED FROM PYTHON SOURCE LINES 130-141

There’s a good deal more to know about the power of PyTorch tensors,
including how to set them up for parallel computations on GPU - we’ll be
going into more depth in another video.

PyTorch Models
--------------

Follow along with the video beginning at `10:00 <https://www.youtube.com/watch?v=IC0_FRiX-sw&t=600s>`__.

Let’s talk about how we can express models in PyTorch


.. GENERATED FROM PYTHON SOURCE LINES 141-147

.. code-block:: default


    import torch                     # for all things PyTorch
    import torch.nn as nn            # for torch.nn.Module, the parent object for PyTorch models
    import torch.nn.functional as F  # for the activation function









.. GENERATED FROM PYTHON SOURCE LINES 148-174

.. figure:: /_static/img/mnist.png
   :alt: le-net-5 diagram

*Figure: LeNet-5*

Above is a diagram of LeNet-5, one of the earliest convolutional neural
nets, and one of the drivers of the explosion in Deep Learning. It was
built to read small images of handwritten numbers (the MNIST dataset),
and correctly classify which digit was represented in the image.

Here’s the abridged version of how it works:

-  Layer C1 is a convolutional layer, meaning that it scans the input
   image for features it learned during training. It outputs a map of
   where it saw each of its learned features in the image. This
   “activation map” is downsampled in layer S2.
-  Layer C3 is another convolutional layer, this time scanning C1’s
   activation map for *combinations* of features. It also puts out an
   activation map describing the spatial locations of these feature
   combinations, which is downsampled in layer S4.
-  Finally, the fully-connected layers at the end, F5, F6, and OUTPUT,
   are a *classifier* that takes the final activation map, and
   classifies it into one of ten bins representing the 10 digits.

How do we express this simple neural network in code?


.. GENERATED FROM PYTHON SOURCE LINES 174-207

.. code-block:: default


    class LeNet(nn.Module):

        def __init__(self):
            super(LeNet, self).__init__()
            # 1 input image channel (black & white), 6 output channels, 3x3 square convolution
            # kernel
            self.conv1 = nn.Conv2d(1, 6, 3)
            self.conv2 = nn.Conv2d(6, 16, 3)
            # an affine operation: y = Wx + b
            self.fc1 = nn.Linear(16 * 6 * 6, 120)  # 6*6 from image dimension
            self.fc2 = nn.Linear(120, 84)
            self.fc3 = nn.Linear(84, 10)

        def forward(self, x):
            # Max pooling over a (2, 2) window
            x = F.max_pool2d(F.relu(self.conv1(x)), (2, 2))
            # If the size is a square you can only specify a single number
            x = F.max_pool2d(F.relu(self.conv2(x)), 2)
            x = x.view(-1, self.num_flat_features(x))
            x = F.relu(self.fc1(x))
            x = F.relu(self.fc2(x))
            x = self.fc3(x)
            return x

        def num_flat_features(self, x):
            size = x.size()[1:]  # all dimensions except the batch dimension
            num_features = 1
            for s in size:
                num_features *= s
            return num_features









.. GENERATED FROM PYTHON SOURCE LINES 208-228

Looking over this code, you should be able to spot some structural
similarities with the diagram above.

This demonstrates the structure of a typical PyTorch model: 

-  It inherits from ``torch.nn.Module`` - modules may be nested - in fact,
   even the ``Conv2d`` and ``Linear`` layer classes inherit from
   ``torch.nn.Module``.
-  A model will have an ``__init__()`` function, where it instantiates
   its layers, and loads any data artifacts it might
   need (e.g., an NLP model might load a vocabulary).
-  A model will have a ``forward()`` function. This is where the actual
   computation happens: An input is passed through the network layers
   and various functions to generate an output.
-  Other than that, you can build out your model class like any other
   Python class, adding whatever properties and methods you need to
   support your model’s computation.

Let’s instantiate this object and run a sample input through it.


.. GENERATED FROM PYTHON SOURCE LINES 228-242

.. code-block:: default


    net = LeNet()
    print(net)                         # what does the object tell us about itself?

    input = torch.rand(1, 1, 32, 32)   # stand-in for a 32x32 black & white image
    print('\nImage batch shape:')
    print(input.shape)

    output = net(input)                # we don't call forward() directly
    print('\nRaw output:')
    print(output)
    print(output.shape)






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    LeNet(
      (conv1): Conv2d(1, 6, kernel_size=(3, 3), stride=(1, 1))
      (conv2): Conv2d(6, 16, kernel_size=(3, 3), stride=(1, 1))
      (fc1): Linear(in_features=576, out_features=120, bias=True)
      (fc2): Linear(in_features=120, out_features=84, bias=True)
      (fc3): Linear(in_features=84, out_features=10, bias=True)
    )

    Image batch shape:
    torch.Size([1, 1, 32, 32])

    Raw output:
    tensor([[ 0.0639, -0.0646, -0.0593, -0.0054, -0.0212, -0.0529, -0.1144,  0.0339,
              0.0838,  0.0405]], grad_fn=<AddmmBackward0>)
    torch.Size([1, 10])




.. GENERATED FROM PYTHON SOURCE LINES 243-282

There are a few important things happening above:

First, we instantiate the ``LeNet`` class, and we print the ``net``
object. A subclass of ``torch.nn.Module`` will report the layers it has
created and their shapes and parameters. This can provide a handy
overview of a model if you want to get the gist of its processing.

Below that, we create a dummy input representing a 32x32 image with 1
color channel. Normally, you would load an image tile and convert it to
a tensor of this shape.

You may have noticed an extra dimension to our tensor - the *batch
dimension.* PyTorch models assume they are working on *batches* of data
- for example, a batch of 16 of our image tiles would have the shape
``(16, 1, 32, 32)``. Since we’re only using one image, we create a batch
of 1 with shape ``(1, 1, 32, 32)``.

We ask the model for an inference by calling it like a function:
``net(input)``. The output of this call represents the model’s
confidence that the input represents a particular digit. (Since this
instance of the model hasn’t learned anything yet, we shouldn’t expect
to see any signal in the output.) Looking at the shape of ``output``, we
can see that it also has a batch dimension, the size of which should
always match the input batch dimension. If we had passed in an input
batch of 16 instances, ``output`` would have a shape of ``(16, 10)``.

Datasets and Dataloaders
------------------------

Follow along with the video beginning at `14:00 <https://www.youtube.com/watch?v=IC0_FRiX-sw&t=840s>`__.

Below, we’re going to demonstrate using one of the ready-to-download,
open-access datasets from TorchVision, how to transform the images for
consumption by your model, and how to use the DataLoader to feed batches
of data to your model.

The first thing we need to do is transform our incoming images into a
PyTorch tensor.


.. GENERATED FROM PYTHON SOURCE LINES 282-294

.. code-block:: default


    #%matplotlib inline

    import torch
    import torchvision
    import torchvision.transforms as transforms

    transform = transforms.Compose(
        [transforms.ToTensor(),
         transforms.Normalize((0.5, 0.5, 0.5), (0.5, 0.5, 0.5))])









.. GENERATED FROM PYTHON SOURCE LINES 295-312

Here, we specify two transformations for our input:

-  ``transforms.ToTensor()`` converts images loaded by Pillow into 
   PyTorch tensors.
-  ``transforms.Normalize()`` adjusts the values of the tensor so
   that their average is zero and their standard deviation is 0.5. Most
   activation functions have their strongest gradients around x = 0, so
   centering our data there can speed learning.

There are many more transforms available, including cropping, centering,
rotation, and reflection.

Next, we’ll create an instance of the CIFAR10 dataset. This is a set of
32x32 color image tiles representing 10 classes of objects: 6 of animals
(bird, cat, deer, dog, frog, horse) and 4 of vehicles (airplane,
automobile, ship, truck):


.. GENERATED FROM PYTHON SOURCE LINES 312-317

.. code-block:: default


    trainset = torchvision.datasets.CIFAR10(root='./data', train=True,
                                            download=True, transform=transform)






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Downloading https://www.cs.toronto.edu/~kriz/cifar-10-python.tar.gz to ./data/cifar-10-python.tar.gz

      0%|          | 0/170498071 [00:00<?, ?it/s]
      0%|          | 360448/170498071 [00:00<01:45, 1612790.81it/s]
      1%|          | 1540096/170498071 [00:00<00:30, 5569813.79it/s]
      1%|1         | 2490368/170498071 [00:00<00:24, 6962669.72it/s]
      2%|1         | 3407872/170498071 [00:00<00:21, 7647425.46it/s]
      3%|2         | 4390912/170498071 [00:00<00:19, 8309727.59it/s]
      3%|3         | 5406720/170498071 [00:00<00:18, 8747647.34it/s]
      4%|3         | 6422528/170498071 [00:00<00:17, 9119109.75it/s]
      4%|4         | 7471104/170498071 [00:00<00:17, 9451811.92it/s]
      5%|5         | 8552448/170498071 [00:01<00:16, 9793371.93it/s]
      6%|5         | 9633792/170498071 [00:01<00:16, 9889484.63it/s]
      6%|6         | 10747904/170498071 [00:01<00:15, 10160365.26it/s]
      7%|6         | 11829248/170498071 [00:01<00:15, 10293391.60it/s]
      8%|7         | 12976128/170498071 [00:01<00:14, 10519950.99it/s]
      8%|8         | 14090240/170498071 [00:01<00:14, 10675142.07it/s]
      9%|8         | 15204352/170498071 [00:01<00:14, 10759579.76it/s]
     10%|9         | 16384000/170498071 [00:01<00:13, 11063289.08it/s]
     10%|#         | 17498112/170498071 [00:01<00:13, 11053163.99it/s]
     11%|#         | 18677760/170498071 [00:01<00:13, 11197835.87it/s]
     12%|#1        | 19824640/170498071 [00:02<00:13, 11204009.02it/s]
     12%|#2        | 21037056/170498071 [00:02<00:13, 11467563.66it/s]
     13%|#3        | 22249472/170498071 [00:02<00:12, 11567282.53it/s]
     14%|#3        | 23461888/170498071 [00:02<00:12, 11706121.17it/s]
     14%|#4        | 24707072/170498071 [00:02<00:12, 11721762.87it/s]
     15%|#5        | 25952256/170498071 [00:02<00:12, 11842888.51it/s]
     16%|#5        | 27197440/170498071 [00:02<00:12, 11872991.55it/s]
     17%|#6        | 28442624/170498071 [00:02<00:11, 12014484.78it/s]
     17%|#7        | 29753344/170498071 [00:02<00:11, 12142686.45it/s]
     18%|#8        | 31064064/170498071 [00:02<00:11, 12398792.23it/s]
     19%|#8        | 32342016/170498071 [00:03<00:11, 12499142.12it/s]
     20%|#9        | 33685504/170498071 [00:03<00:10, 12729079.73it/s]
     21%|##        | 35028992/170498071 [00:03<00:10, 12816087.71it/s]
     21%|##1       | 36405248/170498071 [00:03<00:10, 13011104.49it/s]
     22%|##2       | 37781504/170498071 [00:03<00:10, 13140706.53it/s]
     23%|##2       | 39190528/170498071 [00:03<00:09, 13311231.43it/s]
     24%|##3       | 40599552/170498071 [00:03<00:09, 13393813.06it/s]
     25%|##4       | 42008576/170498071 [00:03<00:09, 13585033.69it/s]
     25%|##5       | 43450368/170498071 [00:03<00:09, 13683340.17it/s]
     26%|##6       | 44924928/170498071 [00:04<00:09, 13941820.25it/s]
     27%|##7       | 46366720/170498071 [00:04<00:08, 13942515.99it/s]
     28%|##8       | 47841280/170498071 [00:04<00:08, 14166238.68it/s]
     29%|##8       | 49315840/170498071 [00:04<00:08, 14227780.64it/s]
     30%|##9       | 50790400/170498071 [00:04<00:08, 14338433.98it/s]
     31%|###       | 52330496/170498071 [00:04<00:08, 14491654.37it/s]
     32%|###1      | 53870592/170498071 [00:04<00:07, 14729474.21it/s]
     32%|###2      | 55410688/170498071 [00:04<00:07, 14780775.73it/s]
     33%|###3      | 56983552/170498071 [00:04<00:07, 15029509.03it/s]
     34%|###4      | 58556416/170498071 [00:04<00:07, 15084244.77it/s]
     35%|###5      | 60162048/170498071 [00:05<00:07, 15280738.03it/s]
     36%|###6      | 61800448/170498071 [00:05<00:07, 15473518.77it/s]
     37%|###7      | 63373312/170498071 [00:05<00:06, 15506793.16it/s]
     38%|###8      | 65044480/170498071 [00:05<00:06, 15851865.45it/s]
     39%|###9      | 66650112/170498071 [00:05<00:06, 15777826.93it/s]
     40%|####      | 68354048/170498071 [00:05<00:06, 16120804.99it/s]
     41%|####1     | 69992448/170498071 [00:05<00:06, 16018191.15it/s]
     42%|####2     | 71696384/170498071 [00:05<00:06, 16297589.73it/s]
     43%|####3     | 73334784/170498071 [00:05<00:05, 16220926.30it/s]
     44%|####4     | 75071488/170498071 [00:05<00:05, 16540272.50it/s]
     45%|####5     | 76808192/170498071 [00:06<00:05, 16595847.51it/s]
     46%|####6     | 78512128/170498071 [00:06<00:05, 16645316.77it/s]
     47%|####7     | 80314368/170498071 [00:06<00:05, 16868578.44it/s]
     48%|####8     | 82051072/170498071 [00:06<00:05, 16984627.10it/s]
     49%|####9     | 83820544/170498071 [00:06<00:05, 17094744.52it/s]
     50%|#####     | 85622784/170498071 [00:06<00:04, 17367060.25it/s]
     51%|#####1    | 87523328/170498071 [00:06<00:04, 17568843.53it/s]
     52%|#####2    | 89358336/170498071 [00:06<00:04, 17732175.25it/s]
     54%|#####3    | 91226112/170498071 [00:06<00:04, 17869037.67it/s]
     55%|#####4    | 93061120/170498071 [00:06<00:04, 17963779.28it/s]
     56%|#####5    | 94961664/170498071 [00:07<00:04, 18183940.77it/s]
     57%|#####6    | 96796672/170498071 [00:07<00:04, 18214132.56it/s]
     58%|#####7    | 98762752/170498071 [00:07<00:03, 18425405.09it/s]
     59%|#####9    | 100663296/170498071 [00:07<00:03, 18587703.13it/s]
     60%|######    | 102629376/170498071 [00:07<00:03, 18792994.27it/s]
     61%|######1   | 104529920/170498071 [00:07<00:03, 18792304.01it/s]
     63%|######2   | 106561536/170498071 [00:07<00:03, 19117849.79it/s]
     64%|######3   | 108494848/170498071 [00:07<00:03, 19033377.46it/s]
     65%|######4   | 110493696/170498071 [00:07<00:03, 19296786.30it/s]
     66%|######5   | 112459776/170498071 [00:07<00:03, 19202737.62it/s]
     67%|######7   | 114622464/170498071 [00:08<00:02, 19775599.60it/s]
     68%|######8   | 116621312/170498071 [00:08<00:02, 19653615.93it/s]
     70%|######9   | 118718464/170498071 [00:08<00:02, 19940003.53it/s]
     71%|#######   | 120717312/170498071 [00:08<00:02, 19817357.37it/s]
     72%|#######2  | 122781696/170498071 [00:08<00:02, 20013413.86it/s]
     73%|#######3  | 124813312/170498071 [00:08<00:02, 20044175.37it/s]
     74%|#######4  | 126844928/170498071 [00:08<00:02, 19819266.23it/s]
     76%|#######5  | 128909312/170498071 [00:08<00:02, 19982645.54it/s]
     77%|#######6  | 131039232/170498071 [00:08<00:01, 20159448.99it/s]
     78%|#######8  | 133070848/170498071 [00:09<00:01, 20197453.16it/s]
     79%|#######9  | 135200768/170498071 [00:09<00:01, 20471917.53it/s]
     81%|########  | 137330688/170498071 [00:09<00:01, 20555784.67it/s]
     82%|########1 | 139460608/170498071 [00:09<00:01, 20763990.77it/s]
     83%|########3 | 141623296/170498071 [00:09<00:01, 20794701.53it/s]
     84%|########4 | 143851520/170498071 [00:09<00:01, 20898781.02it/s]
     86%|########5 | 146046976/170498071 [00:09<00:01, 21173405.23it/s]
     87%|########6 | 148176896/170498071 [00:09<00:01, 21206067.42it/s]
     88%|########8 | 150437888/170498071 [00:09<00:00, 21573773.27it/s]
     90%|########9 | 152600576/170498071 [00:09<00:00, 21544444.09it/s]
     91%|######### | 154796032/170498071 [00:10<00:00, 21662712.36it/s]
     92%|#########2| 157089792/170498071 [00:10<00:00, 22000296.42it/s]
     93%|#########3| 159318016/170498071 [00:10<00:00, 21713340.50it/s]
     95%|#########4| 161579008/170498071 [00:10<00:00, 21838548.70it/s]
     96%|#########6| 163938304/170498071 [00:10<00:00, 22330879.29it/s]
     97%|#########7| 166199296/170498071 [00:10<00:00, 22227219.71it/s]
     99%|#########8| 168460288/170498071 [00:10<00:00, 22319872.07it/s]
    100%|##########| 170498071/170498071 [00:10<00:00, 15897696.53it/s]
    Extracting ./data/cifar-10-python.tar.gz to ./data




.. GENERATED FROM PYTHON SOURCE LINES 318-340

.. note::
     When you run the cell above, it may take a little time for the 
     dataset to download.

This is an example of creating a dataset object in PyTorch. Downloadable
datasets (like CIFAR-10 above) are subclasses of
``torch.utils.data.Dataset``. ``Dataset`` classes in PyTorch include the
downloadable datasets in TorchVision, Torchtext, and TorchAudio, as well
as utility dataset classes such as ``torchvision.datasets.ImageFolder``,
which will read a folder of labeled images. You can also create your own
subclasses of ``Dataset``.

When we instantiate our dataset, we need to tell it a few things:

-  The filesystem path to where we want the data to go. 
-  Whether or not we are using this set for training; most datasets
   will be split into training and test subsets.
-  Whether we would like to download the dataset if we haven’t already.
-  The transformations we want to apply to the data.

Once your dataset is ready, you can give it to the ``DataLoader``:


.. GENERATED FROM PYTHON SOURCE LINES 340-345

.. code-block:: default


    trainloader = torch.utils.data.DataLoader(trainset, batch_size=4,
                                              shuffle=True, num_workers=2)









.. GENERATED FROM PYTHON SOURCE LINES 346-357

A ``Dataset`` subclass wraps access to the data, and is specialized to
the type of data it’s serving. The ``DataLoader`` knows *nothing* about
the data, but organizes the input tensors served by the ``Dataset`` into
batches with the parameters you specify.

In the example above, we’ve asked a ``DataLoader`` to give us batches of
4 images from ``trainset``, randomizing their order (``shuffle=True``),
and we told it to spin up two workers to load data from disk.

It’s good practice to visualize the batches your ``DataLoader`` serves:


.. GENERATED FROM PYTHON SOURCE LINES 357-380

.. code-block:: default


    import matplotlib.pyplot as plt
    import numpy as np

    classes = ('plane', 'car', 'bird', 'cat',
               'deer', 'dog', 'frog', 'horse', 'ship', 'truck')

    def imshow(img):
        img = img / 2 + 0.5     # unnormalize
        npimg = img.numpy()
        plt.imshow(np.transpose(npimg, (1, 2, 0)))


    # get some random training images
    dataiter = iter(trainloader)
    images, labels = dataiter.next()

    # show images
    imshow(torchvision.utils.make_grid(images))
    # print labels
    print(' '.join('%5s' % classes[labels[j]] for j in range(4)))





.. image-sg:: /beginner/introyt/images/sphx_glr_introyt1_tutorial_001.png
   :alt: introyt1 tutorial
   :srcset: /beginner/introyt/images/sphx_glr_introyt1_tutorial_001.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

     ship truck   cat  bird




.. GENERATED FROM PYTHON SOURCE LINES 381-391

Running the above cell should show you a strip of four images, and the
correct label for each.

Training Your PyTorch Model
---------------------------

Follow along with the video beginning at `17:10 <https://www.youtube.com/watch?v=IC0_FRiX-sw&t=1030s>`__.

Let’s put all the pieces together, and train a model:


.. GENERATED FROM PYTHON SOURCE LINES 391-407

.. code-block:: default


    #%matplotlib inline

    import torch
    import torch.nn as nn
    import torch.nn.functional as F
    import torch.optim as optim

    import torchvision
    import torchvision.transforms as transforms

    import matplotlib
    import matplotlib.pyplot as plt
    import numpy as np









.. GENERATED FROM PYTHON SOURCE LINES 408-412

First, we’ll need training and test datasets. If you haven’t already,
run the cell below to make sure the dataset is downloaded. (It may take
a minute.)


.. GENERATED FROM PYTHON SOURCE LINES 412-431

.. code-block:: default


    transform = transforms.Compose(
        [transforms.ToTensor(),
         transforms.Normalize((0.5, 0.5, 0.5), (0.5, 0.5, 0.5))])

    trainset = torchvision.datasets.CIFAR10(root='./data', train=True,
                                            download=True, transform=transform)
    trainloader = torch.utils.data.DataLoader(trainset, batch_size=4,
                                              shuffle=True, num_workers=2)

    testset = torchvision.datasets.CIFAR10(root='./data', train=False,
                                           download=True, transform=transform)
    testloader = torch.utils.data.DataLoader(testset, batch_size=4,
                                             shuffle=False, num_workers=2)

    classes = ('plane', 'car', 'bird', 'cat',
               'deer', 'dog', 'frog', 'horse', 'ship', 'truck')






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Files already downloaded and verified
    Files already downloaded and verified




.. GENERATED FROM PYTHON SOURCE LINES 432-434

We’ll run our check on the output from ``DataLoader``:


.. GENERATED FROM PYTHON SOURCE LINES 434-457

.. code-block:: default


    import matplotlib.pyplot as plt
    import numpy as np

    # functions to show an image


    def imshow(img):
        img = img / 2 + 0.5     # unnormalize
        npimg = img.numpy()
        plt.imshow(np.transpose(npimg, (1, 2, 0)))


    # get some random training images
    dataiter = iter(trainloader)
    images, labels = dataiter.next()

    # show images
    imshow(torchvision.utils.make_grid(images))
    # print labels
    print(' '.join('%5s' % classes[labels[j]] for j in range(4)))





.. image-sg:: /beginner/introyt/images/sphx_glr_introyt1_tutorial_002.png
   :alt: introyt1 tutorial
   :srcset: /beginner/introyt/images/sphx_glr_introyt1_tutorial_002.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

     bird plane horse   car




.. GENERATED FROM PYTHON SOURCE LINES 458-462

This is the model we’ll train. If it looks familiar, that’s because it’s
a variant of LeNet - discussed earlier in this video - adapted for
3-color images.


.. GENERATED FROM PYTHON SOURCE LINES 462-486

.. code-block:: default


    class Net(nn.Module):
        def __init__(self):
            super(Net, self).__init__()
            self.conv1 = nn.Conv2d(3, 6, 5)
            self.pool = nn.MaxPool2d(2, 2)
            self.conv2 = nn.Conv2d(6, 16, 5)
            self.fc1 = nn.Linear(16 * 5 * 5, 120)
            self.fc2 = nn.Linear(120, 84)
            self.fc3 = nn.Linear(84, 10)

        def forward(self, x):
            x = self.pool(F.relu(self.conv1(x)))
            x = self.pool(F.relu(self.conv2(x)))
            x = x.view(-1, 16 * 5 * 5)
            x = F.relu(self.fc1(x))
            x = F.relu(self.fc2(x))
            x = self.fc3(x)
            return x


    net = Net()









.. GENERATED FROM PYTHON SOURCE LINES 487-489

The last ingredients we need are a loss function and an optimizer:


.. GENERATED FROM PYTHON SOURCE LINES 489-494

.. code-block:: default


    criterion = nn.CrossEntropyLoss()
    optimizer = optim.SGD(net.parameters(), lr=0.001, momentum=0.9)









.. GENERATED FROM PYTHON SOURCE LINES 495-509

The loss function, as discussed earlier in this video, is a measure of
how far from our ideal output the model’s prediction was. Cross-entropy
loss is a typical loss function for classification models like ours.

The **optimizer** is what drives the learning. Here we have created an
optimizer that implements *stochastic gradient descent,* one of the more
straightforward optimization algorithms. Besides parameters of the
algorithm, like the learning rate (``lr``) and momentum, we also pass in
``net.parameters()``, which is a collection of all the learning weights
in the model - which is what the optimizer adjusts.

Finally, all of this is assembled into the training loop. Go ahead and
run this cell, as it will likely take a few minutes to execute:


.. GENERATED FROM PYTHON SOURCE LINES 509-536

.. code-block:: default


    for epoch in range(2):  # loop over the dataset multiple times

        running_loss = 0.0
        for i, data in enumerate(trainloader, 0):
            # get the inputs
            inputs, labels = data

            # zero the parameter gradients
            optimizer.zero_grad()

            # forward + backward + optimize
            outputs = net(inputs)
            loss = criterion(outputs, labels)
            loss.backward()
            optimizer.step()

            # print statistics
            running_loss += loss.item()
            if i % 2000 == 1999:    # print every 2000 mini-batches
                print('[%d, %5d] loss: %.3f' %
                      (epoch + 1, i + 1, running_loss / 2000))
                running_loss = 0.0

    print('Finished Training')






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    [1,  2000] loss: 2.174
    [1,  4000] loss: 1.810
    [1,  6000] loss: 1.673
    [1,  8000] loss: 1.598
    [1, 10000] loss: 1.542
    [1, 12000] loss: 1.475
    [2,  2000] loss: 1.395
    [2,  4000] loss: 1.364
    [2,  6000] loss: 1.334
    [2,  8000] loss: 1.321
    [2, 10000] loss: 1.300
    [2, 12000] loss: 1.269
    Finished Training




.. GENERATED FROM PYTHON SOURCE LINES 537-593

Here, we are doing only **2 training epochs** (line 1) - that is, two
passes over the training dataset. Each pass has an inner loop that
**iterates over the training data** (line 4), serving batches of
transformed input images and their correct labels.

**Zeroing the gradients** (line 9) is an important step. Gradients are
accumulated over a batch; if we do not reset them for every batch, they
will keep accumulating, which will provide incorrect gradient values,
making learning impossible.

In line 12, we **ask the model for its predictions** on this batch. In
the following line (13), we compute the loss - the difference between
``outputs`` (the model prediction) and ``labels`` (the correct output).

In line 14, we do the ``backward()`` pass, and calculate the gradients
that will direct the learning.

In line 15, the optimizer performs one learning step - it uses the
gradients from the ``backward()`` call to nudge the learning weights in
the direction it thinks will reduce the loss.

The remainder of the loop does some light reporting on the epoch number,
how many training instances have been completed, and what the collected
loss is over the training loop.

**When you run the cell above,** you should see something like this:

::

   [1,  2000] loss: 2.235
   [1,  4000] loss: 1.940
   [1,  6000] loss: 1.713
   [1,  8000] loss: 1.573
   [1, 10000] loss: 1.507
   [1, 12000] loss: 1.442
   [2,  2000] loss: 1.378
   [2,  4000] loss: 1.364
   [2,  6000] loss: 1.349
   [2,  8000] loss: 1.319
   [2, 10000] loss: 1.284
   [2, 12000] loss: 1.267
   Finished Training

Note that the loss is monotonically descending, indicating that our
model is continuing to improve its performance on the training dataset.

As a final step, we should check that the model is actually doing
*general* learning, and not simply “memorizing” the dataset. This is
called **overfitting,** and usually indicates that the dataset is too
small (not enough examples for general learning), or that the model has
more learning parameters than it needs to correctly model the dataset.

This is the reason datasets are split into training and test subsets -
to test the generality of the model, we ask it to make predictions on
data it hasn’t trained on:


.. GENERATED FROM PYTHON SOURCE LINES 593-608

.. code-block:: default


    correct = 0
    total = 0
    with torch.no_grad():
        for data in testloader:
            images, labels = data
            outputs = net(images)
            _, predicted = torch.max(outputs.data, 1)
            total += labels.size(0)
            correct += (predicted == labels).sum().item()

    print('Accuracy of the network on the 10000 test images: %d %%' % (
        100 * correct / total))






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Accuracy of the network on the 10000 test images: 55 %




.. GENERATED FROM PYTHON SOURCE LINES 609-614

If you followed along, you should see that the model is roughly 50%
accurate at this point. That’s not exactly state-of-the-art, but it’s
far better than the 10% accuracy we’d expect from a random output. This
demonstrates that some general learning did happen in the model.



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 2 minutes  2.068 seconds)


.. _sphx_glr_download_beginner_introyt_introyt1_tutorial.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: introyt1_tutorial.py <introyt1_tutorial.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: introyt1_tutorial.ipynb <introyt1_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
