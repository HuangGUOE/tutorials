
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "advanced/numpy_extensions_tutorial.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation

.. GENERATED FROM PYTHON SOURCE LINES 19-23

.. code-block:: default


    import torch
    from torch.autograd import Function








.. GENERATED FROM PYTHON SOURCE LINES 24-33

Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**

.. GENERATED FROM PYTHON SOURCE LINES 33-57

.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)








.. GENERATED FROM PYTHON SOURCE LINES 58-59

**Example usage of the created layer:**

.. GENERATED FROM PYTHON SOURCE LINES 59-66

.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    tensor([[ 3.8723,  7.5696,  6.3255,  6.4789,  9.7098],
            [ 7.0667,  9.2601,  4.1573,  8.3392,  6.8371],
            [ 3.4618,  4.4885,  6.7349,  6.5475,  6.3390],
            [ 1.7529, 10.3319, 16.6733,  2.8947, 12.1279],
            [ 3.9092,  6.6722, 11.6736,  5.5289,  4.5174],
            [ 1.7529,  1.5486, 10.2496,  7.6836, 12.1279],
            [ 3.4618,  3.6895,  4.0694, 14.4217,  6.3390],
            [ 7.0667,  9.0921,  7.1301,  3.0668,  6.8371]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[ 1.8617,  0.2095,  1.3381, -0.8421, -0.3315,  0.2821, -0.8227,  0.5465],
            [ 0.5444,  0.2796, -0.2613,  1.2506, -0.1836,  0.7934, -2.3527, -0.3766],
            [-0.2225,  1.1888,  0.4083,  1.4333, -0.2248, -1.3509,  0.1941, -0.0746],
            [-0.5683, -0.2616,  1.6991, -1.9775,  0.4715, -0.3021, -0.1030, -0.0677],
            [ 0.0088, -0.4385, -0.5593, -0.3076,  0.0840,  0.6423, -1.1464,  0.2681],
            [-1.3198, -0.3476,  0.0705,  1.0727, -0.8554, -0.3677,  0.5002,  0.2526],
            [ 1.9599, -0.6909, -2.7235,  1.1893,  1.4147,  1.3277, -0.5916, -0.1395],
            [-0.8663,  0.5666,  1.1873,  1.8526, -0.5618,  0.1702, -0.9667,  1.0099]],
           requires_grad=True)




.. GENERATED FROM PYTHON SOURCE LINES 67-79

Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.

.. GENERATED FROM PYTHON SOURCE LINES 79-120

.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)









.. GENERATED FROM PYTHON SOURCE LINES 121-122

**Example usage:**

.. GENERATED FROM PYTHON SOURCE LINES 122-131

.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[-1.4785,  0.8064, -0.1961],
            [ 0.6165,  0.6303, -1.7891],
            [-1.1458,  1.6784,  0.4470]], requires_grad=True), Parameter containing:
    tensor([[-0.7789]], requires_grad=True)]
    Output from the convolution:  tensor([[ 2.3769, -2.4726, -7.4318, -2.1539,  6.4238,  3.0535, -5.9722,  5.1511],
            [-6.5122,  7.9049,  0.0303, -3.8509, -2.9221, -0.2786, -3.3304,  6.6541],
            [ 3.2285, -2.3022, -3.8372,  2.3906, -0.8231, -3.6416, -0.7276,  1.7476],
            [-6.5533,  5.2976, -1.3823,  0.6620, -0.6438,  1.1240, -2.4254, -3.6189],
            [ 5.0132, -2.9495, -6.8792,  2.9919, -2.0765, -3.8303,  0.9172,  5.6883],
            [ 1.0936, -0.5399, -1.2766,  1.8091, -1.8204, -0.5452, -5.4647,  1.2843],
            [ 0.3584, -5.8638, -2.9410, -1.2024,  2.1558, -3.3311,  0.4548, -1.2598],
            [-0.9447,  3.3735, -2.7102, -0.1124,  0.7909, -2.2351, -0.6541,  0.3479]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[ 0.3233, -0.9673,  0.1644, -0.3369, -0.0696,  3.3577,  1.1414,  0.1274,
             -0.3205,  0.1735],
            [-0.4520,  4.2638, -1.9692, -0.6632, -2.6744,  0.5708, -2.9486,  2.4332,
              2.7987,  1.6643],
            [-0.5706, -1.7542, -0.8777,  4.8624,  1.3961,  1.6079, -6.3619, -4.5967,
             -0.6172,  0.0544],
            [ 1.1989,  5.0920, -9.1540,  3.0487, -0.1517,  5.1447, -0.2379,  1.5699,
             -2.5508, -2.6986],
            [ 0.6894, -1.5742,  2.5284,  3.8027, -6.1667,  2.5267,  1.2437,  2.5342,
              0.7541,  2.3470],
            [ 1.9759, -2.4517, -0.6567,  0.8490, -0.9225,  1.9482, -3.8395,  5.0360,
             -3.2787,  0.1215],
            [-0.8145, -2.5321,  4.6172,  0.2686, -3.1806, -0.2146,  0.3944,  1.2120,
             -1.7434,  3.0018],
            [ 4.8946, -6.1887, -0.6581, -2.0217,  0.8202, -1.4457,  4.2297, -4.9178,
              0.5138,  0.9501],
            [-2.2849,  1.1061,  6.9023, -3.6774, -0.0919,  0.5697, -3.7004, -2.0281,
              4.0464, -5.4148],
            [ 2.1583, -5.0070,  1.1505,  1.1882, -0.4718,  1.2485,  5.5331, -7.0154,
              3.3940,  1.2162]])




.. GENERATED FROM PYTHON SOURCE LINES 132-133

**Check the gradients:**

.. GENERATED FROM PYTHON SOURCE LINES 133-141

.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Are the gradients correct:  True





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  1.144 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
