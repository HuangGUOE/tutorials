
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "advanced/numpy_extensions_tutorial.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation

.. GENERATED FROM PYTHON SOURCE LINES 19-23

.. code-block:: default


    import torch
    from torch.autograd import Function








.. GENERATED FROM PYTHON SOURCE LINES 24-33

Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**

.. GENERATED FROM PYTHON SOURCE LINES 33-57

.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)








.. GENERATED FROM PYTHON SOURCE LINES 58-59

**Example usage of the created layer:**

.. GENERATED FROM PYTHON SOURCE LINES 59-66

.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    tensor([[ 4.8503, 16.4556,  4.0164,  9.4803, 12.5040],
            [ 7.2191,  4.4744,  7.2014,  9.9522,  5.3032],
            [ 4.6983,  9.6065,  3.3524, 13.3089,  4.0991],
            [ 6.5556,  7.1262, 12.6982,  4.1964,  5.3531],
            [ 0.5652, 13.3166,  2.3346,  5.0255,  1.0612],
            [ 6.5556,  9.7976,  8.3551,  9.7458,  5.3531],
            [ 4.6983, 10.0587,  9.1492,  9.4130,  4.0991],
            [ 7.2191,  1.5433, 11.9184,  2.9072,  5.3032]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[ 0.0307,  0.1196, -0.7038,  0.3983,  1.9748, -2.7308,  0.9678, -0.4454],
            [ 1.3732, -0.2352, -0.3620, -0.8914, -0.9839,  1.4819,  2.7925,  1.3069],
            [ 0.9409,  0.3272,  1.9928, -0.4519, -0.6907, -0.3092, -0.3875,  0.2636],
            [ 0.7930, -0.8943,  0.2113, -0.0353,  0.4102, -1.6495,  0.4135,  2.1058],
            [ 0.2247,  0.5762, -1.0026, -1.2567,  0.2495,  0.1482,  0.4336,  0.0827],
            [-0.1367,  0.6576, -1.4236, -1.5428,  1.1562,  0.0494, -0.0908, -0.5728],
            [ 0.3241,  1.3991,  1.1936, -1.4317,  0.5094, -0.1653, -1.5946,  1.1562],
            [ 0.7952,  0.9667, -0.1319, -1.8800, -1.1068, -0.3487,  0.5050, -0.0253]],
           requires_grad=True)




.. GENERATED FROM PYTHON SOURCE LINES 67-79

Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.

.. GENERATED FROM PYTHON SOURCE LINES 79-120

.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)









.. GENERATED FROM PYTHON SOURCE LINES 121-122

**Example usage:**

.. GENERATED FROM PYTHON SOURCE LINES 122-131

.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[ 0.7791, -0.2932, -0.1598],
            [-0.1705,  0.5661,  0.5048],
            [-0.1254, -0.8149, -0.9541]], requires_grad=True), Parameter containing:
    tensor([[-0.0595]], requires_grad=True)]
    Output from the convolution:  tensor([[ 1.2554, -0.2410, -0.2740,  1.3459, -0.9969, -3.5935, -1.9099, -1.4373],
            [ 2.7018,  0.8656,  0.5196,  1.4026, -0.1963,  1.2716,  0.3281, -0.8770],
            [-0.3364,  1.2436, -2.3642, -1.5506, -0.7161, -0.4510,  0.6199,  0.3166],
            [-0.5239, -2.2982,  0.3507,  2.0981,  0.9939, -0.3819, -0.8536,  0.2547],
            [-2.7231, -0.2125, -0.6127,  0.3969, -0.2348,  0.4519,  3.9563, -0.2367],
            [ 1.2196, -2.6110, -2.0668, -2.0352, -0.0173, -0.0323, -4.1496, -0.6392],
            [ 0.0959,  0.7832, -1.8666, -0.1545, -0.4681, -0.8129,  3.4700,  0.0467],
            [ 0.4750,  0.2863,  1.4664,  1.9151, -1.2077,  1.6625, -1.1151, -1.3104]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[ 0.3324,  0.6440, -0.4955, -0.1339, -0.5025,  0.1861, -0.1694, -0.8853,
              0.4352,  0.2049],
            [-0.4519, -1.0410,  1.6220, -1.5417,  0.7803,  0.8056,  0.4371, -0.0594,
             -1.3177, -0.7506],
            [ 0.2157, -1.1216, -2.3076, -0.2782, -2.0723, -1.1217,  1.8635,  0.4461,
              2.7795,  1.7819],
            [-0.9780,  1.0644,  1.4346,  0.5077,  2.8940,  0.8304, -2.7079, -2.9477,
             -1.3829, -0.9649],
            [-0.0990, -0.9316, -0.3412,  1.4019, -1.7534, -0.3421,  0.5731, -2.2885,
             -0.9312,  0.4468],
            [-0.8605,  0.1344,  0.8036,  0.9706,  1.6586,  0.8481,  0.5751,  2.4923,
              2.5654,  1.5613],
            [ 1.1820, -1.5931, -0.5055, -1.1090, -0.9471, -0.2864,  2.0096,  1.7260,
              0.7774,  1.0527],
            [ 0.1950,  2.3661,  1.8611,  1.1057,  2.0238, -0.9545, -0.1079,  0.0187,
              2.8245,  1.6333],
            [-0.1921, -0.6615,  0.4512,  1.2927, -0.9190,  0.3705,  0.1528, -1.0585,
             -2.9530, -1.8475],
            [-0.0349, -0.2650, -0.4241,  0.4201,  1.4441,  0.4055, -0.1570,  1.3042,
              1.8004,  1.6699]])




.. GENERATED FROM PYTHON SOURCE LINES 132-133

**Check the gradients:**

.. GENERATED FROM PYTHON SOURCE LINES 133-141

.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Are the gradients correct:  True





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  1.114 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
