
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "advanced/numpy_extensions_tutorial.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation

.. GENERATED FROM PYTHON SOURCE LINES 19-23

.. code-block:: default


    import torch
    from torch.autograd import Function








.. GENERATED FROM PYTHON SOURCE LINES 24-33

Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**

.. GENERATED FROM PYTHON SOURCE LINES 33-57

.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)








.. GENERATED FROM PYTHON SOURCE LINES 58-59

**Example usage of the created layer:**

.. GENERATED FROM PYTHON SOURCE LINES 59-66

.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    tensor([[ 9.0221, 10.7120,  2.6156,  2.5279, 19.5192],
            [ 3.8901,  4.4272,  5.6908,  8.5179,  6.2283],
            [ 5.4920,  8.8975,  6.2964,  4.0729,  6.3041],
            [ 4.8986,  3.0616,  8.9957,  1.9033,  5.7406],
            [11.4979,  8.5716,  8.9201,  4.4783,  2.3028],
            [ 4.8986, 10.5440,  8.7645,  5.8473,  5.7406],
            [ 5.4920,  1.6071,  4.4351, 17.5070,  6.3041],
            [ 3.8901,  5.6633,  3.5813, 12.0909,  6.2283]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[ 1.5908, -0.7721,  0.4521, -0.1919,  0.5696,  0.2190, -0.5224,  0.2722],
            [ 0.1405,  0.6914,  0.0489,  1.0996,  0.3794,  0.5278,  1.2369, -1.4616],
            [ 0.3350,  0.4277, -2.2439, -0.8292,  2.6238, -0.5981,  1.1257,  2.1941],
            [-1.8654, -0.8054,  0.6085, -0.9791,  0.9212, -0.8100,  0.6294, -0.3742],
            [ 0.5589, -0.8935,  0.5295,  0.3049,  0.1673,  0.8672,  0.3764,  0.1139],
            [ 1.2796, -0.8952, -0.6610,  0.2511, -0.6799,  0.2591, -0.0899, -0.4380],
            [ 0.7760, -0.7398,  1.5738,  0.2877,  0.8105, -0.2139,  1.8624, -0.7737],
            [-1.1475, -1.3125,  0.9936,  0.3776,  0.8676,  0.1302,  1.0231, -1.1840]],
           requires_grad=True)




.. GENERATED FROM PYTHON SOURCE LINES 67-79

Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.

.. GENERATED FROM PYTHON SOURCE LINES 79-120

.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)









.. GENERATED FROM PYTHON SOURCE LINES 121-122

**Example usage:**

.. GENERATED FROM PYTHON SOURCE LINES 122-131

.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[-0.2440, -0.3456, -0.8886],
            [-1.4079,  0.3880, -0.8349],
            [-1.3048, -0.5437, -0.2201]], requires_grad=True), Parameter containing:
    tensor([[-1.9478]], requires_grad=True)]
    Output from the convolution:  tensor([[-1.1385,  0.5252, -0.7195, -1.9003, -0.1149, -0.1274, -2.6682,  1.2800],
            [-3.5060,  2.6229,  1.7087, -2.0897, -3.5078, -0.4278, -0.1771, -0.8803],
            [-0.3366, -1.9740,  1.9496, -3.7853, -4.0915, -1.1400, -1.1484, -1.2396],
            [ 4.2873,  1.7798, -0.7863, -2.0512, -8.4627, -2.6003, -3.1131, -3.1886],
            [-1.4953,  2.6198, -3.7037, -1.1077, -6.5547, -1.1790, -5.5281,  0.4483],
            [-0.0850,  1.3858, -2.8741, -2.4376, -5.7328,  2.5049, -4.8093,  2.4869],
            [ 0.2769,  4.1897, -4.9394, -3.7689, -0.5264,  3.2842,  0.5679,  3.6076],
            [-0.2513, -1.0729, -2.5296, -2.7129,  0.6076,  1.5260, -2.9409,  2.6669]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[-0.2035, -0.1865, -0.4625,  0.6125,  0.3843, -0.1486, -0.3756,  0.1834,
              1.3359, -0.2630],
            [-1.1278,  0.6486, -0.3319, -1.3013, -0.8662, -1.4871,  3.9172, -0.7256,
              2.5453, -0.0616],
            [-0.4213, -1.5836,  2.6793, -5.0260,  2.6758, -3.2075,  4.2358,  1.9758,
              1.6043, -1.0347],
            [ 2.6730, -3.7504,  0.8486, -3.9136, -2.4526,  6.4004,  1.6902, -1.1491,
              0.2231, -1.0437],
            [ 2.6900, -0.9212, -3.4840,  4.7581, -3.5701,  1.6801,  0.2385, -0.8159,
             -1.6159, -0.1401],
            [-0.2676,  1.2874, -3.8947,  2.9500,  1.5926, -0.3235, -2.8642, -1.2369,
             -0.5088, -0.1424],
            [-1.5782,  1.4553, -0.3059,  1.2270, -1.7316, -0.0762, -0.7024, -1.0388,
              0.1140,  0.8543],
            [-1.6396,  1.3938, -2.9406,  0.3261, -1.4080, -1.8915,  0.5462,  0.1241,
             -0.9681,  0.2509],
            [-2.1844,  0.6100, -3.5031,  0.8658, -0.5450, -1.0128, -0.3987, -0.3642,
              1.2389, -0.3864],
            [-1.4367, -1.5179, -2.9676, -0.2208,  0.1927,  0.0934,  0.5679, -0.8008,
             -0.3264, -0.1726]])




.. GENERATED FROM PYTHON SOURCE LINES 132-133

**Check the gradients:**

.. GENERATED FROM PYTHON SOURCE LINES 133-141

.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Are the gradients correct:  True





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.968 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
