
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "advanced/numpy_extensions_tutorial.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation

.. GENERATED FROM PYTHON SOURCE LINES 19-23

.. code-block:: default


    import torch
    from torch.autograd import Function








.. GENERATED FROM PYTHON SOURCE LINES 24-33

Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**

.. GENERATED FROM PYTHON SOURCE LINES 33-57

.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)








.. GENERATED FROM PYTHON SOURCE LINES 58-59

**Example usage of the created layer:**

.. GENERATED FROM PYTHON SOURCE LINES 59-66

.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    tensor([[ 3.8008,  6.3115,  9.0780,  7.6671,  4.7320],
            [ 7.1354,  9.0794,  7.6635, 15.7775,  7.7245],
            [ 4.1486,  6.6472, 16.7140,  3.4131,  4.1800],
            [ 8.5378,  3.8698,  6.2746,  2.3970,  2.9825],
            [ 3.3525,  3.3840,  4.4970,  4.6235,  0.1856],
            [ 8.5378, 12.0991,  5.7982,  5.3085,  2.9825],
            [ 4.1486, 12.7805,  3.8195,  3.3540,  4.1800],
            [ 7.1354, 13.4722,  4.8745,  9.9589,  7.7245]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[-1.5283e-01, -5.6735e-01, -2.0115e+00, -1.1779e-01, -1.5473e-01,
              7.5391e-01,  4.3497e-01,  5.4760e-01],
            [ 2.2588e+00,  5.1669e-01, -4.0445e-01,  1.0947e+00,  1.3421e-01,
              6.5237e-01, -1.6812e+00,  1.0830e+00],
            [ 1.5101e-01, -1.7100e+00,  6.4640e-01,  2.4675e+00,  1.1043e-01,
             -3.3851e-01, -1.2223e+00,  9.8542e-01],
            [-3.7353e-01, -1.5427e+00,  7.9966e-01, -2.0146e+00, -1.3795e-01,
              7.9745e-01, -8.0163e-01,  5.8734e-01],
            [ 1.0555e+00,  6.6425e-01,  1.1768e+00, -1.3681e-01, -3.0002e-01,
              1.4319e-01, -1.1086e+00, -4.3036e-01],
            [-1.0438e+00, -1.1386e+00, -4.8778e-01,  9.9660e-01,  5.7686e-01,
             -8.7936e-01, -7.9478e-01, -5.9926e-01],
            [-1.7772e-03, -6.7126e-01, -1.1211e+00,  2.6989e-01, -2.3914e-01,
             -6.1606e-01,  1.4881e+00, -2.1913e-01],
            [-2.6807e-01, -4.0728e-01, -1.7538e+00, -7.9557e-01, -9.2286e-01,
              1.0235e+00,  1.8826e+00,  6.6789e-02]], requires_grad=True)




.. GENERATED FROM PYTHON SOURCE LINES 67-79

Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.

.. GENERATED FROM PYTHON SOURCE LINES 79-120

.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)









.. GENERATED FROM PYTHON SOURCE LINES 121-122

**Example usage:**

.. GENERATED FROM PYTHON SOURCE LINES 122-131

.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[-0.1854, -0.2806, -2.2745],
            [-0.7516, -0.4222, -0.5301],
            [-0.8482,  0.5230, -1.2403]], requires_grad=True), Parameter containing:
    tensor([[-0.5981]], requires_grad=True)]
    Output from the convolution:  tensor([[ 7.8249e+00, -1.5591e+00,  5.9156e+00,  8.0443e-01,  4.3365e+00,
              3.0135e+00,  2.9949e+00,  3.2302e+00],
            [-3.9406e-01,  8.7239e+00,  9.0098e-01,  1.8968e+00,  4.3817e+00,
              1.7858e+00,  3.2104e+00,  1.5999e-01],
            [ 7.9046e+00, -1.8390e+00,  5.0510e+00,  9.4854e-01, -1.9511e+00,
             -1.1836e+00, -2.4560e+00,  5.1100e+00],
            [-2.6236e+00,  1.3918e+00,  3.0285e+00, -5.0723e+00, -2.2261e-03,
             -5.1990e+00, -3.0717e+00, -3.9196e+00],
            [ 2.5725e+00, -8.6926e-01, -1.5257e+00, -1.9902e+00, -3.5973e-01,
             -2.4295e+00, -4.2492e+00,  1.6337e+00],
            [-4.6910e+00, -1.5515e+00,  2.1841e+00,  1.9405e+00,  2.6667e-01,
             -1.4052e+00,  1.2376e+00, -8.7828e+00],
            [-7.3211e+00,  1.2651e+00, -6.7158e+00,  8.3976e-01, -8.5673e-01,
              1.4987e+00, -3.7697e-01, -5.0686e+00],
            [-6.9498e+00,  3.8104e+00, -5.5675e+00,  2.2228e+00, -4.7371e+00,
             -5.7693e+00,  3.2044e+00,  2.8388e-01]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[ 0.2004,  0.1923,  2.3278, -1.6406, -0.1497, -4.1299, -1.0913,  1.0673,
             -0.3116,  0.7477],
            [ 0.5105, -0.0734, -2.4627,  3.1896,  1.6170, -2.4255,  5.3858,  1.1002,
              3.9867,  1.0697],
            [-0.0949, -0.2233,  5.0197, -4.7136,  6.3691,  4.0577,  4.3722, -0.2480,
              1.9576,  4.5375],
            [-0.5771,  1.7737, -1.8870,  3.0846,  6.4781, -5.7961,  5.5537,  1.2336,
              4.7699,  3.2023],
            [ 1.2328, -0.8859, 10.2072,  0.8223,  3.2273, -1.0017,  1.5544,  5.8120,
              0.8718,  1.6109],
            [ 1.9534,  2.9231,  5.3109,  0.6821,  6.1729,  0.5470,  5.3476, -1.1735,
              2.3179, -1.4642],
            [ 2.8649, -0.2336,  2.5214,  0.9109,  3.0230,  2.2734, -0.8337, -0.5231,
              2.3852, -1.5243],
            [-0.1114, -1.1269,  1.9521,  2.2532,  2.7064, -2.1496,  3.7641, -0.9755,
              4.0643,  0.3328],
            [-1.2612,  1.2316, -1.5481, -0.0275, -0.7935, -0.2656,  2.1168, -0.3085,
              1.8307,  0.1200],
            [-0.0837,  1.0831, -1.0949,  1.4416, -0.5414,  0.3818, -0.0105,  1.1299,
              0.6544,  0.9054]])




.. GENERATED FROM PYTHON SOURCE LINES 132-133

**Check the gradients:**

.. GENERATED FROM PYTHON SOURCE LINES 133-141

.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Are the gradients correct:  True





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  1.066 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
