
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "advanced/numpy_extensions_tutorial.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation

.. GENERATED FROM PYTHON SOURCE LINES 19-23

.. code-block:: default


    import torch
    from torch.autograd import Function








.. GENERATED FROM PYTHON SOURCE LINES 24-33

Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**

.. GENERATED FROM PYTHON SOURCE LINES 33-57

.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)








.. GENERATED FROM PYTHON SOURCE LINES 58-59

**Example usage of the created layer:**

.. GENERATED FROM PYTHON SOURCE LINES 59-66

.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    tensor([[ 8.4983, 12.9769,  7.7168,  9.3864,  3.6517],
            [11.7322,  8.8189,  3.8495,  4.6988,  3.8707],
            [ 6.2577,  5.9882,  5.2846,  4.1934, 12.6817],
            [16.8021, 21.7190, 12.8089,  4.6509,  4.4508],
            [14.8053, 13.6204,  6.9194,  8.4839,  3.4607],
            [16.8021,  9.1446,  5.3148,  7.0604,  4.4508],
            [ 6.2577,  8.4995,  5.0087,  5.4737, 12.6817],
            [11.7322,  9.4839,  9.0712,  3.0693,  3.8707]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[-0.9322, -0.4452, -2.1573, -1.0619,  0.4813, -1.5978,  0.4071,  0.5809],
            [-0.9093, -0.7610, -0.4085, -0.5346, -0.8917, -0.3699, -1.2207, -0.7149],
            [-0.6586,  3.1710,  2.2742,  0.8278, -0.6163, -1.2620, -1.0730, -0.9013],
            [ 0.1112, -2.0459, -1.9368, -1.2114,  0.7055, -2.0920, -0.0808, -0.9674],
            [ 1.0516,  0.9987,  2.0277,  2.3276,  0.1238, -2.4560,  0.0090, -0.3190],
            [ 0.8525,  0.5626, -1.1806, -0.0072, -0.6465, -0.5243, -1.3437,  0.4431],
            [-0.3756, -0.2371, -0.1362,  1.7497,  1.6679,  0.0856, -0.4687,  0.0681],
            [ 1.9502,  0.9854,  0.4260, -0.0784, -0.5495,  0.0780,  1.0749, -0.3661]],
           requires_grad=True)




.. GENERATED FROM PYTHON SOURCE LINES 67-79

Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.

.. GENERATED FROM PYTHON SOURCE LINES 79-120

.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)









.. GENERATED FROM PYTHON SOURCE LINES 121-122

**Example usage:**

.. GENERATED FROM PYTHON SOURCE LINES 122-131

.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[-0.2984,  0.2652,  0.9103],
            [-2.3252,  0.8188,  0.0626],
            [-0.1143, -0.7290,  0.4276]], requires_grad=True), Parameter containing:
    tensor([[-1.0949]], requires_grad=True)]
    Output from the convolution:  tensor([[ 3.8230, -0.8576, -2.8663,  4.6041, -4.8946, -4.5090, -2.6560,  1.6050],
            [-1.4526, -0.7338,  0.6344, -2.8293,  4.0495, -5.1443, -0.7451, -2.7536],
            [ 0.4347, -1.6649, -6.8862,  0.1318,  1.4737, -1.2092,  1.2758, -1.5095],
            [-2.4362,  2.3600, -3.0394, -7.2778,  5.2816,  2.3576,  1.0820, -2.4711],
            [-0.4643, -4.0244, -4.0136, -3.9553,  1.9653,  1.9452, -3.0348,  2.1316],
            [-2.6092, -3.5224, -1.4603, -0.9555, -4.5614,  2.8761, -0.3814, -2.7163],
            [-1.2175, -1.5306, -2.7088, -2.9447,  0.7592, -1.6377, -3.7101,  0.2503],
            [ 0.1043, -2.8116, -1.0859,  0.6148,  0.7899,  0.8563, -1.6561, -3.4450]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[ 0.3992,  0.1785, -1.7610, -1.8248,  0.4639,  0.9557,  0.0236, -1.3822,
             -0.2235,  1.8482],
            [ 3.5416,  2.5275, -3.4194, -1.8024,  1.4253,  3.8785,  1.5280, -8.0179,
              2.1245,  0.5345],
            [ 2.7750, -0.2986,  1.6602, -4.2413, -0.8837,  7.5313, -3.3929, -1.7244,
             -2.7678, -0.3216],
            [-5.5995,  4.9472, -3.5199,  0.8304, -0.8389,  3.2596,  5.6568, -0.5093,
             -3.1153, -0.3645],
            [ 0.1322, -0.1965,  0.3694, -1.2349, -1.3154,  4.0060,  5.1918,  0.1909,
             -1.4479, -0.9119],
            [ 4.9927, -3.7960, -3.9319,  0.9599, -0.2709, -1.9214,  5.5414,  1.8064,
             -0.2773, -1.3383],
            [ 5.3226, -1.6354, -2.9704, -1.7398, -2.0721, -0.4219,  0.1237,  4.9947,
             -2.7334, -0.2809],
            [ 1.0077,  4.1553, -0.0323, -2.3160, -2.5080, -1.7821,  5.0966, -0.5093,
             -0.6656, -1.7598],
            [ 1.7673, -1.0775,  0.8550,  3.4289, -3.9568, -2.2663,  4.7110,  3.3221,
             -1.8243, -0.1141],
            [ 0.0856,  0.5071, -0.5874,  0.1566,  0.9034, -1.1781, -0.1660,  1.6760,
              0.3294, -0.5829]])




.. GENERATED FROM PYTHON SOURCE LINES 132-133

**Check the gradients:**

.. GENERATED FROM PYTHON SOURCE LINES 133-141

.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Are the gradients correct:  True





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  1.030 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
