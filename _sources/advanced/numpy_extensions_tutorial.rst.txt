
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "advanced/numpy_extensions_tutorial.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation

.. GENERATED FROM PYTHON SOURCE LINES 19-23

.. code-block:: default


    import torch
    from torch.autograd import Function








.. GENERATED FROM PYTHON SOURCE LINES 24-33

Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**

.. GENERATED FROM PYTHON SOURCE LINES 33-57

.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)








.. GENERATED FROM PYTHON SOURCE LINES 58-59

**Example usage of the created layer:**

.. GENERATED FROM PYTHON SOURCE LINES 59-66

.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    tensor([[16.3472,  0.4970,  7.2709,  6.5628, 19.1063],
            [ 2.7379,  9.3845,  8.4549, 11.2903,  7.0842],
            [ 1.8747,  6.5869,  0.9267,  5.1657,  9.0165],
            [10.6483, 10.2473,  4.2181,  7.8938,  8.8119],
            [ 5.8416, 17.8464,  8.0929,  2.2047,  1.8228],
            [10.6483,  4.0711,  3.7126, 12.6075,  8.8119],
            [ 1.8747,  4.3937,  2.9021, 11.4684,  9.0165],
            [ 2.7379,  2.6246,  9.7349,  7.6125,  7.0842]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[-0.2107, -1.5684, -0.0478, -0.2819, -0.2411,  0.7197,  0.4826,  0.1209],
            [ 1.3858,  0.5843,  1.7696,  2.3671,  0.2262, -1.0602,  0.4961, -0.6892],
            [ 1.2519, -0.0430,  0.5460, -2.5347,  2.6217, -0.2397,  1.2882, -0.1251],
            [ 0.9549,  1.0310,  0.6103,  0.1685, -0.5352, -0.7007, -0.5061, -1.0126],
            [ 2.0449,  1.4783, -2.1900, -0.1152, -0.2902,  1.1328,  1.9601, -1.0365],
            [ 0.5223, -0.0807,  0.4610, -0.6223,  1.2438, -0.0670,  0.0090, -0.3418],
            [-0.1684, -0.9332,  0.4001,  0.1439,  0.4949,  1.5950, -0.0834, -0.9188],
            [ 1.4381, -0.2434,  1.7056,  0.2486,  0.1950,  0.6936, -0.1085,  0.9511]],
           requires_grad=True)




.. GENERATED FROM PYTHON SOURCE LINES 67-79

Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.

.. GENERATED FROM PYTHON SOURCE LINES 79-120

.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)









.. GENERATED FROM PYTHON SOURCE LINES 121-122

**Example usage:**

.. GENERATED FROM PYTHON SOURCE LINES 122-131

.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[ 0.6370,  0.1839, -1.1931],
            [-0.7996, -0.6685, -1.5219],
            [-0.9398, -1.1994, -1.1758]], requires_grad=True), Parameter containing:
    tensor([[-1.7206]], requires_grad=True)]
    Output from the convolution:  tensor([[-4.3612, -3.0768,  2.2252, -0.0203, -4.6039, -3.1441, -7.6370, -3.1662],
            [-3.0310,  2.9206,  2.7158,  3.6725, -0.3516, -0.4119, -7.7371, -1.6596],
            [-0.3855,  3.0309,  1.0012,  2.3675,  1.0257, -1.7918, -5.7396, -0.6671],
            [-1.4784, -1.6517, -0.4849, -0.5316, -0.6226,  2.4588, -0.3785,  0.9848],
            [ 0.2630,  1.7277, -0.1429, -0.4871, -2.3081,  1.9959, -0.1960, -1.8729],
            [ 1.3076,  2.8141, -0.0486, -2.5132, -1.3041,  0.3934, -2.5867, -4.4051],
            [-0.3730, -3.3488, -4.8021, -3.5390, -1.1396,  1.9036, -2.1711, -0.6318],
            [-3.2306, -3.9428, -4.0252, -3.5727, -0.6832,  2.7299, -1.8111,  2.6450]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[-0.3631, -0.3150,  0.3667,  1.2051, -0.1154, -1.3270,  2.4308, -0.3617,
             -1.1350, -0.9612],
            [ 0.8749,  2.5791,  0.1987, -3.9573,  2.9896, -1.2805, -0.5569, -3.3711,
             -1.2058, -2.4681],
            [-0.6309, -2.0368,  0.8224, -4.1631,  1.3911, -3.4046, -2.6579, -0.4637,
             -0.3703, -4.2369],
            [-0.3800, -2.8187, -0.3989, -0.4222,  2.4938,  1.8910,  1.8006,  2.2286,
              1.8299, -3.0408],
            [ 1.8969,  2.3969,  2.6578,  0.3513,  2.9827,  3.3680,  5.8906,  6.0083,
              3.5139, -1.2027],
            [ 0.3525,  0.3720,  1.4581,  0.5171,  3.5935,  2.1428,  1.2164,  5.2372,
              4.3276,  0.2859],
            [-0.2411,  0.8927,  0.4498, -1.0866,  0.5746, -1.0195,  1.1427,  3.0130,
              2.7028,  1.6787],
            [ 0.7596, -1.9461, -1.4667, -2.8746, -0.3231, -4.1636,  0.4358,  0.7218,
              2.0858,  2.6433],
            [-0.2926, -1.7715, -2.1142, -2.7728, -0.5678, -3.2415,  0.5609,  0.7791,
              2.6505,  2.3486],
            [-0.5316,  0.1844,  0.8587,  0.8722, -0.6644, -2.4392, -2.1380, -1.5242,
              0.0848,  0.4607]])




.. GENERATED FROM PYTHON SOURCE LINES 132-133

**Check the gradients:**

.. GENERATED FROM PYTHON SOURCE LINES 133-141

.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Are the gradients correct:  True





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  1.024 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
