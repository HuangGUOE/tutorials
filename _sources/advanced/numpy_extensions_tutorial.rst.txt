
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "advanced/numpy_extensions_tutorial.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation

.. GENERATED FROM PYTHON SOURCE LINES 19-23

.. code-block:: default


    import torch
    from torch.autograd import Function








.. GENERATED FROM PYTHON SOURCE LINES 24-33

Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**

.. GENERATED FROM PYTHON SOURCE LINES 33-57

.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)








.. GENERATED FROM PYTHON SOURCE LINES 58-59

**Example usage of the created layer:**

.. GENERATED FROM PYTHON SOURCE LINES 59-66

.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    tensor([[ 8.2235,  3.1483,  2.5956,  3.8811,  0.4048],
            [ 9.7908,  4.8688,  4.1890,  5.1274, 10.6732],
            [ 5.9605,  8.2037,  5.6769,  3.3037,  4.3158],
            [ 7.9267,  4.2170,  4.9697,  4.1637,  6.5180],
            [ 1.0884,  1.5072,  2.6421,  1.8066,  2.2637],
            [ 7.9267,  3.7157,  6.4084,  4.0862,  6.5180],
            [ 5.9605,  5.3641,  4.7842,  7.9388,  4.3158],
            [ 9.7908,  5.5972,  2.6944,  6.9689, 10.6732]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[-0.5586, -0.9061, -1.0663, -0.0475, -0.9586,  0.5138, -1.7765, -0.7435],
            [ 0.5871,  0.4863,  0.0329,  0.5809, -0.9820,  0.3365, -0.4397,  1.3764],
            [ 0.7101,  0.0390,  0.6844, -0.4021,  0.9122,  0.0656, -0.1930,  0.0167],
            [-0.0603, -0.1642,  0.8530,  0.6000,  0.1094,  0.4920, -0.7682, -0.7312],
            [ 0.8489, -0.3591,  0.7575, -0.3068, -0.4328, -0.2024, -0.1769,  0.1492],
            [ 0.6477, -0.7495, -0.8646, -0.6091,  0.5933, -1.4270, -0.2691, -0.5820],
            [-1.1841, -0.2693, -0.4650,  0.4025,  0.2626, -0.3578,  0.9750, -0.5872],
            [-1.8900, -0.6566,  0.3139, -0.2469, -0.1038, -0.2133, -0.0082,  0.1887]],
           requires_grad=True)




.. GENERATED FROM PYTHON SOURCE LINES 67-79

Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.

.. GENERATED FROM PYTHON SOURCE LINES 79-120

.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)









.. GENERATED FROM PYTHON SOURCE LINES 121-122

**Example usage:**

.. GENERATED FROM PYTHON SOURCE LINES 122-131

.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[ 0.7114,  0.3960,  1.3606],
            [ 0.8815, -0.7247,  0.5353],
            [ 1.4308, -0.8927, -1.0819]], requires_grad=True), Parameter containing:
    tensor([[1.9359]], requires_grad=True)]
    Output from the convolution:  tensor([[ 4.4747, -1.1155,  1.2175,  3.7985,  4.5129,  1.6783, -1.6899,  2.9078],
            [ 3.5225,  3.8467,  0.1059,  3.9548,  7.3199,  2.7393, -1.5004,  5.1729],
            [ 3.2579,  4.3939,  0.2153,  0.1319, -0.6428,  7.0480, -1.3873,  7.1653],
            [ 3.5522,  6.1017, -0.5856,  5.9358, -4.4668,  5.8300, -2.7762,  2.4318],
            [-1.1014,  6.2964, -4.3638,  5.0125,  0.0218,  5.1080,  4.0584, -3.1672],
            [-0.3674,  6.3042,  2.0094,  1.1036,  2.0721, -0.0208,  6.9920,  1.8996],
            [-0.3411,  5.2757,  3.5993, -2.0850,  8.3627, -0.9287,  5.6545,  3.2959],
            [-0.3983,  3.2517,  3.4681, -2.6925,  6.7153, -0.5987,  6.4033,  5.2652]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[-0.4871, -0.4665, -0.2545, -0.9551,  0.8187, -1.8934,  0.5115,  0.8708,
              1.4282,  0.5139],
            [ 0.0710,  0.6915,  2.1920, -1.1790,  1.3534,  1.6754, -0.2679,  2.0943,
              0.6090,  1.3722],
            [ 0.6999,  0.1897,  4.5753, -1.4181, -1.5716,  5.0732,  1.0619,  1.4316,
             -1.7589,  1.0831],
            [ 1.6549, -2.1867, -1.2850,  2.4999,  0.0735,  1.8095,  0.0751, -0.2007,
             -2.3446, -1.3420],
            [ 0.4036, -1.1373, -1.9189, -1.3067,  1.3396,  0.5833, -0.9908,  4.0766,
             -0.8296,  0.5340],
            [-1.2994,  0.8289,  4.7020,  1.2410, -2.8713,  2.5267, -2.5749,  4.0970,
              0.2447,  0.7910],
            [-0.7498, -1.2870, -1.9340,  1.9830, -1.5563,  6.5003, -2.5489,  2.2638,
              0.3414, -0.1906],
            [ 0.3491,  1.0340, -3.1585,  3.1955, -1.1431,  2.3888,  0.2775, -1.9547,
             -1.2820,  0.9501],
            [-1.6041,  1.2133, -0.4890,  2.6193,  2.0756, -1.1632, -1.0970,  0.6094,
             -0.9635, -1.0668],
            [ 0.0964,  0.8392, -0.7289, -0.4186,  1.0334, -1.5844, -0.8196,  0.8695,
              0.3475, -0.0067]])




.. GENERATED FROM PYTHON SOURCE LINES 132-133

**Check the gradients:**

.. GENERATED FROM PYTHON SOURCE LINES 133-141

.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Are the gradients correct:  True





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  1.047 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
