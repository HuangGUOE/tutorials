
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "advanced/numpy_extensions_tutorial.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation

.. GENERATED FROM PYTHON SOURCE LINES 19-23

.. code-block:: default


    import torch
    from torch.autograd import Function








.. GENERATED FROM PYTHON SOURCE LINES 24-33

Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**

.. GENERATED FROM PYTHON SOURCE LINES 33-57

.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)








.. GENERATED FROM PYTHON SOURCE LINES 58-59

**Example usage of the created layer:**

.. GENERATED FROM PYTHON SOURCE LINES 59-66

.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    tensor([[ 7.5761,  7.9184,  9.7708,  4.7206,  4.6210],
            [ 3.2832,  6.3740, 12.8042,  3.9309,  2.2831],
            [ 5.7038, 10.3534,  0.5563,  8.6237,  7.0533],
            [ 4.5355,  4.5719,  9.4951,  6.9618,  7.0737],
            [ 8.2338,  3.4088,  6.5499, 11.2669,  2.8688],
            [ 4.5355, 13.3265,  4.6800,  8.8991,  7.0737],
            [ 5.7038,  5.7528,  8.7999,  2.7436,  7.0533],
            [ 3.2832, 10.9826,  4.2781, 14.4696,  2.2831]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[-6.0757e-01, -7.0220e-01,  1.6254e+00,  6.5062e-01, -5.6502e-01,
             -9.5423e-01, -1.2651e+00,  6.8101e-01],
            [ 1.6892e+00,  3.2904e-01,  8.7783e-02,  1.1354e+00,  5.2544e-01,
             -8.5345e-01, -5.0310e-01, -3.1177e-01],
            [ 8.0021e-01, -1.6646e+00, -5.9737e-01,  1.2444e-01, -2.5156e-01,
              7.3832e-01, -7.9776e-02,  2.1883e+00],
            [ 4.7977e-02,  1.1339e+00,  1.2662e-01,  2.0083e+00, -8.5461e-01,
             -4.9144e-01,  2.2880e+00, -4.0897e-01],
            [-7.4154e-01, -8.7935e-01, -1.0853e+00,  1.0447e+00,  3.7531e-02,
             -8.6206e-01,  6.8611e-01, -7.5975e-02],
            [ 9.2208e-01,  5.6312e-01,  9.5016e-01,  1.4248e-01, -1.6751e+00,
             -2.4254e-01,  8.6536e-01,  4.6578e-01],
            [-1.6248e-01,  2.0503e+00,  1.4258e+00, -8.2405e-01,  3.5749e-01,
             -1.2407e+00, -1.7931e-01, -9.9289e-04],
            [-1.7819e+00,  1.3040e+00, -3.4613e-01,  7.1636e-01,  4.2956e-01,
              6.6571e-01, -6.9127e-01, -3.3104e-01]], requires_grad=True)




.. GENERATED FROM PYTHON SOURCE LINES 67-79

Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.

.. GENERATED FROM PYTHON SOURCE LINES 79-120

.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)









.. GENERATED FROM PYTHON SOURCE LINES 121-122

**Example usage:**

.. GENERATED FROM PYTHON SOURCE LINES 122-131

.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[-0.6039, -0.3857,  1.6606],
            [-0.1077,  0.4329,  0.3932],
            [-1.0202, -0.8445, -0.9222]], requires_grad=True), Parameter containing:
    tensor([[-0.4605]], requires_grad=True)]
    Output from the convolution:  tensor([[ 4.0776e+00,  6.2644e-01, -6.1416e-01, -3.7025e+00, -1.5557e+00,
             -1.0770e+00,  7.3006e-01,  2.9866e+00],
            [ 1.1751e+00,  1.6548e+00,  2.8223e-01,  2.8321e+00, -4.2220e+00,
             -5.3831e+00, -2.2974e+00,  2.0625e+00],
            [ 2.4363e+00, -7.8482e-01, -1.6063e-03, -2.0779e+00, -3.0876e+00,
             -2.8702e+00, -3.7376e+00,  1.8500e+00],
            [-5.0944e+00, -7.3606e-01,  5.3374e+00,  2.4174e+00,  2.5730e+00,
             -4.6070e-01, -2.8892e+00, -7.2605e-01],
            [ 1.5857e+00, -1.2821e+00, -1.6492e+00, -1.5855e+00, -3.3120e-01,
             -2.3914e+00, -1.5956e+00,  1.8492e+00],
            [ 8.8620e-01, -1.5020e+00, -6.0553e-01, -9.0770e-01, -2.3373e+00,
             -1.4363e+00, -3.1364e+00, -1.0216e+00],
            [ 1.9648e-01, -2.5554e-01, -5.5456e-01, -3.6805e+00, -2.3146e+00,
              6.1613e-01,  1.8430e-01,  7.9045e-01],
            [-1.2980e+00, -9.6848e-01,  3.0631e+00,  8.6521e-01,  3.1523e+00,
             -5.0051e-01,  2.2870e+00,  3.7954e-01]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[ 0.0833,  0.2550, -0.0169,  0.1031,  0.4463, -2.2854, -0.7187,  1.9855,
             -2.0134,  1.6759],
            [-0.0906,  0.0525,  0.1484, -0.8071, -1.0736,  0.4493,  3.3085, -2.4147,
             -2.4841,  2.6466],
            [ 1.1516, -0.1398, -3.3314,  5.0378,  1.2171, -0.0242,  2.6272, -2.6994,
             -0.4255,  0.4679],
            [ 0.3140,  0.1806, -0.1094, -1.0346, -0.9597, -0.9056,  2.9872,  1.4331,
             -0.3520, -6.6275],
            [ 1.9439, -0.0564, -2.2377, -4.8718,  0.8150, -3.5905, -2.5639,  2.0692,
             -0.7301, -2.6753],
            [ 0.6654,  1.7397,  0.3952,  4.0251,  1.1212,  0.9098,  5.0767,  5.9161,
              0.5847,  0.9027],
            [ 0.8368,  3.1502, -0.8011, -3.4506, -1.0185,  0.0569, -2.1206, -2.5363,
             -3.7167, -2.0289],
            [-0.2092, -0.5485,  0.0099, -1.1632,  1.2195,  2.3621,  1.6081,  2.6753,
              2.5235,  1.0623],
            [ 0.8620,  3.5871,  2.9653,  1.6181,  0.4412,  0.5497,  2.2056,  3.0948,
              2.7474,  1.2381],
            [-0.8589, -0.3578, -0.6589, -0.0579,  0.2018,  0.5422,  0.3266, -0.3484,
             -0.6004, -0.2443]])




.. GENERATED FROM PYTHON SOURCE LINES 132-133

**Check the gradients:**

.. GENERATED FROM PYTHON SOURCE LINES 133-141

.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Are the gradients correct:  True





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  1.078 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
