
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "advanced/numpy_extensions_tutorial.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation

.. GENERATED FROM PYTHON SOURCE LINES 19-23

.. code-block:: default


    import torch
    from torch.autograd import Function








.. GENERATED FROM PYTHON SOURCE LINES 24-33

Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**

.. GENERATED FROM PYTHON SOURCE LINES 33-57

.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)








.. GENERATED FROM PYTHON SOURCE LINES 58-59

**Example usage of the created layer:**

.. GENERATED FROM PYTHON SOURCE LINES 59-66

.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    tensor([[ 1.9059,  5.4792,  8.2251,  1.9719,  7.2699],
            [ 7.7690,  1.6631,  9.2083,  5.3162,  3.7217],
            [ 5.9732,  4.7874,  5.8345,  9.7327,  8.7266],
            [ 4.2369, 10.9682,  3.5827,  0.9149, 12.3707],
            [ 2.9401,  4.0036,  4.6772,  2.6755, 11.1235],
            [ 4.2369,  9.4412,  6.9298, 10.0457, 12.3707],
            [ 5.9732,  6.3221,  9.3387,  4.9536,  8.7266],
            [ 7.7690,  5.1234, 13.9234,  6.6640,  3.7217]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[ 1.1192, -0.5032, -0.0746,  0.1635, -0.6948, -1.8718, -0.4802, -0.2475],
            [-0.3033,  0.0612, -1.3336,  1.1575, -0.9594,  0.8737, -0.6652,  1.4541],
            [ 0.6427, -0.1700,  1.7164, -0.0912,  1.3962, -1.4022,  0.5121,  1.9055],
            [ 1.1449,  0.6678, -0.5789, -0.5421,  0.9252,  0.5554, -1.0526, -0.6939],
            [-0.0790,  1.6921, -1.0100, -0.9679,  0.3992,  1.3820,  0.0022, -0.5324],
            [ 0.0819,  1.2320,  1.5194, -0.2836, -0.6080, -0.0790, -1.9696,  0.2150],
            [-0.1638,  0.3551, -0.1101,  0.0045, -0.5610,  0.5986, -0.4395, -0.0672],
            [-0.4891, -0.0252, -1.9018,  0.5142,  0.7757,  0.0102,  0.5575, -0.7774]],
           requires_grad=True)




.. GENERATED FROM PYTHON SOURCE LINES 67-79

Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.

.. GENERATED FROM PYTHON SOURCE LINES 79-120

.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)









.. GENERATED FROM PYTHON SOURCE LINES 121-122

**Example usage:**

.. GENERATED FROM PYTHON SOURCE LINES 122-131

.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[-0.4247, -1.0390,  0.0130],
            [ 0.9966, -1.5034, -0.1607],
            [-0.5080,  0.7346, -1.7313]], requires_grad=True), Parameter containing:
    tensor([[-0.6366]], requires_grad=True)]
    Output from the convolution:  tensor([[ 0.2558, -1.9474, -2.8436, -0.1809,  1.6517, -0.1074, -6.0211,  1.4934],
            [ 0.3134, -0.5668,  0.5129, -3.6428,  2.2820,  2.0275, -0.9366, -1.0478],
            [-4.0628, -1.0787,  1.6016, -3.4207,  2.3300,  2.5714, -0.8618, -1.9806],
            [ 1.4321, -6.0658, -0.6726,  0.9502, -3.9686,  3.7675,  3.5020, -3.5036],
            [ 1.0455, -3.9335, -7.8591, -0.1321, -2.3168, -0.6225,  3.1143,  3.2310],
            [-1.4369, -2.1923, -4.5574, -6.5450,  3.6090, -1.0062,  1.8506,  2.7832],
            [-0.0576, -2.9476, -3.2357, -1.3800, -6.6886,  0.9417,  0.1302, -0.7459],
            [-1.1716,  0.1985, -4.4849, -0.8438,  0.4430, -0.1570, -3.1397,  3.9366]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[ 5.1379e-01,  1.4895e+00,  2.5960e-01, -7.0118e-01,  2.8170e-02,
             -2.0583e-01, -7.8241e-01, -1.2467e+00,  1.2311e-01, -1.3363e-03],
            [-1.7372e+00,  3.2379e-02,  1.2378e+00, -2.4443e+00, -8.0576e-02,
             -3.3208e-01,  2.2452e+00, -3.3526e+00, -1.6871e+00,  3.7155e-02],
            [ 2.4003e+00, -9.6709e-01,  3.7315e+00, -5.0789e-01,  4.8829e-01,
             -3.5190e+00,  3.4087e+00,  2.2567e+00, -5.4849e+00, -6.7557e-02],
            [-1.2266e+00,  3.7106e+00, -2.2528e+00,  6.0602e-01,  3.2115e-01,
             -3.7961e-01, -4.6356e+00,  4.9679e+00, -1.0746e+00, -2.8625e+00],
            [-1.0344e+00,  1.2279e+00,  2.5979e+00,  4.3678e-01,  2.9156e+00,
              4.8500e+00, -1.6826e+00,  5.4019e-01,  1.2430e+00, -1.2826e+00],
            [ 7.2403e-01, -1.4475e+00, -1.7869e+00,  2.6093e+00, -1.5105e+00,
              3.6527e+00,  3.9565e+00, -1.0832e+00, -9.1231e-01, -5.4287e-01],
            [ 5.7099e-01, -1.0169e+00,  2.4149e+00, -4.1343e+00,  3.1002e+00,
             -1.3811e+00,  2.1904e+00,  1.8921e+00,  2.4242e+00, -1.4506e+00],
            [ 3.9761e-01,  1.3687e+00, -1.9492e+00,  8.8043e-01, -9.4886e-01,
             -2.3885e-01, -2.5140e-01,  1.5092e+00,  1.0822e+00, -2.7785e-01],
            [-1.6072e+00,  2.5660e+00,  1.0474e+00, -5.3547e-01,  1.2721e+00,
             -1.4061e+00, -2.9465e+00,  2.5622e+00, -3.0682e+00,  2.3982e+00],
            [ 7.8953e-01, -1.0909e+00,  2.2355e+00,  5.8663e-01, -1.7193e+00,
              7.2051e-01, -1.8289e+00, -4.2742e-01,  3.0273e+00, -1.4026e+00]])




.. GENERATED FROM PYTHON SOURCE LINES 132-133

**Check the gradients:**

.. GENERATED FROM PYTHON SOURCE LINES 133-141

.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Are the gradients correct:  True





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  1.056 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
