
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "advanced/numpy_extensions_tutorial.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation

.. GENERATED FROM PYTHON SOURCE LINES 19-23

.. code-block:: default


    import torch
    from torch.autograd import Function








.. GENERATED FROM PYTHON SOURCE LINES 24-33

Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**

.. GENERATED FROM PYTHON SOURCE LINES 33-57

.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)








.. GENERATED FROM PYTHON SOURCE LINES 58-59

**Example usage of the created layer:**

.. GENERATED FROM PYTHON SOURCE LINES 59-66

.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    tensor([[ 4.2260,  6.7858,  7.7422,  1.6188,  6.2897],
            [ 2.5395,  7.9937,  5.8133,  3.1895,  5.4499],
            [ 6.0184, 12.4450,  2.2582,  8.5211,  4.6607],
            [ 4.9145,  2.9777,  3.5816,  7.7319,  7.5055],
            [14.8240,  4.7631,  3.4809, 15.9947,  0.3945],
            [ 4.9145, 11.5403,  3.3520, 11.8186,  7.5055],
            [ 6.0184,  9.5031,  3.6492,  3.1678,  4.6607],
            [ 2.5395,  9.8795,  1.8278, 10.1283,  5.4499]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[-0.9015,  1.0134,  0.7736, -1.2141, -0.0654, -0.5307, -0.9430, -0.4402],
            [ 1.2820,  0.3923,  0.4070,  0.2502, -1.1452,  0.1725, -0.2233,  0.1546],
            [ 0.4011, -0.2744, -0.3568, -1.0495, -1.3276,  0.7862, -1.6100,  0.5591],
            [-0.1606,  0.2083,  0.1138,  0.5189,  1.0459, -0.2748,  0.5183, -0.6073],
            [-0.5371, -0.2956,  0.4907,  0.6639, -0.6959,  0.0175,  0.3123, -1.0693],
            [ 0.8388,  1.0169, -0.7485,  0.2308, -0.8298, -1.1463,  0.2905, -0.9869],
            [-3.2166, -0.3529,  0.8505, -0.6562,  1.6199,  0.4088, -1.2278, -0.6575],
            [-0.7254,  0.7303, -0.9802,  1.8226,  0.0641,  2.1101,  1.4283, -0.4691]],
           requires_grad=True)




.. GENERATED FROM PYTHON SOURCE LINES 67-79

Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.

.. GENERATED FROM PYTHON SOURCE LINES 79-120

.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)









.. GENERATED FROM PYTHON SOURCE LINES 121-122

**Example usage:**

.. GENERATED FROM PYTHON SOURCE LINES 122-131

.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[ 1.5516, -0.0219, -0.8406],
            [-0.7583, -0.4789, -0.7864],
            [-1.6686, -1.1451, -0.1165]], requires_grad=True), Parameter containing:
    tensor([[2.2400]], requires_grad=True)]
    Output from the convolution:  tensor([[ 3.5809,  3.3412,  4.2405,  5.5804,  3.1421,  4.3941,  2.3615,  5.4790],
            [ 5.1765,  2.6619,  4.7278,  4.5639,  4.4702,  6.7975,  1.7194,  1.6427],
            [ 1.3247,  3.9518,  7.6921,  9.2818,  1.7235, -3.4661,  1.5593,  0.2316],
            [ 2.8987,  5.0401,  0.5468, -3.2968,  2.2545,  0.6022,  1.4819,  3.2837],
            [ 1.9667,  0.7709,  4.3867,  2.2241,  0.8230,  3.2788,  2.0978,  4.2348],
            [ 0.5090,  3.5516,  6.0752,  4.6036, -0.6721, -1.5434,  5.5979,  2.3816],
            [ 2.7706,  7.2466,  1.7211, -2.1376,  4.0914,  6.5263,  4.1793,  1.5668],
            [ 8.2465,  1.1951, -1.0359, -2.0317,  4.0530,  1.2001,  0.9958, -2.8106]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[ 5.8028e-01, -4.3518e-01,  3.0061e-01,  1.5059e+00, -1.0521e+00,
             -1.4910e+00, -2.4951e-01,  9.1177e-02,  3.5302e-01,  1.9203e-01],
            [ 9.7086e-01,  7.9414e-02, -3.1853e+00,  2.8869e-02,  5.1516e-01,
              9.5510e-01,  2.8217e-01,  1.4038e+00,  8.1653e-01, -5.4470e-01],
            [-2.0492e+00,  1.4364e+00, -1.2542e+00,  1.9081e+00,  7.1372e-01,
             -2.8075e+00,  2.9307e+00,  9.1612e-01, -3.1975e-01, -1.0126e+00],
            [-8.3917e-01, -2.7250e+00,  3.5923e+00, -1.1744e+00, -3.3146e-01,
             -3.2845e+00, -8.9092e-01, -1.5978e+00, -1.3126e+00, -1.1409e-01],
            [ 2.7364e+00, -3.8546e-01, -2.2527e+00, -3.9543e+00, -6.0935e+00,
              1.7400e+00,  3.0049e+00, -1.0317e+00, -6.1555e-01,  3.3064e-01],
            [-1.6860e-01, -2.5153e+00, -2.0495e+00,  2.0260e-01,  2.5713e+00,
              2.1073e+00,  2.3248e+00, -1.8779e+00,  2.1219e-01,  1.5480e+00],
            [ 1.2115e+00, -1.3034e+00, -4.3445e+00,  2.4445e+00,  7.5666e+00,
              4.3034e+00, -8.6885e-02, -3.8689e-02,  8.3348e-01,  1.7223e+00],
            [-1.5449e+00,  1.7057e+00,  2.0007e+00,  3.3171e+00,  4.8041e-01,
              6.1639e-01,  2.0813e+00,  3.8537e+00,  2.3065e+00,  5.2289e-01],
            [-4.5885e+00, -2.8995e+00,  4.2743e+00,  5.2718e+00,  4.5995e+00,
              2.5576e+00,  2.2487e+00,  1.1578e+00,  7.3819e-01,  2.8918e-02],
            [-1.3181e+00, -1.3122e+00,  4.1085e-01,  1.4275e+00,  5.0813e+00,
              4.1945e+00,  1.6402e+00,  4.1999e-01,  6.5687e-03, -3.3714e-03]])




.. GENERATED FROM PYTHON SOURCE LINES 132-133

**Check the gradients:**

.. GENERATED FROM PYTHON SOURCE LINES 133-141

.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Are the gradients correct:  True





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  1.039 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
