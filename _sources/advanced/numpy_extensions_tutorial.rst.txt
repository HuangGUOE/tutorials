
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "advanced/numpy_extensions_tutorial.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation

.. GENERATED FROM PYTHON SOURCE LINES 19-23

.. code-block:: default


    import torch
    from torch.autograd import Function








.. GENERATED FROM PYTHON SOURCE LINES 24-33

Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**

.. GENERATED FROM PYTHON SOURCE LINES 33-57

.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)








.. GENERATED FROM PYTHON SOURCE LINES 58-59

**Example usage of the created layer:**

.. GENERATED FROM PYTHON SOURCE LINES 59-66

.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    tensor([[10.5019, 11.3780,  6.2736,  3.0450, 16.5897],
            [11.6706,  6.4140,  7.2897, 12.3901, 11.4235],
            [ 7.8199,  6.4140,  3.0778, 11.9178,  9.4053],
            [11.9621,  6.2521,  8.6331,  9.7558, 12.8098],
            [ 3.6085, 16.0285,  3.2054,  9.1902,  2.0376],
            [11.9621,  1.9845,  5.6751,  2.6310, 12.8098],
            [ 7.8199,  5.2836,  0.8244,  1.7416,  9.4053],
            [11.6706,  4.2502,  8.4890,  8.1728, 11.4235]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[-0.0865, -0.3061, -0.5185, -1.3987,  0.1831, -1.4472,  0.5253, -1.0249],
            [-0.7674,  1.4441,  0.6394,  0.0967, -1.2773,  0.5478, -0.0884,  0.6347],
            [-1.9846,  0.3893, -1.7012, -2.1015, -0.4989, -0.2800, -0.5027, -0.1960],
            [-1.3130,  1.1986,  1.0163, -0.5370, -0.7664, -2.4789, -1.0974, -1.1997],
            [ 0.3590,  2.1165, -0.9259,  1.7104, -2.8348,  1.1115,  0.7370,  0.1995],
            [ 1.0525,  0.1913,  0.4032,  0.8646, -0.8074,  1.1043, -2.4161,  0.0567],
            [ 0.1649,  0.2342, -1.0773,  0.0183, -0.7683,  0.6052,  0.7451,  1.4986],
            [ 1.2405, -0.0607, -0.0316,  0.4040, -0.1132, -0.0639, -1.0349, -0.2879]],
           requires_grad=True)




.. GENERATED FROM PYTHON SOURCE LINES 67-79

Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.

.. GENERATED FROM PYTHON SOURCE LINES 79-120

.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)









.. GENERATED FROM PYTHON SOURCE LINES 121-122

**Example usage:**

.. GENERATED FROM PYTHON SOURCE LINES 122-131

.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[-0.3443, -0.2071, -0.5263],
            [-1.4569,  0.9466,  0.5312],
            [ 2.0571, -0.7859, -0.0298]], requires_grad=True), Parameter containing:
    tensor([[-0.7356]], requires_grad=True)]
    Output from the convolution:  tensor([[-2.3257e+00,  5.1143e+00, -8.0473e-01, -1.2396e-01, -6.1690e+00,
             -8.1870e-01,  1.1495e+00, -1.1400e-01],
            [ 1.0509e+00, -1.1992e+00, -1.0670e+00, -2.4663e+00,  2.7649e+00,
             -1.0245e+00,  1.0822e+00, -2.1429e+00],
            [-1.5431e+00, -5.3632e+00,  6.4131e-01,  1.1232e+00, -1.3166e+00,
              1.9474e-03, -2.0437e+00,  9.7967e-01],
            [-4.5545e+00,  2.9871e+00, -2.5910e+00, -6.6633e-01, -1.0686e+00,
             -6.7315e+00,  2.0599e+00, -2.7961e+00],
            [-5.2131e-01, -9.3259e-01, -3.1092e+00, -4.6051e-01,  4.6512e-01,
              1.3027e+00, -5.8019e-01, -9.0166e-01],
            [ 3.0335e-01, -3.8924e+00,  7.2984e+00, -1.7364e+00, -3.7872e+00,
              5.8595e+00, -1.5249e+00, -4.1594e+00],
            [ 1.2324e+00, -1.1732e-01, -6.9737e+00,  5.6566e-01, -2.4446e+00,
              5.2473e-02, -6.0547e+00,  3.0664e+00],
            [-1.0668e+00, -1.2665e+00,  1.1750e+00, -1.7706e+00,  2.0248e+00,
             -1.4624e+00, -3.4526e-02,  3.1123e-01]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[ 0.2619,  0.3288,  0.5333,  0.5917,  0.4562,  0.5565,  0.0804, -0.1544,
             -0.3085,  0.1001],
            [ 0.9970, -0.3710, -1.1802,  0.4715, -0.0528, -1.4679, -1.9964,  0.6259,
             -0.7635,  0.4559],
            [-1.9360, -1.3072,  1.2612, -0.9139, -0.8937, -0.0401, -2.4662,  3.3595,
             -0.1642, -0.5370],
            [ 0.7995,  2.0169, -0.1186, -0.2877, -3.6749,  3.6872,  1.7553, -3.4221,
              1.4455, -0.1701],
            [-1.3567,  4.0338, -1.2087,  0.0244,  0.8334, -0.0096,  3.9857, -1.5266,
             -0.8215,  0.4423],
            [ 3.5005, -4.0405,  0.1501, -0.0592,  3.1089, -0.9714, -4.3144,  3.4143,
              1.1429,  0.4157],
            [-3.6245, -2.0230, -1.9150, -0.5404,  1.0601, -2.6614,  6.3564, -0.9278,
             -2.2286, -0.5693],
            [-0.2168, -0.8436,  2.8197,  2.6745, -0.5901,  2.5369, -5.3377, -0.2131,
              2.2494,  0.1728],
            [ 1.5365,  4.8514,  0.4381, -5.0255,  1.9378, -1.8084,  4.8604, -2.0366,
             -0.8877, -0.2397],
            [ 0.0375, -3.3530, -0.5490,  3.2463, -1.2714, -0.8329, -1.8531, -0.0931,
              0.3957,  0.0138]])




.. GENERATED FROM PYTHON SOURCE LINES 132-133

**Check the gradients:**

.. GENERATED FROM PYTHON SOURCE LINES 133-141

.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Are the gradients correct:  True





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  1.123 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
