
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "advanced/numpy_extensions_tutorial.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation

.. GENERATED FROM PYTHON SOURCE LINES 19-23

.. code-block:: default


    import torch
    from torch.autograd import Function








.. GENERATED FROM PYTHON SOURCE LINES 24-33

Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**

.. GENERATED FROM PYTHON SOURCE LINES 33-57

.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)








.. GENERATED FROM PYTHON SOURCE LINES 58-59

**Example usage of the created layer:**

.. GENERATED FROM PYTHON SOURCE LINES 59-66

.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    tensor([[1.5929e+01, 6.4124e+00, 3.2610e+00, 6.6332e+00, 1.5015e-02],
            [1.1624e+01, 1.0682e+01, 9.1265e+00, 6.1622e+00, 9.1927e+00],
            [1.1289e+01, 5.1244e+00, 8.6348e-01, 9.8380e+00, 3.8800e+00],
            [1.0632e+01, 3.6390e+00, 8.9984e-01, 7.1042e+00, 7.3063e+00],
            [4.7550e+00, 7.6241e+00, 6.9705e+00, 1.3200e+01, 7.0511e+00],
            [1.0632e+01, 2.2289e+00, 3.3475e+00, 1.3011e+00, 7.3063e+00],
            [1.1289e+01, 7.0097e+00, 5.8142e+00, 2.7210e+00, 3.8800e+00],
            [1.1624e+01, 3.0798e+00, 5.0102e+00, 8.1288e+00, 9.1927e+00]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[ 0.1289,  0.8931,  1.0686,  1.3739,  0.2823,  0.2564,  0.1335, -1.1171],
            [ 0.5399,  0.5890,  0.5799, -0.0847, -0.8588, -0.9199,  0.6156,  0.2861],
            [ 1.9064,  1.2310,  0.0041,  0.8025, -0.1801,  1.7884,  0.2685,  0.1791],
            [-1.1370,  1.6024,  0.1679, -0.6952, -0.3183, -0.1087, -1.1186,  1.4216],
            [ 0.6782,  0.3006, -0.7231,  0.1558,  0.4456, -0.4351,  0.6822, -0.5416],
            [-0.3374, -1.3340, -0.9207, -0.5481, -0.5617, -0.4822, -0.2780,  1.0921],
            [ 1.8421, -1.7470, -0.3611,  0.8211,  0.2650,  0.1814,  0.4962, -0.7380],
            [ 2.1730,  0.4156,  1.9562,  1.2963,  0.4548,  0.8141,  0.0778,  1.2080]],
           requires_grad=True)




.. GENERATED FROM PYTHON SOURCE LINES 67-79

Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.

.. GENERATED FROM PYTHON SOURCE LINES 79-120

.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)









.. GENERATED FROM PYTHON SOURCE LINES 121-122

**Example usage:**

.. GENERATED FROM PYTHON SOURCE LINES 122-131

.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[-0.0775,  1.3889, -0.7025],
            [ 0.7940, -0.9455,  1.4411],
            [-1.4485, -0.2691,  1.5102]], requires_grad=True), Parameter containing:
    tensor([[-0.0033]], requires_grad=True)]
    Output from the convolution:  tensor([[ 6.2488,  4.5936, -4.1640, -2.1546, -2.7344, -0.3078, -3.0499,  7.6155],
            [-0.0276, -1.7208, -0.6306, 10.7581, -1.1629, -5.4410, -4.2579,  2.7940],
            [-9.1739, -2.0666,  6.6846,  0.4632,  6.2565, -6.5993,  4.4162, -2.5329],
            [-4.2700,  0.6486, -3.7295,  0.8383, -1.7336,  1.2611,  3.8583,  1.8073],
            [ 1.4602, -3.1791,  2.0127, -2.1285,  1.2228,  3.2303, -2.4495, -3.0582],
            [-1.1560,  1.2555, -1.0660, -0.4500, -0.6549,  1.8109, -1.5972,  0.9253],
            [ 6.7564, -4.3197,  0.0415,  0.6812, -2.0218,  0.1589, -2.8055,  3.2946],
            [-3.0714, -1.2820, -2.1556,  9.2013,  3.3907, -4.4198,  0.9977, -2.6007]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[ 7.8949e-02, -1.4322e+00,  1.1304e+00, -2.2712e+00,  1.5898e+00,
              5.0856e-01, -5.6626e-01, -1.5293e+00,  2.2926e+00, -7.5650e-01],
            [-8.6097e-01,  1.9872e+00, -2.0005e+00,  1.1434e+00,  5.6167e-01,
              7.9402e-01, -1.7444e+00,  3.3852e+00, -3.5159e+00,  1.6309e+00],
            [ 2.1048e+00, -1.6677e+00,  1.3267e+00,  4.7000e+00, -5.2622e+00,
              3.9593e+00,  5.0009e+00, -4.1918e+00,  1.4063e+00,  7.7367e-01],
            [-1.8006e+00, -3.5392e+00,  1.6027e+00, -3.0559e+00,  1.7534e-01,
              1.6119e-01,  3.9097e+00,  1.3230e-01, -1.3018e+00,  1.7376e+00],
            [ 7.3414e-03,  3.4299e+00, -8.7882e+00,  4.3932e-01, -2.3471e+00,
              1.3183e+00,  1.4402e+00,  1.1640e+00, -1.9489e+00,  4.6158e-01],
            [ 3.6506e+00, -4.0458e-02, -3.0989e+00, -3.0037e+00,  4.1309e+00,
             -4.4412e+00,  1.7179e+00, -1.1110e+00,  4.1958e+00, -1.5776e+00],
            [-3.9367e-01,  1.2797e+00,  4.0084e+00,  7.3059e-01, -4.4412e+00,
              2.6750e+00, -4.9653e+00, -2.1067e+00,  2.6366e+00,  1.2867e+00],
            [-2.6599e-01,  1.8994e+00,  5.6094e+00, -3.8354e+00,  1.0002e+00,
              2.6768e+00, -1.4539e+00,  1.9301e+00, -6.6402e+00,  1.9644e+00],
            [-6.6870e-01, -1.0237e+00, -2.0725e+00,  6.1165e+00, -1.8806e+00,
             -8.4304e-01,  6.9100e+00,  8.1158e-01, -3.1773e+00, -2.1492e+00],
            [-7.4080e-01, -3.4485e+00,  1.7228e+00,  3.5744e+00, -3.5234e+00,
             -6.4106e-01,  2.2878e+00,  2.5291e+00, -9.1351e-02, -2.0403e+00]])




.. GENERATED FROM PYTHON SOURCE LINES 132-133

**Check the gradients:**

.. GENERATED FROM PYTHON SOURCE LINES 133-141

.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Are the gradients correct:  True





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  1.107 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
