
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "advanced/numpy_extensions_tutorial.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation

.. GENERATED FROM PYTHON SOURCE LINES 19-23

.. code-block:: default


    import torch
    from torch.autograd import Function








.. GENERATED FROM PYTHON SOURCE LINES 24-33

Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**

.. GENERATED FROM PYTHON SOURCE LINES 33-57

.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)








.. GENERATED FROM PYTHON SOURCE LINES 58-59

**Example usage of the created layer:**

.. GENERATED FROM PYTHON SOURCE LINES 59-66

.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    tensor([[19.3665,  7.6763,  5.5476,  5.1156,  9.9470],
            [ 7.5503,  3.4748,  4.6156,  5.1356,  2.7348],
            [ 3.3957,  1.5298,  4.2525,  2.3781, 14.1682],
            [ 2.8599,  6.9150,  6.6711, 11.7185, 10.8469],
            [10.0646, 12.1557,  7.7023, 16.5649,  1.4179],
            [ 2.8599,  2.4991,  4.9637,  5.9290, 10.8469],
            [ 3.3957, 18.2712,  7.9216,  9.0205, 14.1682],
            [ 7.5503, 11.1323,  7.5970,  5.1037,  2.7348]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[ 1.6606, -0.5753,  0.4388,  1.4598,  1.1082, -0.0945,  0.5314, -0.5300],
            [ 0.8763,  0.5181, -0.6012, -0.4742,  0.8194,  1.8659,  0.2485,  1.5009],
            [-0.5113,  0.9389, -1.1929,  2.0375,  0.5200, -1.9137,  0.1704,  0.8426],
            [ 0.0903, -1.8214,  1.3348, -0.9883,  1.9507,  0.6472,  1.0714, -0.8669],
            [ 0.5073, -0.7058, -1.8467, -0.3629,  0.2752, -0.1090,  1.4449,  0.1151],
            [-0.0120,  0.7379, -0.6112, -0.4679,  0.4393,  1.3203,  1.3737,  1.2021],
            [ 1.0397,  0.6529,  1.3245, -0.2996, -1.3953, -1.1809,  0.3831, -0.0820],
            [-1.2655, -0.4039,  1.9455,  0.1913,  2.7064,  0.1327, -0.1673,  1.4228]],
           requires_grad=True)




.. GENERATED FROM PYTHON SOURCE LINES 67-79

Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.

.. GENERATED FROM PYTHON SOURCE LINES 79-120

.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)









.. GENERATED FROM PYTHON SOURCE LINES 121-122

**Example usage:**

.. GENERATED FROM PYTHON SOURCE LINES 122-131

.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[ 0.3945,  0.8763,  1.5224],
            [ 1.9225, -1.8332,  1.0393],
            [-1.0745, -0.2805,  0.0083]], requires_grad=True), Parameter containing:
    tensor([[0.2221]], requires_grad=True)]
    Output from the convolution:  tensor([[ 0.7666, -2.9211, -0.3578,  5.0598, -3.2755, -0.0847, -2.8007, -0.8138],
            [-4.0474,  5.3549, -0.2149,  5.1797, -2.2471, -1.8628, -5.3550,  5.2409],
            [ 0.8161,  6.1719, -5.3624,  5.8883, -1.9486,  7.4558,  5.2324,  6.2469],
            [-0.2977,  1.2266, -0.5462,  3.8997,  7.9817, -0.5008,  5.2038, -0.1964],
            [ 1.4552,  1.7465,  1.0545, -1.8085,  0.3084, -3.6562, -3.3488,  3.9929],
            [ 3.9528, -0.5413,  3.7407, -3.3620,  5.4468,  0.4256,  8.5042,  3.3723],
            [-4.4861, -0.4274, -2.4755,  5.1196,  0.4957,  3.3215,  4.7885,  0.5255],
            [-6.0461, -3.9103,  2.8478, -2.5841,  0.5858, -0.6918,  4.8229,  3.8363]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[-0.0539, -0.1931, -0.4418, -0.5431, -1.0551, -2.2712, -3.0322, -1.5206,
              1.5660, -0.8771],
            [-1.1752, -2.1774, -3.6636, -0.6207, -2.7014, -1.6937,  4.8611, -3.7517,
              3.2940,  0.9534],
            [-4.7508,  2.6789, -5.0302, -4.9466,  2.7110,  5.1012,  0.0270,  1.8987,
             -1.4101,  1.6152],
            [ 0.2921, -0.1218, -1.2065,  2.3044,  1.8293, -7.6722,  2.6173, -0.9840,
              0.0304, -1.7540],
            [ 1.5822,  2.2281,  4.7929, -1.6536, -2.2838, -1.2842,  1.2992, -5.9506,
              3.8656, -1.6295],
            [ 1.5618, -1.8883,  2.5406, -2.6474,  4.0416,  1.5369, -4.5421, -0.8100,
              0.6822,  1.6846],
            [-1.9317,  0.5924,  0.4285,  1.4774,  0.9331, -2.5061, -1.9305, -1.4606,
             -2.1867,  0.4338],
            [ 0.2831,  2.2484, -0.5176, -1.3512,  2.2607, -1.5561,  7.7859, -5.0245,
              3.4126,  1.0226],
            [ 1.4957, -2.3318,  0.7854,  2.0838, -1.7344,  4.4372,  1.3772,  1.0545,
             -0.9354,  1.0605],
            [-0.6936,  0.1242, -0.0989, -1.4970, -0.5140, -0.1611, -0.8507, -1.3130,
             -0.2811,  0.0085]])




.. GENERATED FROM PYTHON SOURCE LINES 132-133

**Check the gradients:**

.. GENERATED FROM PYTHON SOURCE LINES 133-141

.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Are the gradients correct:  True





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  1.032 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
