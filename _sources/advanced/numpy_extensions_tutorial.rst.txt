
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "advanced/numpy_extensions_tutorial.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation

.. GENERATED FROM PYTHON SOURCE LINES 19-23

.. code-block:: default


    import torch
    from torch.autograd import Function








.. GENERATED FROM PYTHON SOURCE LINES 24-33

Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**

.. GENERATED FROM PYTHON SOURCE LINES 33-57

.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)








.. GENERATED FROM PYTHON SOURCE LINES 58-59

**Example usage of the created layer:**

.. GENERATED FROM PYTHON SOURCE LINES 59-66

.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    tensor([[ 1.0102,  7.9626,  9.0811, 16.9041,  0.8145],
            [13.9076,  5.1510,  6.0563, 11.5879, 12.8416],
            [ 9.4893,  3.0844,  5.9832,  7.7075,  2.4399],
            [ 9.9427,  5.7540,  6.4730,  6.8744,  8.2353],
            [10.7243,  5.3161,  4.0704,  8.1351,  2.8460],
            [ 9.9427, 12.1174,  8.0748, 13.2643,  8.2353],
            [ 9.4893,  7.2510,  8.2723,  4.1443,  2.4399],
            [13.9076,  3.4466,  4.0874,  9.1050, 12.8416]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[ 0.5936, -0.5141,  1.2831, -0.9438, -1.3240, -1.1545,  0.1095,  1.0487],
            [ 0.1464, -0.3032,  1.5381, -0.7392,  0.4039,  0.5971, -0.9121,  0.3903],
            [ 0.3113, -1.0850,  0.6883, -0.7379,  2.4626, -0.1349, -1.0574,  2.5934],
            [ 0.1803,  0.1750, -0.1397, -0.8414, -1.0614,  0.5778, -1.0761,  1.0357],
            [ 0.5889,  1.1379,  1.1177,  3.1864, -0.1992,  0.5409,  1.0954,  0.5902],
            [ 0.2056, -0.4607,  0.4548, -0.3367, -1.0614, -0.6587, -1.0577,  1.5276],
            [-0.2000, -0.6894,  0.0900,  0.9555, -1.4905,  0.4372, -1.6436, -1.7891],
            [-0.6549, -1.4144,  1.2243, -1.6688,  0.2799, -1.3599,  0.0167,  0.1358]],
           requires_grad=True)




.. GENERATED FROM PYTHON SOURCE LINES 67-79

Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.

.. GENERATED FROM PYTHON SOURCE LINES 79-120

.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)









.. GENERATED FROM PYTHON SOURCE LINES 121-122

**Example usage:**

.. GENERATED FROM PYTHON SOURCE LINES 122-131

.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[-0.6285,  0.7488, -0.3036],
            [-0.6493, -0.1436, -1.2063],
            [-1.0241,  1.1506, -0.0871]], requires_grad=True), Parameter containing:
    tensor([[-1.0952]], requires_grad=True)]
    Output from the convolution:  tensor([[-1.3631e+00,  2.9234e-01,  9.0767e-01,  3.6078e-01, -3.5653e+00,
              5.6619e+00, -1.2898e+00,  1.2198e+00],
            [-2.0845e-01, -3.6949e+00, -1.2598e+00,  1.6025e-01,  1.3850e-03,
             -8.0406e-01, -2.4315e+00, -1.1767e+00],
            [-3.4062e+00, -8.2370e-01, -1.4086e+00, -2.6168e+00, -2.6824e+00,
              3.6094e-01, -3.5110e+00, -5.4690e-01],
            [ 1.7467e+00, -3.2873e+00,  3.7953e-01, -9.0764e-01, -6.3319e-01,
             -2.5460e+00, -2.0558e+00, -6.2725e-01],
            [ 2.2160e+00, -1.1985e+00, -7.6103e-01, -5.4155e-01, -6.1438e-01,
              2.4261e+00, -2.3743e+00, -1.0500e-01],
            [ 1.0963e+00, -4.0365e+00,  1.4284e+00,  3.1632e-01,  3.8948e-02,
             -3.0609e+00,  2.8877e-01, -2.6776e+00],
            [ 1.7446e+00, -4.7318e+00, -1.3784e+00, -1.6503e-01, -2.3337e+00,
             -1.7250e+00, -1.8955e+00, -4.9184e-01],
            [-7.0128e-01, -2.5780e+00,  2.6872e-01,  6.7544e-02, -3.3613e+00,
             -1.7825e+00, -2.9159e+00,  3.1689e+00]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[ 0.2899, -0.3674, -0.9060,  0.7224,  0.8435, -1.4715, -0.2337,  0.4661,
              0.1799, -0.2700],
            [ 0.8741, -1.0048,  0.5206, -0.6861, -1.8652, -2.3072,  2.2484, -2.1379,
             -2.4613, -0.7905],
            [ 0.8488,  0.2171, -1.9762,  1.3574,  2.7350, -0.3741, -0.1874, -0.7126,
              2.3069,  1.0415],
            [ 1.2917,  0.1591, -1.3838,  1.5891, -3.3419, -5.9420,  0.7083,  0.9398,
             -2.0202,  0.5700],
            [ 0.4422,  3.5166, -1.0794,  3.5724, -0.2329,  1.7640,  1.4038,  0.1056,
             -1.6740,  2.3797],
            [ 1.2430,  1.9457, -2.3741, -0.1702,  1.4060, -0.2845,  0.7331,  1.0668,
             -0.1334,  1.2092],
            [ 0.6029,  0.0942, -0.6505,  0.2483, -1.6285, -2.0709, -2.1193,  0.3284,
             -0.6561, -1.7654],
            [ 0.0860,  1.8777, -1.0121, -2.1585, -2.4533,  2.8121, -0.3643, -1.6593,
              3.3136, -0.1775],
            [ 0.0327,  1.4466, -1.3102,  2.7682,  0.6337,  2.8004, -2.1630,  0.5703,
             -0.2343, -1.4713],
            [-0.4213,  2.5325, -1.5863, -0.5166, -1.1177,  2.1982, -1.0723, -1.4135,
              1.4446, -0.1080]])




.. GENERATED FROM PYTHON SOURCE LINES 132-133

**Check the gradients:**

.. GENERATED FROM PYTHON SOURCE LINES 133-141

.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Are the gradients correct:  True





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  1.039 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
