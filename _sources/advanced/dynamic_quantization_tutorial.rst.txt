
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "advanced/dynamic_quantization_tutorial.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(beta) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we will apply the easiest form of quantization -
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.

.. GENERATED FROM PYTHON SOURCE LINES 22-32

.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F








.. GENERATED FROM PYTHON SOURCE LINES 33-39

1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.

.. GENERATED FROM PYTHON SOURCE LINES 39-73

.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))








.. GENERATED FROM PYTHON SOURCE LINES 74-82

2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.

.. GENERATED FROM PYTHON SOURCE LINES 82-132

.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')








.. GENERATED FROM PYTHON SOURCE LINES 133-141

3. Load the pre-trained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pre-trained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.

.. GENERATED FROM PYTHON SOURCE LINES 141-161

.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )




.. GENERATED FROM PYTHON SOURCE LINES 162-165

Now let's generate some text to ensure that the pre-trained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_

.. GENERATED FROM PYTHON SOURCE LINES 165-190

.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b'Jabbar' b',' b'having' b'renovated' b'several' b'clandestine' b'patches' b'of' b'overseeing' b'stars' b'.' b'Ben' b'physicist' b'pointed' b'his' b'people' b'with' b'an' b'highly' b'much'
    b'traced' b'planet' b'in' b'<unk>' b'training' b',' b'little' b'of' b'her' b'history' b'Rosaleen' b',' b'Heads' b'himself' b'receivers' b'and' b'a' b'equator' b'built' b'by'
    b'Van' b'Harvey' b'during' b'his' b'1917' b'love' b'.' b'Snow' b'provided' b'a' b'will' b'before' b'then' b'Minsky' b"'s" b'death' b'.' b'Herg\xc3\xa9' b'attempted' b'for'
    b'some' b'other' b'nine' b'@-@' b'innocence' b'connections' b',' b'<unk>' b'Pacer' b'(' b'1981' b')' b'and' b'The' b'Green' b'(' b'The' b'<unk>' b')' b'Avalanche'
    b'<unk>' b'.' b'Three' b'tries' b'later' b',' b'in' b'fact' b'he' b'accepted' b'a' b'direct' b'sweep' b'in' b'a' b'2004' b'diaries' b'that' b'"' b'shall'
    b'have' b'up' b'under' b'a' b'particular' b'venture' b',' b'muddy' b'helium' b'and' b'cash' b'mimicked' b'@-@' b'like' b'directions' b',' b'so' b'interment' b'<unk>' b'throwing'
    b'its' b'divisional' b'intensity' b'for' b'Father' b'Brown' b'Ernst' b'Mario' b'a' b'star' b',' b'also' b'<unk>' b'past' b'value' b'though' b'however' b'.' b'He' b'loved'
    b'it' b'"' b',' b'a' b'7' b'@.@' b'8' b'%' b',' b'his' b'19' b'@-@' b'year' b'frame' b'between' b'school' b'and' b'33' b'in' b'and'
    b'ten' b'%' b',' b'once' b'making' b'a' b'separately' b'contract' b'in' b'his' b'romantic' b'career' b'to' b'date' b';' b'"' b'or' b'"' b'will' b'have'
    b'cut' b'a' b'diplomatic' b'relationship' b'with' b'The' b'listeners' b'and' b'ignorant' b'@-@' b'peat' b'.' b'In' b'the' b'after' b'season' b'he' b'converted' b'up' b'into'
    b'to' b'Las' b'Vegas' b'The' b'amphitheatre' b'taking' b'place' b'.' b'He' b'felt' b'it' b'will' b'not' b'be' b'so' b'the' b'opposite' b',' b'an' b'window'
    b'that' b'includes' b'for' b'three' b'ways' b'chaired' b'by' b'Palenque' b'with' b'Rod' b'in' b'the' b'1023' b'court' b'for' b'1868' b'.' b'Bell' b'(' b'Behind'
    b'role' b'release' b')' b'have' b'<unk>' b'tension' b'on' b'story' b'performed' b'about' b'a' b'off' b'race' b'to' b'keep' b'access' b',' b'and' b'wanted' b'to'
    b'gather' b'before' b'hemmema' b'wasn' b'\xe2\x80\x99' b't' b'retired' b'.' b'That' b'convection' b'is' b'barred' b'that' b'instead' b'of' b'"' b'throated' b'buildings' b'and' b'masterpiece'
    b'"' b',' b'such' b'as' b'slave' b',' b'Neversoft' b',' b'and' b'Makoto' b'Henry' b'and' b'The' b'inactivation' b'of' b'his' b'musical' b'tribute' b'(' b'arranged'
    b'long' b'early' b'although' b'it' b'won' b'machine' b'm' b'yards' b'each' b'three' b'months' b'later' b';' b'they' b'also' b'added' b'for' b'real' b',' b'moving'
    b'by' b'such' b',' b'one' b'of' b'the' b'<unk>' b'<unk>' b'Sclerodermatineae' b'arrogant' b'.' b'In' b'this' b'time' b'in' b'society' b',' b'without' b'males' b'three'
    b'times' b',' b'compared' b'to' b'one' b'person' b',' b'can' b'convert' b'a' b'atmosphere' b'of' b'reissued' b'the' b'jury' b'.' b'Comic' b'narthex' b'is' b'being'
    b'favoured' b'to' b'air' b'each' b'of' b'their' b'children' b'.' b'watery' b'encountering' b'funds' b'heard' b'their' b'scheduled' b',' b'sat' b'in' b'the' b'rear' b'person'
    b'.' b'There' b'are' b'no' b'evidence' b'that' b'merge' b'the' b'judge' b'again' b'made' b'objects' b'in' b'any' b'other' b'framework' b'\xe2\x80\x94' b'while' b'more' b'large'
    b',' b'this' b'deformed' b'of' b'the' b'G.E.' b'material' b'as' b'a' b'atmosphere' b'floor' b'.' b'After' b'scales' b',' b'Dillon' b'tried' b'for' b'his' b'sexually'
    b'nearly' b'two' b'hours' b'between' b'father' b"'s" b'existence' b'and' b'rugged' b'abilities' b',' b'as' b'erotic' b'trees' b',' b'Generally' b'whether' b'their' b'plumage' b'might'
    b'sign' b'emergency' b'.' b'Males' b'is' b'well' b'@-@' b'domed' b'on' b'<unk>' b',' b'and' b'this' b'saw' b'to' b'give' b'music' b'holds' b'other' b'rain'
    b'.' b'Moreover' b',' b'1850' b',' b'mainly' b'they' b'also' b'evolved' b'cold' b'appearance' b',' b'and' b'analyses' b'for' b'<unk>' b',' b'blotched' b'quietly' b','
    b'tribes' b',' b'properties' b'over' b'by' b'the' b'same' b'break' b'when' b'they' b'also' b'have' b'mortality' b'steps' b'.' b'If' b'he' b'will' b'break' b'whether'
    b'they' b'are' b'only' b'lucky' b'in' b'its' b'or' b'the' b'plumes' b',' b'accumulating' b'on' b'Situation' b'in' b'of' b'trouble' b'.' b'They' b'has' b'hit'
    b'rapidly' b'support' b',' b'spaced' b'reinstated' b'by' b'chrome' b'looking' b'.' b'Their' b'<unk>' b'does' b'not' b'distinguish' b'Ames' b',' b'so' b'on' b'Mildred' b'paper'
    b'regions' b'references' b'Strand' b'would' b'wait' b'.' b'If' b'they' b'resulted' b'with' b'Sundays' b'.' b'Most' b'birds' b'indicate' b'that' b'there' b'are' b'possible' b'evidence'
    b',' b'so' b'bays' b'specify' b'fit' b'off' b'therapy' b'and' b'accurate' b',' b'or' b'orange' b'yield' b'(' b"'" b'preventing' b'<unk>' b'or' b'Pruett' b')'
    b'or' b'full' b'organic' b'any' b'grasses' b'without' b'this' b'engagement' b'.' b'But' b'people' b'philanthropist' b'by' b'Truely' b'are' b'known' b'as' b'more' b'<unk>' b','
    b'on' b'that' b'day' b',' b'that' b'repellent' b',' b'received' b'a' b'large' b'front' b'<unk>' b'W' b'.' b'For' b'"' b'Gaboon' b'attributes' b'"' b','
    b'concerning' b'croplands' b'exclusively' b'sank' b'aside' b',' b'but' b'so' b'their' b'other' b'has' b'done' b'guests' b'.' b'<eos>' b'The' b'Kells' b'rises' b'down' b'on'
    b'a' b'average' b'basis' b'to' b'female' b'support' b',' b'and' b'the' b'<unk>' b'<unk>' b'(' b'<unk>' b')' b'.' b'<eos>' b'Conservation' b'et' b'M.' b'd'
    b'la' b'1720' b']' b'=' b'In' b'no' b'Bartlett' b',' b'Pareles' b'poems' b',' b'can' b'desired' b'in' b'Nowhere' b',' b'while' b'grey' b'@-@' b'like'
    b'ridges' b'have' b'learned' b'older' b'species' b'(' b'which' b'are' b'indeed' b'rather' b'biodegradable' b'year' b'between' b'breakfast' b')' b'.' b'539' b',' b'so' b'the'
    b'faces' b'starts' b',' b'by' b'the' b'next' b',' b'include' b'the' b'one' b'of' b'the' b'Celtic' b'Inocybe' b',' b'can' b'be' b'bound' b'.' b'A'
    b'variety' b'of' b'other' b'protein' b'eye' b',' b'G.' b'Brandt' b',' b'says' b'that' b'would' b'have' b'from' b'various' b'way' b'in' b'its' b'lifetime' b'for'
    b'about' b'25' b'or' b'5' b'years' b',' b'or' b'is' b'NMR' b'executed' b'or' b'adds' b'what' b'are' b'74' b'(' b'2' b'@.@' b'2' b'km'
    b')' b'high' b'@-@' b'engine' b'archaea' b'.' b'These' b'invertebrate' b'tissue' b'Igor' b'marks' b'liable' b'Bed' b'remaining' b',' b'when' b'when' b'he' b'hit' b'.'
    b'<eos>' b'If' b'there' b',' b'probably' b'light' b',' b'additional' b'mating' b'are' b'being' b'recognized' b'after' b'women' b'may' b'be' b'dated' b'in' b'interactions' b'showed'
    b'they' b'eroded' b'in' b'any' b'vicinity' b'.' b'<eos>' b'Along' b'to' b'1' b'sculptures' b'serving' b'in' b'over' b'50' b'hours' b',' b'to' b'attract' b'one'
    b'or' b'female' b'based' b'in' b'in' b'Iona' b',' b'their' b'exterior' b'explosions' b'are' b'demon' b'.' b'This' b'rate' b'of' b'<unk>' b'scales' b'misses' b'graduation'
    b',' b'most' b'of' b'which' b'are' b'complete' b'by' b'each' b'take' b'upgrade' b'.' b'There' b'are' b'no' b'official' b'from' b'adults' b'but' b'enlisted' b'birds'
    b'who' b'noted' b'catch' b',' b'depart' b',' b'and' b'as' b'south' b'tends' b'"' b'enforcement' b'"' b'.' b'<eos>' b'ambition' b'(' b'turbine' b',' b'1996'
    b')' b'is' b'a' b'edibility' b'of' b'tissues' b'between' b'both' b'Franks' b',' b'and' b'that' b'the' b'kakapo' b'was' b'twigs' b'.' b'A' b'overt' b'chromatin'
    b'can' b'be' b'found' b'by' b'the' b'Eurasian' b'substantive' b',' b'and' b'they' b'are' b'designed' b'to' b'be' b'implicated' b'up' b'back' b'or' b'took' b'to'
    b',' b'so' b'they' b'might' b'move' b'to' b'any' b'appearance' b'.' b'This' b'is' b'because' b'they' b'can' b'be' b'supported' b'by' b'130' b'or' b'five'
    b'birds' b'in' b'orbit' b'.' b'A' b'female' b'for' b'choice' b']' b'is' b'assembled' b'from' b'other' b'extinct' b'doses' b',' b'although' b'are' b'then' b'toxic'
    b'for' b'one' b'or' b'two' b'more' b'gods' b',' b'black' b'parte' b'<unk>' b'debilitating' b'.' b'<eos>' b'samarium' b'wives' b'(' b'older' b'factors' b')' b'is'
    b'regulated' b'in' b'<unk>' b'and' b'rapid' b'levels' b'such' b'as' b'that' b'hatch' b'breeding' b'in' b'order' b'to' b'be' b'polygyny' b'bird' b'.' b'<eos>' b'grenade'





.. GENERATED FROM PYTHON SOURCE LINES 191-196

It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:

.. GENERATED FROM PYTHON SOURCE LINES 196-241

.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into bsz parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the bsz batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].reshape(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)








.. GENERATED FROM PYTHON SOURCE LINES 242-251

4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values

.. GENERATED FROM PYTHON SOURCE LINES 251-259

.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): DynamicQuantizedLinear(in_features=256, out_features=33278, dtype=torch.qint8, qscheme=torch.per_tensor_affine)
    )




.. GENERATED FROM PYTHON SOURCE LINES 260-262

The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:

.. GENERATED FROM PYTHON SOURCE LINES 262-271

.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Size (MB): 113.944608
    Size (MB): 79.739034




.. GENERATED FROM PYTHON SOURCE LINES 272-276

Second, we see faster inference time, with no difference in evaluation loss:

Note: we set the number of threads to one for single threaded comparison, since quantized
models run single threaded.

.. GENERATED FROM PYTHON SOURCE LINES 276-288

.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 205.3
    loss: 5.168
    elapsed time (seconds): 106.9




.. GENERATED FROM PYTHON SOURCE LINES 289-300

Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 5 minutes  20.563 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
