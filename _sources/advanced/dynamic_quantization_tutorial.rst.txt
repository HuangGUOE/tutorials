
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "advanced/dynamic_quantization_tutorial.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(beta) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we will apply the easiest form of quantization -
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.

.. GENERATED FROM PYTHON SOURCE LINES 22-32

.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F








.. GENERATED FROM PYTHON SOURCE LINES 33-39

1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.

.. GENERATED FROM PYTHON SOURCE LINES 39-73

.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))








.. GENERATED FROM PYTHON SOURCE LINES 74-82

2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.

.. GENERATED FROM PYTHON SOURCE LINES 82-132

.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')








.. GENERATED FROM PYTHON SOURCE LINES 133-141

3. Load the pre-trained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pre-trained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.

.. GENERATED FROM PYTHON SOURCE LINES 141-161

.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )




.. GENERATED FROM PYTHON SOURCE LINES 162-165

Now let's generate some text to ensure that the pre-trained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_

.. GENERATED FROM PYTHON SOURCE LINES 165-190

.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b'liters' b'in' b'campaign' b'but' b'it' b'would' b'be' b'debated' b',' b'and' b'Jayma' b'bernissartensis' b'<unk>' b'him' b'the' b'structure' b'before' b'the' b'story' b'of'
    b'items' b'in' b'their' b'course' b'.' b'<unk>' b'Inc' b'from' b'the' b'stories' b'of' b'Ike' b',' b'the' b'planet' b'so' b'one' b'of' b'all' b'four'
    b'versions' b'have' b'a' b'heavily' b'whistle' b'"' b'Heroes' b'"' b'visual' b'scale' b'of' b'6' b'loyalists' b',' b'whereas' b'the' b'behest' b'of' b'handled' b'themselves'
    b'and' b'doors' b'are' b'the' b'influence' b'of' b'criticisms' b'including' b'tracking' b'[' b'to' b'1' b'@.@' b'3' b',' b'which' b'bowled' b'it' b'up' b'.'
    b'The' b'two' b'or' b'more' b'frequently' b'm2' b',' b'a' b'relationship' b'about' b'any' b'as' b'a' b'single' b'@-@' b'spinning' b'inner' b'space' b'.' b'A'
    b'two' b'@-@' b'season' b'death' b'controls' b'under' b'a' b'female' b'from' b'its' b'shadow' b'when' b'he' b'planting' b'are' b'just' b'respectable' b'of' b'his' b'health'
    b',' b'and' b'they' b'sometimes' b'lay' b',' b'therefore' b',' b'banks' b'and' b'dark' b',' b'introduced' b'a' b'range' b'of' b'<unk>' b',' b'which' b'dealt'
    b'to' b'other' b'primary' b'Mabillard' b'spots' b'.' b'His' b'father' b'tells' b'mothers' b'and' b'tell' b'"' b'enjoyed' b'a' b'timeout' b'"' b'colour' b'.' b'The'
    b'Bernissart' b'Conception' b'<unk>' b'was' b'printed' b'as' b'the' b'19th' b'<unk>' b',' b'<unk>' b'seeds' b'and' b',' b'in' b'German' b'Isles' b'.' b'If' b'business'
    b'until' b'the' b'key' b'story' b',' b'they' b'have' b'pressed' b'two' b'survived' b'at' b'these' b'level' b',' b'and' b'supported' b'his' b'season' b'as' b'a'
    b'model' b'of' b'eat' b'wicca' b'with' b'moral' b'controversies' b'.' b'<eos>' b'Although' b'nursing' b'picked' b'from' b'a' b'scattered' b'affairs' b',' b'establishing' b'in' b'all'
    b'them' b'is' b'one' b'and' b'Skedar' b'out' b'of' b'specific' b'males' b',' b'particularly' b'able' b'to' b'engage' b'1' b'%' b'of' b'the' b'earth' b'.'
    b'Man' b'states' b':' b'"' b'When' b'in' b"'s" b'will' b'because' b'Richardson' b']' b'seem' b'and' b'both' b'her' b'locks' b'really' b'...' b'Venus' b'comes'
    b'to' b'St.' b'Perrin' b'in' b'all' b'Boat' b'used' b'.' b'His' b'ultimate' b'sitcom' b'to' b'hear' b'it' b';' b'I' b"'d" b'takes' b'clear' b'mother'
    b'other' b'is' b'different' b'for' b'a' b'academic' b'moves' b',' b'quatrain' b'Our' b'.' b'"' b'A' b'Lochaber' b'discovers' b'<unk>' b'making' b'the' b'leaves' b'work'
    b'for' b'an' b'part' b'of' b'20' b'\xe2\x80\x93' b'5' b'seconds' b'.' b'In' b'1911' b',' b'the' b'Duke' b'of' b'The' b'Morning' b'Movie' b'responded' b'a'
    b'hit' b'up' b'not' b'under' b'Hepburn' b'metabolism' b',' b'and' b'the' b'automatic' b'candidates' b'reported' b'.' b'According' b'to' b'The' b'birth' b'of' b'downloads' b'a'
    b'new' b'run' b',' b'follows' b'Ayurvedic' b'values' b',' b'it' b',' b'its' b'incomplete' b'@-@' b'rate' b'and' b'fundamental' b'publication' b'that' b'he' b'often' b'all'
    b'distant' b'lambs' b'at' b'a' b'statues' b'or' b'a' b'parole' b'score' b'.' b'rhizomorphs' b'was' b'run' b'from' b'Tottenham' b'scientists' b'in' b'1934' b',' b'giving'
    b'"' b'the' b'wicket' b'of' b'Penguins' b'"' b',' b'and' b'occurs' b'before' b'the' b'artwork' b'in' b'Catholicism' b'intercourse' b'and' b'the' b'"' b'/' b'2'
    b'@-@' b'measure' b'"' b',' b'which' b'dissolves' b'prevention' b'fighting' b',' b'Madagascar' b'after' b'the' b'separate' b'gorgeously' b'quantity' b'.' b'The' b'new' b'denomination' b'through'
    b'The' b'Nobel' b'Maids' b'has' b'healing' b'responses' b'at' b'the' b'Earth' b'@-@' b'Hungary' b'of' b'a' b'anxiety' b'on' b'"' b'the' b'writings' b'of' b'the'
    b'religion' b'as' b'the' b'popularity' b'of' b'Broadest' b'"' b'holy' b'Liberator' b'.' b'During' b'the' b'early' b'1960s' b',' b'ideas' b'of' b'Hairan' b'James' b':'
    b'The' b'Sun' b'(' b'Jenna' b'alloys' b')' b'was' b'arrives' b'in' b'FIBA' b':' b'reflecting' b'100' b'rubbing' b'for' b'Best' b'Cavalry' b'and' b'1776' b'often'
    b'provoke' b'in' b'2014' b'.' b'Townsend' b'were' b'a' b'possessive' b'forum' b',' b'a' b'other' b'independent' b'newspaper' b'wrote' b'that' b'"' b'It' b'is' b'possible'
    b'that' b'when' b'they' b'may' b'no' b'condition' b'there' b'are' b'nothing' b'and' b'that' b'yourself' b'these' b'producers' b'"' b',' b'they' b'were' b'also' b'brought'
    b'to' b'Spirit' b'as' b'rapid' b'pieces' b'away' b'.' b'gatherer' b'contacted' b'.' b'<eos>' b'During' b'the' b'development' b'of' b'their' b'death' b'eerie' b'between' b'September'
    b'27' b'and' b'various' b'definition' b'is' b'the' b'records' b'of' b'a' b'selective' b'planet' b';' b'U\xc3\xad' b'movies' b'explains' b'Kerry' b'the' b'game' b'"' b'Hersey'
    b'<unk>' b'"' b'into' b'those' b'in' b'Tigernach' b'documentary' b'research' b',' b'perhaps' b'<unk>' b'a' b'Buddhist' b'History' b'used' b'against' b'cheap' b'cats' b'.' b'The'
    b'site' b'led' b'civilians' b'in' b'as' b'prejudice' b',' b'none' b'of' b'alter' b',' b'and' b'serious' b'aspects' b'of' b'extinction' b',' b'albeit' b'to' b'fill'
    b'with' b'a' b'<unk>' b'that' b'is' b'shown' b'in' b'the' b'world' b'.' b'After' b'this' b'ground' b',' b'Humpty' b"'Malley" b'discusses' b'controllers' b'inside' b'"'
    b'gets' b'up' b'they' b'really' b'should' b'continue' b'with' b'that' b'after' b'far' b'.' b'There' b'makes' b'no' b'good' b'factors' b',' b'fast' b'or' b'country'
    b',' b'Jane' b'"' b'.' b'The' b'2004' b'\xe2\x80\x93' b'4' b'version' b'begins' b'entered' b'a' b'romance' b'with' b'the' b'history' b'of' b'Earth' b'which' b'year'
    b'.' b'These' b'chosen' b'arrangements' b'have' b'shown' b'the' b'best' b'intimate' b'source' b'who' b'be' b'depicted' b'from' b'the' b'environment' b'of' b'Egged' b',' b'with'
    b'missing' b'long' b'relationships' b'and' b'copper' b'Mary' b',' b'while' b'The' b'Jews' b'agreed' b'to' b'graves' b'.' b'She' b'can' b'tell' b'interfering' b'his' b'life'
    b'and' b'wants' b'to' b'be' b'used' b'addition' b'as' b'an' b'ash' b'Water' b'heir' b'like' b'him' b'to' b'die' b'.' b'It' b'would' b'be' b'possible'
    b'that' b'he' b'had' b'no' b'undercover' b'or' b'fewer' b'whatever' b'.' b'Even' b'work' b'of' b'the' b'throat' b'Energy' b'stone' b'olfactory' b'is' b'a' b'<unk>'
    b'of' b'Ceres' b'.' b'<eos>' b'<eos>' b'<eos>' b'=' b'Domnall' b'(' b'<unk>' b')' b'=' b'<eos>' b'<eos>' b'Crash' b'In' b'The' b'1930s' b',' b'invites'
    b'the' b'discovery' b'of' b'<unk>' b'.' b'<eos>' b'<eos>' b'=' b'=' b'=' b'Hyderabad' b'=' b'=' b'=' b'<eos>' b'<eos>' b'The' b'Feast' b'of' b'Independence'
    b"'s" b'<unk>' b'often' b'grows' b'in' b'of' b'02' b'November' b'1909' b'assaulted' b'an' b'informal' b'town' b'of' b'630' b'@-@' b'game' b'larger' b'action' b'.'
    b'The' b'first' b'in' b'Australia' b'until' b'favour' b'of' b'the' b'Treaty' b'of' b'The' b'Republic' b'of' b'Natural' b'Affairs' b',' b'was' b'dead' b'on' b'the'
    b'Army' b'of' b'Information' b'by' b'Hungary' b'.' b'The' b'Sun' b'said' b'that' b'this' b'would' b'be' b'under' b'used' b',' b'with' b'common' b'issues' b'during'
    b'many' b'countries' b'.' b'The' b'two' b'conveyed' b'Shapur' b'in' b'rural' b'colonies' b'and' b'the' b'Hoysala' b'race' b'were' b'discovered' b'because' b'it' b'is' b'slept'
    b'in' b'the' b'U.S.' b'Ocean' b'off' b'that' b'the' b'astronomical' b'state' b'were' b'assassinated' b'.' b'However' b',' b'stagnation' b'put' b'works' b'with' b'more' b'than'
    b'11' b',' b'that' b'two' b'months' b'earlier' b'than' b'two' b'years' b'.' b'<eos>' b'<eos>' b'=' b'=' b'Construction' b'=' b'=' b'<eos>' b'<eos>' b'Note'
    b'is' b'known' b'as' b'unmarried' b'trans' b',' b'such' b'as' b'its' b'key' b'faith' b'and' b'Polynesian' b'output' b'by' b'<unk>' b'builders' b'.' b'Dench' b','
    b'it' b'is' b'also' b'known' b'to' b'first' b'prove' b'sawmill' b'to' b'rejoin' b',' b'the' b'island' b'itself' b'.' b'It' b'function' b'attracted' b'Alph' b'beaks'
    b',' b'initially' b'direct' b'than' b'other' b'storytelling' b',' b'eventually' b'Hypacrosaurus' b',' b'<unk>' b'.' b'With' b'the' b'soil' b',' b'sy\xc4\x81dv\xc4\x81da' b',' b'this' b'from'
    b'Ireland' b'descended' b'from' b'limb' b'and' b'pinned' b'with' b'food' b',' b'particularly' b'applied' b'to' b'<unk>' b'by' b'Div\xc4\x81kara' b'and' b'the' b'bird' b',' b'which'
    b'<unk>' b'the' b'International' b'Boat' b'eats' b'Department' b'<unk>' b'(' b'for' b'33' b'years' b'by' b'other' b'subspecies' b')' b'.' b'They' b'are' b'moved' b'to'





.. GENERATED FROM PYTHON SOURCE LINES 191-196

It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:

.. GENERATED FROM PYTHON SOURCE LINES 196-241

.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into bsz parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the bsz batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].reshape(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)








.. GENERATED FROM PYTHON SOURCE LINES 242-251

4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values

.. GENERATED FROM PYTHON SOURCE LINES 251-259

.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): DynamicQuantizedLinear(in_features=256, out_features=33278, dtype=torch.qint8, qscheme=torch.per_tensor_affine)
    )




.. GENERATED FROM PYTHON SOURCE LINES 260-262

The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:

.. GENERATED FROM PYTHON SOURCE LINES 262-271

.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Size (MB): 113.944608
    Size (MB): 79.739034




.. GENERATED FROM PYTHON SOURCE LINES 272-276

Second, we see faster inference time, with no difference in evaluation loss:

Note: we set the number of threads to one for single threaded comparison, since quantized
models run single threaded.

.. GENERATED FROM PYTHON SOURCE LINES 276-288

.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 215.0
    loss: 5.168
    elapsed time (seconds): 108.2




.. GENERATED FROM PYTHON SOURCE LINES 289-300

Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 5 minutes  31.990 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
