
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "advanced/dynamic_quantization_tutorial.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(beta) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we will apply the easiest form of quantization -
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.

.. GENERATED FROM PYTHON SOURCE LINES 22-32

.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F








.. GENERATED FROM PYTHON SOURCE LINES 33-39

1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.

.. GENERATED FROM PYTHON SOURCE LINES 39-73

.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))








.. GENERATED FROM PYTHON SOURCE LINES 74-82

2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.

.. GENERATED FROM PYTHON SOURCE LINES 82-132

.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')








.. GENERATED FROM PYTHON SOURCE LINES 133-141

3. Load the pre-trained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pre-trained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.

.. GENERATED FROM PYTHON SOURCE LINES 141-161

.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )




.. GENERATED FROM PYTHON SOURCE LINES 162-165

Now let's generate some text to ensure that the pre-trained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_

.. GENERATED FROM PYTHON SOURCE LINES 165-190

.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b'<unk>' b',' b'by' b'Union' b'de' b'Barack' b'Lake' b'head' b'.' b'That' b"'s" b'work' b'makes' b'a' b'young' b'diameter' b'of' b'lights' b'larger' b'than'
    b'<unk>' b'or' b'New' b'Zealand' b',' b'a' b'7' b'@.@' b'8' b'@-@' b'pounders' b',' b'with' b'three' b'goals' b'.' b'This' b'negative' b'energetic' b'has'
    b'poor' b'SbCl' b'Lawrence' b'survives' b'and' b'may' b'be' b'Romain' b'for' b'the' b'Nintendo' b'World' b'War' b',' b'but' b'having' b'impressive' b'Guitar' b'American' b'riverbed'
    b'unemployment' b'at' b'06' b'minutes' b',' b'before' b'disturbed' b'43' b'%' b'of' b'Ireland' b'.' b'diction' b'opens' b'the' b'term' b'emerges' b'in' b'intensification' b'by'
    b'the' b'eight' b'more' b'<unk>' b'installment' b'on' b'the' b'breeding' b'race' b'around' b'<eos>' b'painting' b'utilized' b'the' b'country' b'of' b'sixty' b'@-@' b'<unk>' b'characters'
    b'as' b'of' b'Ojibwe' b';' b'in' b'which' b'2' b'slowly' b'stories' b'are' b'unknown' b',' b'both' b'the' b'planet' b'referred' b'to' b'the' b'first' b'possession'
    b'of' b'the' b'second' b'time' b'at' b'the' b'world' b'with' b'a' b'supporter' b'of' b'olive' b'raising' b'the' b'beyond' b'\xc3\x97' b'minimum' b',' b'and' b'ill'
    b'million' b'volumes' b'intended' b'across' b'Six' b'century' b'differentiation' b'(' b'dark' b'consented' b')' b'but' b'black' b',' b'which' b'represents' b'a' b'number' b'of' b'displays'
    b'on' b'their' b'journey' b'.' b'<eos>' b'Kalyanasundara' b'cars' b',' b'along' b'by' b'one' b'firms' b',' b'are' b'fitted' b'.' b'<eos>' b'A' b'small' b'Northern'
    b'Catholic' b'analysis' b',' b'a' b'living' b'plot' b'game' b',' b'is' b'clearly' b'managed' b'to' b'open' b'an' b'beam' b'of' b'whereabouts' b'and' b'an' b'lighter'
    b'location' b',' b'especially' b'in' b'its' b'interior' b'and' b'final' b'leg' b',' b'which' b'they' b'learned' b'as' b'far' b'Alfred' b'as' b'they' b'resulted' b';'
    b'however' b',' b'<unk>' b',' b'Dengeki' b',' b'and' b'exposed' b'are' b'seen' b'in' b'effects' b'.' b'Four' b'<unk>' b'are' b'listed' b'is' b'submitted' b','
    b'though' b'they' b'changed' b',' b'conservation' b',' b'A48' b',' b'or' b'<unk>' b'.' b'They' b'could' b'men' b':' b'An' b'rise' b'which' b'\xc3\x8dmar' b'will'
    b'attract' b'bird' b'way' b'or' b'think' b'its' b'range' b'and' b'a' b'mix' b'of' b'contact' b'.' b'The' b'kakapo' b'distinguished' b'digging' b'at' b'Louis' b'please'
    b'following' b'the' b'portraits' b'of' b'the' b'bird' b'.' b'In' b'his' b'then' b'anthropomorphic' b'version' b',' b'a' b'image' b'of' b'3' b'@.@' b'135' b'%'
    b'similarly' b'shrinks' b'while' b'touching' b'by' b'The' b'"' b'Scout' b'"' b'polar' b'species' b'over' b'over' b'a' b'apse' b',' b'how' b'<unk>' b']' b'basilica'
    b'across' b'the' b'bush' b'.' b'(' b'261' b')' b'is' b'a' b'common' b'object' b';' b'the' b'ship' b'takes' b'place' b'a' b'viewer' b',' b'used'
    b'as' b'the' b'"' b'robe' b'into' b'striking' b'Welsh' b'efficiently' b'platformer' b'a' b'sums' b'"' b'as' b'intracellular' b'pays' b'entirely' b'she' b'chicks' b'into' b'devised'
    b'aircraft' b'.' b'They' b'assumed' b'it' b'much' b'intermittent' b'across' b'that' b'population' b'electrical' b'eyes' b',' b'a' b'explosive' b'core' b'from' b'<unk>' b'(' b'cell'
    b'<unk>' b')' b';' b'and' b'for' b'sea' b',' b'there' b'is' b'method' b'of' b'one' b'female' b',' b'most' b'probably' b'lenient' b'or' b'fluorescent' b'whether'
    b'rated' b'"' b'I' b"'ll" b'be' b'stuff' b')' b'.' b'"' b'<eos>' b'Ironically' b',' b'in' b'wartime' b',' b'it' b'head' b'a' b'confession' b'in'
    b'paper' b',' b'in' b'which' b'they' b'discovers' b',' b'which' b'presents' b'a' b'finely' b'relationship' b'to' b'96' b'\xe2\x80\x93' b'1' b'in' b'the' b'night' b'of'
    b'the' b'forest' b"'s" b'last' b'thematic' b'upper' b'of' b'Valkyria' b'One' b'.' b'It' b'has' b'two' b'proposed' b'1127' b',' b'with' b'<unk>' b',' b'Joyful'
    b',' b'and' b'harmony' b'using' b'fledging' b',' b'which' b'appears' b'the' b'island' b"'s" b'association' b'on' b'Oliver' b'<unk>' b',' b'as' b'it' b'may' b'Andhra'
    b'Steps' b'.' b'Hartley' b'supports' b'beneficial' b'towards' b'four' b'edges' b',' b'and' b'in' b'general' b',' b'technology' b'and' b'birds' b'are' b'<unk>' b'are' b'inside'
    b'before' b'<unk>' b'.' b'He' b'walks' b'its' b'punishment' b'to' b'a' b'pure' b',' b'and' b'arrived' b'with' b'just' b'18' b'hours' b',' b'resulting' b'after'
    b'Yan' b'asthma' b'.' b'These' b'around' b'500' b'%' b'of' b'females' b'head' b':' b'has' b'a' b'planet' b'of' b'underwater' b'rhymes' b',' b'since' b'its'
    b'breeding' b'saint' b',' b'and' b'@-@' b'Canadian' b'frogs' b'similar' b';' b'the' b'nest' b'43' b'@.@' b'4' b'points' b'are' b'a' b'kitchen' b'consumed' b'less'
    b'than' b'once' b'being' b'at' b'home' b'.' b'In' b'1997' b',' b'"' b'Gofraid' b'to' b'sing' b'someone' b'has' b'the' b'same' b'consistent' b'features' b'nor'
    b'their' b'old' b'manufacturing' b',' b'but' b'it' b'is' b'good' b'and' b'able' b'.' b'"' b'Previously' b'by' b'this' b'eye' b',' b'the' b'original' b'<unk>'
    b',' b'Vaishnava' b'flightless' b',' b'and' b'others' b'This' b'cannot' b'be' b'seen' b'for' b'earth' b'.' b'"' b'slim' b'life' b',' b'money' b',' b'origin'
    b',' b'and' b'Crash' b'samples' b'everywhere' b'and' b'northwestern' b'far' b',' b'especially' b'overgrown' b'specialised' b'Shields' b'in' b'part' b'of' b'them' b',' b'providing' b'lines'
    b'and' b'age' b'of' b'its' b'bat' b'.' b'There' b'are' b'great' b'reports' b'of' b'way' b',' b'as' b'still' b'<unk>' b'two' b'or' b'two' b'<unk>'
    b'in' b'regeneration' b',' b'probably' b',' b'and' b'progress' b'and' b'story' b'of' b'individual' b'diabetes' b'was' b'increased' b'to' b'3' b'minutes' b',' b'which' b'will'
    b'be' b'distinguished' b'by' b'the' b'bird' b',' b'having' b'led' b'to' b'gray' b'his' b'things' b',' b'spearheaded' b'with' b'others' b'and' b'is' b'pointed' b'to'
    b'the' b'male' b'and' b'parasites' b'of' b'inhabits' b'tissues' b'.' b'A' b'Catholic' b'Briain' b'may' b'sustained' b'intensify' b'and' b'became' b'1920s' b'by' b'<unk>' b','
    b'or' b'fit' b'and' b'a' b'children' b'of' b'fruits' b'.' b'<eos>' b'<eos>' b'=' b'=' b'Preparations' b'=' b'=' b'<eos>' b'<eos>' b'A' b'spiral' b'breeding'
    b'documentary' b'of' b'transits' b'is' b'widely' b'hinted' b'.' b'Although' b'it' b'is' b'easy' b'so' b'spelled' b',' b'they' b'are' b'also' b'always' b',' b'as'
    b'may' b'synthesize' b'bodies' b'.' b'Ceres' b'also' b'periodically' b'range' b'between' b'droppings' b',' b'or' b'stages' b',' b'<unk>' b'@-@' b'cut' b'toxins' b',' b'even'
    b'in' b'weight' b',' b'as' b'value' b'@-@' b'like' b'almost' b'rapid' b',' b'they' b'then' b'depleted' b'when' b'however' b',' b'may' b'be' b'TBSA' b'or'
    b'leading' b'well' b'while' b'with' b'their' b'yellow' b'touching' b'sky' b'effect' b',' b'they' b'cannot' b'sounds' b'to' b'wild' b',' b'while' b'by' b'black' b','
    b'they' b'can' b'have' b'been' b'described' b'as' b'<unk>' b'.' b'Kakapo' b',' b'Germany' b'may' b'have' b'their' b'longer' b'was' b'all' b'due' b'to' b'similarity'
    b'and' b'useful' b'their' b'status' b'.' b'Nobody' b'asserts' b'this' b'earthstar' b'male' b'arose' b'on' b'never' b'to' b'look' b'positively' b'touch' b'.' b'One' b'distribution'
    b'to' b'have' b'crafted' b'exist' b',' b'such' b'as' b'pressures' b'as' b'their' b'material' b'or' b'<unk>' b',' b'Valley' b',' b'sometimes' b'charged' b'around' b'a'
    b'surface' b'element' b'to' b'leave' b'when' b'they' b'are' b'<unk>' b'.' b'In' b'contrast' b',' b'the' b'kakapo' b'associated' b'by' b'many' b'surviving' b'common' b'and'
    b'Mingrelian' b'.' b'There' b'have' b'become' b'unconfirmed' b'miners' b'yet' b'broadcasts' b'from' b'its' b'languages' b',' b'so' b'their' b'understory' b'starts' b',' b'to' b'tissues'
    b'at' b'vapor' b',' b'are' b'so' b'completed' b'.' b'The' b'eye' b'shelf' b'into' b'his' b'outer' b'distinctive' b'streetcars' b',' b'but' b'stretched' b',' b'then'
    b'they' b"'ve" b'astonished' b'other' b'kakapo' b'.' b'They' b'are' b'largely' b'somewhat' b'trained' b'on' b'any' b'other' b'Scenic' b',' b'Hairan' b'of' b'recommendations' b','
    b'which' b'are' b'easily' b'less' b'"' b'clear' b'like' b'Ottomans' b'"' b'.' b'<eos>' b'In' b'1969' b',' b'supervising' b'two' b'dogs' b'of' b'scientists' b','
    b'leg' b'seed' b'attacks' b'took' b'place' b'.' b'An' b'female' b'Merton' b'does' b'march' b'to' b'adulthood' b',' b'and' b'there' b'are' b'among' b'the' b'big'





.. GENERATED FROM PYTHON SOURCE LINES 191-196

It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:

.. GENERATED FROM PYTHON SOURCE LINES 196-241

.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into bsz parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the bsz batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].reshape(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)








.. GENERATED FROM PYTHON SOURCE LINES 242-251

4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values

.. GENERATED FROM PYTHON SOURCE LINES 251-259

.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): DynamicQuantizedLinear(in_features=256, out_features=33278, dtype=torch.qint8, qscheme=torch.per_tensor_affine)
    )




.. GENERATED FROM PYTHON SOURCE LINES 260-262

The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:

.. GENERATED FROM PYTHON SOURCE LINES 262-271

.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Size (MB): 113.944608
    Size (MB): 79.739034




.. GENERATED FROM PYTHON SOURCE LINES 272-276

Second, we see faster inference time, with no difference in evaluation loss:

Note: we set the number of threads to one for single threaded comparison, since quantized
models run single threaded.

.. GENERATED FROM PYTHON SOURCE LINES 276-288

.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 211.7
    loss: 5.168
    elapsed time (seconds): 112.3




.. GENERATED FROM PYTHON SOURCE LINES 289-300

Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 5 minutes  32.984 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
