
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "advanced/dynamic_quantization_tutorial.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(beta) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we will apply the easiest form of quantization -
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.

.. GENERATED FROM PYTHON SOURCE LINES 22-32

.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F








.. GENERATED FROM PYTHON SOURCE LINES 33-39

1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.

.. GENERATED FROM PYTHON SOURCE LINES 39-73

.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))








.. GENERATED FROM PYTHON SOURCE LINES 74-82

2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.

.. GENERATED FROM PYTHON SOURCE LINES 82-132

.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')








.. GENERATED FROM PYTHON SOURCE LINES 133-141

3. Load the pre-trained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pre-trained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.

.. GENERATED FROM PYTHON SOURCE LINES 141-161

.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )




.. GENERATED FROM PYTHON SOURCE LINES 162-165

Now let's generate some text to ensure that the pre-trained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_

.. GENERATED FROM PYTHON SOURCE LINES 165-190

.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b'equals' b'the' b'general' b'report' b',' b'so' b'Domnall' b'trained' b'his' b'performance' b'for' b'the' b'team' b'.' b'<eos>' b'<eos>' b'=' b'=' b'Architecture' b'='
    b'=' b'<eos>' b'<eos>' b'Hornung' b'received' b'his' b'Sanskrit' b'books' b'for' b'"' b'The' b'Arab' b'faith' b'of' b'labour' b'@-@' b'themed' b'work' b'"' b'when'
    b'he' b'said' b'that' b'to' b'the' b'FIA' b',' b'"' b'It' b'is' b'chord' b'"' b',' b'which' b'was' b'referred' b'to' b'in' b'<unk>' b'.'
    b'His' b'appearance' b'took' b'place' b'on' b'the' b'new' b'five' b'sessions' b'of' b'Raffles' b'.' b'That' b'52' b'or' b'married' b'fitzWarin' b'in' b'the' b'Oxford'
    b'Sea' b'described' b'by' b'Ross' b'FIA' b'@-@' b'age' b'slider' b',' b'invariably' b'.' b'Two' b'Ibrahima' b'produce' b'seasons' b'were' b'published' b'from' b'"' b'Through'
    b'a' b'seeds' b'"' b'and' b'itself' b'field' b'would' b'have' b'argued' b'it' b'could' b'be' b'avoided' b'.' b'In' b'2001' b"'s" b'Ivor' b'o.' b'William'
    b'characterised' b'the' b'20' b'and' b'factor' b'into' b'the' b'race' b',' b'which' b'hoped' b'that' b'these' b'problems' b'was' b'settled' b'.' b'He' b'<unk>' b'evaluate'
    b'passengers' b'under' b'the' b'team' b'for' b'the' b'character' b',' b'a' b'short' b'book' b'carried' b'by' b'Raffles' b'O' b"'Malley" b';' b'he' b'then' b'built'
    b'a' b'piano' b'direction' b'headgear' b'is' b'called' b'Van' b"'Malley" b'.' b'<eos>' b'<eos>' b'=' b'=' b'Reception' b'=' b'=' b'<eos>' b'<eos>' b'<eos>' b'='
    b'=' b'=' b'Earth' b'=' b'=' b'=' b'<eos>' b'<eos>' b'Until' b'the' b'Southern' b'Thai' b'War' b',' b'extrasolar' b'Female' b'Fruit' b'listed' b'on' b'October'
    b'27' b',' b'2010' b'.' b'It' b'was' b'part' b'of' b'San' b'One' b'song' b'"' b'The' b'O' b'History' b'in' b"'" b'doo' b'hints' b'and'
    b"'" b'monarchs' b"'" b'in' b'Cleveland' b'take' b'setting' b'to' b'look' b'for' b'a' b'bit' b'choice' b'...' b'recommended' b'.' b'"' b'<eos>' b'<unk>' b'musicians'
    b'greatly' b'echoed' b'Lucasfilm' b'Omar' b',' b'including' b'Magadheera' b'and' b'Wales' b'and' b'guitar' b'.' b'<eos>' b'You' b'archive' b'returned' b'to' b'Wiesbaden' b',' b'the'
    b'general' b'race' b'.' b'<eos>' b'O' b"'Malley" b'initially' b'became' b'a' b'fast' b'independent' b',' b'25' b'\xe2\x80\x93' b'21' b'sequel' b'in' b'silence' b'.' b'By'
    b'mid' b'@-@' b'July' b',' b'Pop' b'<eos>' b'The' b'FISA' b'family' b'saw' b'O' b"'Malley" b'with' b'Prime' b"'t" b'see' b'from' b'a' b'market' b'.'
    b'To' b'make' b'the' b'first' b'time' b'in' b'a' b'term' b'Bowl' b'over' b'Bernis' b',' b'Sweden' b',' b'Ingrid' b':' b'"' b'...' b'they' b'think'
    b'every' b'pretty' b'attempt' b'or' b'very' b'conduct' b'"' b'.' b'This' b'scenario' b'criticized' b'their' b'limited' b'amount' b',' b'<unk>' b'glowing' b'Book' b',' b'notes'
    b'whether' b'he' b'assumed' b'"' b'but' b'you' b'have' b'an' b'threat' b'into' b'themselves' b',' b'a' b'whole' b'one' b']' b'of' b'their' b'voice' b'ever'
    b'has' b'developed' b'off' b'every' b'nomination' b'.' b'"' b'The' b'Row' b'task' b'of' b'The' b'DVD' b'Elizabeth' b'<unk>' b'@-@' b'<unk>' b'Sun' b'Hartman' b'heard'
    b'their' b'analysis' b'to' b'praise' b'variant' b'in' b'The' b'United' b'States' b'in' b'1911' b'itself' b'(' b'\xe7\x81\xab\xe7\xa4\xae' b')' b'.' b'<eos>' b'Prior' b'to' b'Kevin'
    b"'Malley" b',' b'friend' b'probes' b'withdrew' b'after' b'a' b'plaque' b'between' b'Chrono' b'One' b'and' b'the' b'eight' b'tour' b',' b'referring' b'to' b'<unk>' b','
    b'Mosley' b'were' b'named' b'largely' b'acquainted' b'.' b'James' b'dubbed' b'for' b'the' b'farmer' b'Rawlings' b'River' b'Lee' b'constraints' b'at' b'the' b'Black' b'Film' b'Festival'
    b'.' b'High' b'basketball' b'outposts' b'include' b'future' b'should' b'be' b'used' b'to' b'prepare' b',' b'forcing' b'an' b'fore' b'opera' b'winning' b'by' b'5' b'@.@'
    b'5' b'%' b'per' b'year' b'.' b'<eos>' b'<eos>' b'=' b'=' b'Tenth' b'properties' b'=' b'=' b'<eos>' b'<eos>' b'The' b'Crimson' b'tenets' b'entered' b'a'
    b'rate' b'of' b'Guitar' b'5' b'when' b'purchased' b'containing' b'month' b',' b'on' b'October' b'27' b',' b'2007' b'.' b'<eos>' b'The' b'controversy' b'lost' b'a'
    b'compilation' b'controller' b'complex' b'<unk>' b',' b'Uyghurs' b'and' b'asking' b'the' b'all' b'star' b'to' b'the' b'Michigan' b'Rock' b'Power' b'Tech' b'displaced' b'to' b'protect'
    b'himself' b'when' b'they' b'carried' b'on' b'.' b'Within' b'development' b',' b'this' b'element' b'is' b'declines' b'to' b'place' b',' b'with' b'victories' b'centric' b'by'
    b'March' b'12' b',' b'2016' b'\xe2\x80\x93' b'01' b',' b'and' b'on' b'the' b'subject' b'of' b'three' b'weeks' b'.' b'With' b'2004' b',' b'Mosley' b'caused'
    b'prompted' b'East' b'stage' b',' b'however' b'as' b'weakest' b'as' b'possible' b'.' b'The' b'identity' b'were' b'quickly' b'and' b'<unk>' b'prompt' b'property' b',' b'while'
    b'low' b'remained' b'.' b'<eos>' b'<eos>' b'=' b'=' b'Publication' b'=' b'=' b'<eos>' b'<eos>' b'<eos>' b'=' b'=' b'Charts' b'recently' b'=' b'=' b'<eos>'
    b'<eos>' b'Aside' b'from' b'two' b'other' b'differences' b'between' b'golf' b'and' b'two' b'islands' b'which' b'were' b'eventually' b'reduced' b'to' b'work' b'in' b'shield' b','
    b'an' b'commission' b'was' b'cast' b'(' b'recognition' b'flax' b')' b',' b'as' b'this' b'stretches' b'.' b'<eos>' b'The' b'final' b'moved' b'to' b'west' b','
    b'a' b'rather' b'low' b'de' b'listed' b'bird' b',' b'is' b'held' b'in' b'Dollodon' b'considered' b'local' b'chapters' b'in' b'areas' b',' b'and' b'started' b'to'
    b'stabilize' b'northeast' b'as' b'it' b'has' b'once' b'moved' b'into' b'their' b'description' b'.' b'It' b'is' b'General' b'but' b'alone' b'landed' b'into' b'groin' b'Hubble'
    b'Giacomo' b'Clark' b',' b'considered' b'Mark' b'r' b',' b'who' b'finally' b'sang' b'it' b'as' b'Coke' b'director' b'that' b'"' b'It' b'may' b'be' b'somebody'
    b'immediately' b'by' b'or' b'is' b'amazing' b'.' b'methyl' b'(' b'layered' b'Ingham' b',' b'have' b'heard' b'to' b'sides' b'Hampton' b'.' b'But' b'I' b'life'
    b'we' b'live' b'in' b'Heaven' b'in' b'my' b'ambiguity' b'as' b'if' b'they' b'he' b'could' b'find' b'as' b'clear' b'they' b"'t" b'propel' b'it' b'.'
    b'...' b'it' b'would' b'be' b'modified' b'down' b'this' b'game' b'until' b'at' b'the' b'months' b'of' b'it' b'in' b'world' b',' b'after' b'a' b'compound'
    b'of' b'little' b'<unk>' b',' b'can' b'be' b'traced' b'water' b'inside' b',' b'<unk>' b'song' b'it' b'is' b'well' b'invalid' b'and' b'easy' b'.' b'"'
    b'<unk>' b'actresses' b'told' b'Geastrum' b'<unk>' b"'s" b'large' b'v.' b'conferences' b'is' b'deployed' b'to' b'be' b'uniform' b',' b'and' b'felt' b'that' b'"' b'everything'
    b'is' b'incredibly' b'<unk>' b'and' b'<unk>' b'of' b'fresh' b'mating' b'.' b'"' b'Like' b'few' b'profits' b'of' b'the' b'suppressed' b'asteroid' b'advisers' b',' b'while'
    b'Northern' b'Mad' b',' b'138' b'short' b'Feeling' b'Harry' b'<unk>' b'wrote' b'that' b'it' b'also' b'slipped' b'in' b'the' b'Chichester' b'form' b'as' b'water' b'differentiation'
    b'.' b'Nonetheless' b',' b'typically' b'on' b'the' b'same' b'play' b',' b'it' b'attained' b'many' b'or' b'one' b'females' b',' b'with' b'many' b'<unk>' b'Omar'
    b',' b'named' b'and' b'awaited' b'smokers' b'.' b'He' b'displaced' b'structures' b'of' b'feeling' b'Chinese' b'claret' b',' b'but' b'is' b'probably' b'only' b'a' b'sophisticated'
    b'arc' b',' b'as' b'they' b'are' b'imposed' b'in' b'massive' b'back' b'problems' b'.' b'As' b'many' b'are' b'naked' b',' b'winds' b'are' b'completely' b'just'
    b'distant' b'.' b'For' b'other' b'gross' b',' b'they' b'remarked' b'they' b'are' b'doesn' b"'Malley" b',' b'most' b'likely' b'to' b'prove' b'goods' b',' b'or'
    b'discover' b'up' b'.' b'<unk>' b'can' b'be' b'another' b'difficult' b'fortnight' b'.' b'Further' b',' b'Texas' b',' b'with' b'they' b'showed' b'up' b'the' b'<unk>'
    b'firm' b'in' b'far' b'Marjorie' b'feathers' b'.' b'volunteer' b',' b'they' b'then' b'absorbed' b'but' b'others' b'are' b'deeply' b'biggest' b'over' b'their' b'life' b'to'
    b'conduct' b'<unk>' b'.' b'They' b'are' b'Hamilton' b'with' b'consciousness' b',' b'strength' b',' b'behaviour' b',' b'Sayuri' b',' b'Homarinus' b',' b'Eurasian' b',' b'and'
    b'behavioral' b'radiation' b'policemen' b'.' b'For' b'the' b'act' b'and' b'dating' b'on' b',' b'in' b'1908' b',' b'it' b'(' b'formerly' b'spelled' b'by' b'relation'





.. GENERATED FROM PYTHON SOURCE LINES 191-196

It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:

.. GENERATED FROM PYTHON SOURCE LINES 196-241

.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into bsz parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the bsz batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].reshape(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)








.. GENERATED FROM PYTHON SOURCE LINES 242-251

4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values

.. GENERATED FROM PYTHON SOURCE LINES 251-259

.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): DynamicQuantizedLinear(in_features=256, out_features=33278, dtype=torch.qint8, qscheme=torch.per_tensor_affine)
    )




.. GENERATED FROM PYTHON SOURCE LINES 260-262

The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:

.. GENERATED FROM PYTHON SOURCE LINES 262-271

.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Size (MB): 113.944608
    Size (MB): 79.739034




.. GENERATED FROM PYTHON SOURCE LINES 272-276

Second, we see faster inference time, with no difference in evaluation loss:

Note: we set the number of threads to one for single threaded comparison, since quantized
models run single threaded.

.. GENERATED FROM PYTHON SOURCE LINES 276-288

.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 225.9
    loss: 5.168
    elapsed time (seconds): 118.7




.. GENERATED FROM PYTHON SOURCE LINES 289-300

Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 5 minutes  53.697 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
