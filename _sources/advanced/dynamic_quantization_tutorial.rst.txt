
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "advanced/dynamic_quantization_tutorial.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(beta) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we will apply the easiest form of quantization -
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.

.. GENERATED FROM PYTHON SOURCE LINES 22-32

.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F








.. GENERATED FROM PYTHON SOURCE LINES 33-39

1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.

.. GENERATED FROM PYTHON SOURCE LINES 39-73

.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))








.. GENERATED FROM PYTHON SOURCE LINES 74-82

2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.

.. GENERATED FROM PYTHON SOURCE LINES 82-132

.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')








.. GENERATED FROM PYTHON SOURCE LINES 133-141

3. Load the pre-trained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pre-trained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.

.. GENERATED FROM PYTHON SOURCE LINES 141-161

.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )




.. GENERATED FROM PYTHON SOURCE LINES 162-165

Now let's generate some text to ensure that the pre-trained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_

.. GENERATED FROM PYTHON SOURCE LINES 165-190

.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b'from' b'revenues' b'a' b'group' b'of' b'before' b'can' b'be' b'formerly' b'<unk>' b'.' b'<eos>' b'The' b'world' b"'s" b'ballast' b'and' b'a' b'combination' b'with'
    b'Polynesian' b'immigration' b'from' b'3' b'%' b'in' b'the' b'work' b',' b'running' b'to' b'40' b'miles' b';' b'though' b'15' b'of' b'the' b'kakapo' b'has'
    b'arrested' b'former' b'text' b'outright' b'made' b'withdrawal' b'up' b'to' b'identify' b'.' b'Common' b'starlings' b'indicate' b'that' b'those' b'of' b'a' b'large' b'older' b'component'
    b'should' b'be' b'conceded' b'to' b'each' b'end' b'of' b'their' b'homes' b"'s" b'cereal' b'lesson' b',' b'and' b'adding' b'that' b'while' b'there' b'was' b'no'
    b'twisted' b'evidence' b'of' b'Poland' b'with' b'stop' b'considerably' b'with' b'an' b'planet' b'.' b'This' b'specimen' b'is' b'funded' b'by' b'John' b'Ahk' b'shapes' b'in'
    b'1957' b'.' b'<eos>' b'<unk>' b'in' b'winemaking' b'was' b'paved' b'at' b'a' b'high' b'cost' b',' b'considering' b'multiplayer' b'importance' b',' b'the' b'same' b'when'
    b'do' b'be' b'important' b'to' b'increase' b'for' b'both' b'other' b'raiding' b'teams' b'.' b'In' b'a' b'row' b'that' b'could' b'speak' b'to' b'inequality' b','
    b'their' b'and' b'think' b';' b'large' b'1641' b'inhabit' b'the' b'later' b'predators' b'.' b'When' b'they' b'were' b'driven' b'to' b'return' b'soldiers' b'with' b'clouds'
    b',' b'it' b'occurs' b'wagon' b'in' b'Ranulf' b'by' b'educational' b'stragglers' b'.' b'<eos>' b'foster' b'@-@' b'iron' b'bodies' b'Mars' b'held' b',' b'a' b'period'
    b'to' b'leave' b'a' b'change' b'or' b'bird' b'<unk>' b'system' b'.' b'These' b'<unk>' b'<unk>' b'<unk>' b'khani' b'Adams' b'Island' b',' b'a' b'<unk>' b'officer'
    b"'s" b'<unk>' b',' b'Anna' b'Tyrrell' b'.' b'This' b'hands' b'allowed' b'the' b'mission' b'from' b'a' b'gentleman' b'distribution' b';' b'thought' b'"' b'Boulder' b'needs'
    b',' b'however' b',' b'is' b'as' b'it' b'makes' b'a' b'kind' b'of' b'birds' b'traditional' b'than' b'other' b'path' b',' b'but' b'why' b'emit' b'less'
    b'40' b'years' b',' b'the' b'female' b'is' b'both' b'its' b'bound' b'disciple' b'is' b'based' b'in' b'rendering' b'it' b'cloth' b',' b'and' b'the' b'larvae'
    b'have' b'modernize' b'a' b'listener' b'so' b'they' b'find' b'<unk>' b'and' b'1012' b'exercises' b'"' b',' b'and' b'noted' b'it' b'was' b'"' b'permitted' b'['
    b'threatened' b']' b'a' b'year' b'with' b'every' b'good' b'private' b'upper' b'turn' b'once' b'to' b'play' b'to' b'avoid' b'if' b'they' b'are' b'regarded' b'as'
    b'known' b'<unk>' b'"' b'for' b'compete' b'was' b'capable' b'of' b'trillion' b'pew' b'.' b'There' b'are' b'little' b'evidence' b'of' b'intricate' b',' b'stating' b'for'
    b'surveillance' b'.' b'Becker' b'also' b'chose' b'the' b'boy' b'@-@' b'<unk>' b',' b'and' b'<unk>' b'to' b'establish' b'many' b'late' b'witnesses' b'sure' b'that' b'they'
    b'do' b'not' b'perceive' b'birds' b'and' b'@-@' b'blown' b'different' b'feathers' b'in' b'place' b',' b'unlike' b'food' b'.' b'Further' b'advice' b'have' b'also' b'recorded'
    b'a' b'signature' b'one' b'and' b'one' b'behind' b'.' b'She' b'is' b'accessible' b';' b'it' b'may' b'have' b'been' b'powered' b'by' b'their' b'<unk>' b'mother'
    b'(' b'<unk>' b')' b'.' b'Spirits' b'is' b'a' b'mycorrhizal' b'person' b'for' b',' b'becoming' b'capable' b'a' b'manner' b'or' b'can' b'be' b'cured' b'containing'
    b'aquatic' b',' b'hanging' b',' b'and' b'others' b',' b'and' b'insignificant' b'God' b'.' b'This' b'anemia' b'is' b'moving' b'to' b'<unk>' b'and' b'may' b'be'
    b'allowed' b'to' b'sit' b'as' b'bandit' b'concentrate' b'before' b'they' b'eat' b'thus' b'together' b'.' b'These' b'help' b'throughout' b'play' b',' b'affecting' b'their' b'efforts'
    b'on' b'<unk>' b'Delta' b'Jurassic' b'under' b'the' b'dark' b'Benedictine' b'Awareness' b'(' b'Dublin' b')' b',' b'a' b'small' b'sign' b'of' b'Ceres' b'than' b'one'
    b'who' b'Penelope' b'becomes' b'accomplished' b'.' b'In' b'the' b'other' b'hand' b',' b'each' b'of' b'be' b'<unk>' b',' b'regular' b'by' b'brown' b'as' b'they'
    b'simply' b'accounted' b'because' b'.' b'There' b'are' b'poor' b'widespread' b'territory' b'of' b'behaviour' b'where' b'parts' b'of' b'mistletoe' b'.' b'<unk>' b'sounds' b'through' b'<unk>'
    b'deteriorating' b',' b'at' b'a' b'46' b':' b'2' b'.' b'Where' b'30' b'@.@' b'9' b'or' b'half' b'of' b'the' b'other' b'polar' b'enemy' b'catch'
    b'\xe2\x80\x94' b'he' b'appears' b'a' b'six' b'@-@' b'year' b'@-@' b'old' b'by' b'containers' b',' b'Heller' b',' b'as' b'a' b'food' b'star' b'.' b'In'
    b'required' b',' b'the' b'kakapo' b'(' b'FOCA' b')' b'have' b'electronegative' b'coloured' b'damage' b'.' b'Within' b'a' b'number' b'of' b'birds' b',' b'the' b'path'
    b'armored' b',' b'and' b'give' b'<unk>' b',' b'by' b'longer' b'clumps' b',' b'Theroux' b'as' b'closely' b'as' b'sometimes' b'beautiful' b',' b'has' b'a' b'DFC'
    b'of' b'high' b'people' b'.' b'The' b'Isle' b'of' b'genetic' b'behaviour' b'is' b'present' b'by' b'<unk>' b'.' b'It' b'was' b'eaten' b'by' b'convection' b'often'
    b'serve' b'as' b'the' b'bird' b',' b'thus' b'they' b'may' b'present' b'<unk>' b'.' b'They' b'also' b'proceeded' b'rapidly' b'at' b'over' b'10' b'%' b'notes'
    b'once' b'always' b'to' b'prevent' b'apparel' b'.' b'Kit' b"'s" b'starting' b'bodies' b'contain' b'by' b'posture' b'support' b'they' b'thought' b'or' b'food' b'.' b'<eos>'
    b'Mycena' b'boat' b'(' b'The' b'title' b'of' b'Intelligence' b'<unk>' b'sculpture' b')' b'has' b'unique' b'revision' b'.' b'<eos>' b'In' b'spite' b'of' b'a' b'woman'
    b'slightly' b',' b'Ceres' b'may' b'be' b'males' b',' b'to' b'connect' b'banks' b';' b'they' b'Fokker' b'research' b'from' b'sodium' b'Ibarra' b'.' b'As' b'they'
    b'<unk>' b'their' b'origin' b',' b'these' b'Maasai' b'can' b'cause' b'way' b'Drive' b',' b'although' b'otherwise' b',' b'even' b'often' b'.' b'Significant' b'infections' b'('
    b'fruit' b'possible' b')' b'come' b'to' b'influence' b'expression' b',' b'Sylvia' b'and' b'perception' b'toward' b'their' b'<unk>' b'dress' b'on' b'its' b'getting' b'.' b'<eos>'
    b'At' b'the' b'first' b'time' b'as' b'a' b'monitoring' b',' b'they' b'gives' b'ignore' b'an' b'<unk>' b'of' b'alarm' b'<unk>' b',' b'or' b'the' b'effects'
    b'of' b'spurs' b'much' b'biological' b',' b'or' b'to' b'approach' b'happiness' b',' b'in' b'2006' b'.' b'These' b'loops' b'are' b'positioned' b'when' b'triangular' b'females'
    b'are' b'<unk>' b'.' b'<eos>' b'Males' b'will' b'be' b'converted' b'to' b'effective' b',' b'or' b'@-@' b'yellow' b'or' b"'i" b'immune' b'for' b'their' b'pets'
    b'.' b'Tal' b'have' b'each' b'one' b'arrangement' b'and' b'streams' b'of' b'the' b'angular' b'relationship' b'on' b'sides' b'and' b'minerals' b'.' b'A' b'attendant' b'has'
    b'shown' b'a' b'liquid' b'firm' b'by' b'nine' b'food' b'buff' b'compartments' b',' b'about' b'10' b'.' b'The' b'spectral' b'kg' b'birds' b'is' b'shown' b'.'
    b'Another' b'eggs' b',' b'a' b'common' b'<unk>' b'reported' b',' b'was' b'introduced' b'from' b'<unk>' b'<unk>' b'where' b'Mariana' b'feels' b'broadside' b'14' b',' b'they'
    b'constantly' b'culminated' b'before' b'a' b'thin' b',' b'smooth' b'can' b'fight' b'.' b'For' b'example' b',' b'little' b'2015' b',' b'still' b'they' b'tell' b'food'
    b'.' b'<eos>' b'An' b'elderly' b'adult' b'image' b'is' b'within' b'the' b'island' b',' b'as' b'the' b'scope' b'of' b'this' b'under' b'several' b'times' b'of'
    b'bird' b'proteins' b'.' b'Through' b'this' b',' b'while' b'such' b',' b'most' b'walking' b'the' b'Arabian' b'planet' b'may' b'seem' b'to' b'break' b'silicon' b'Iconography'
    b'.' b'Based' b',' b'the' b'kakapo' b'Administrative' b'marrow' b'has' b'limited' b'cardiac' b'prognosis' b';' b'the' b'little' b'step' b'to' b'prevent' b'eggs' b'their' b'veins'
    b'and' b'way' b'from' b'his' b'eggs' b'movement' b'.' b'These' b'Select' b'galericulata' b'(' b'panther' b')' b'calls' b'comparable' b'to' b'declines' b'by' b'"' b'second'
    b'"' b'parrot' b'.' b'Since' b'they' b'felt' b'that' b'speculations' b'wing' b'activity' b'might' b'insert' b'his' b'native' b'philosophy' b'.' b'When' b'they' b'are' b'they'
    b'adjusting' b'hypothesis' b',' b'Bird' b'navigation' b'have' b'his' b'average' b'to' b'every' b'food' b',' b'but' b'well' b'as' b'they' b'total' b'<unk>' b'.' b'According'
    b'to' b'Belgium' b',' b'they' b'can' b'Hutzel' b'seductress' b'up' b',' b'though' b'some' b'birds' b'have' b'no' b'light' b'calls' b'.' b'<eos>' b'A' b'southeastern'





.. GENERATED FROM PYTHON SOURCE LINES 191-196

It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:

.. GENERATED FROM PYTHON SOURCE LINES 196-241

.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into bsz parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the bsz batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].reshape(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)








.. GENERATED FROM PYTHON SOURCE LINES 242-251

4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values

.. GENERATED FROM PYTHON SOURCE LINES 251-259

.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): DynamicQuantizedLinear(in_features=256, out_features=33278, dtype=torch.qint8, qscheme=torch.per_tensor_affine)
    )




.. GENERATED FROM PYTHON SOURCE LINES 260-262

The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:

.. GENERATED FROM PYTHON SOURCE LINES 262-271

.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Size (MB): 113.944608
    Size (MB): 79.739034




.. GENERATED FROM PYTHON SOURCE LINES 272-276

Second, we see faster inference time, with no difference in evaluation loss:

Note: we set the number of threads to one for single threaded comparison, since quantized
models run single threaded.

.. GENERATED FROM PYTHON SOURCE LINES 276-288

.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 192.8
    loss: 5.168
    elapsed time (seconds): 99.8




.. GENERATED FROM PYTHON SOURCE LINES 289-300

Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 5 minutes  1.058 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
