
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "advanced/dynamic_quantization_tutorial.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(beta) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we will apply the easiest form of quantization -
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.

.. GENERATED FROM PYTHON SOURCE LINES 22-32

.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F








.. GENERATED FROM PYTHON SOURCE LINES 33-39

1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.

.. GENERATED FROM PYTHON SOURCE LINES 39-73

.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))








.. GENERATED FROM PYTHON SOURCE LINES 74-82

2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.

.. GENERATED FROM PYTHON SOURCE LINES 82-132

.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')








.. GENERATED FROM PYTHON SOURCE LINES 133-141

3. Load the pre-trained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pre-trained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.

.. GENERATED FROM PYTHON SOURCE LINES 141-161

.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )




.. GENERATED FROM PYTHON SOURCE LINES 162-165

Now let's generate some text to ensure that the pre-trained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_

.. GENERATED FROM PYTHON SOURCE LINES 165-190

.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b',' b'who' b'confronted' b'out' b'over' b'Kifino' b'erotic' b'.' b'<eos>' b'Following' b'final' b'jobs' b',' b'a' b'large' b'Armenia' b'allowing' b'envoy' b'on' b'other'
    b'languages' b'of' b'large' b'skin' b'traffic' b'.' b'Montrose' b'indicate' b'"' b'errors' b'Warner' b'"' b'guards' b'that' b'were' b'"' b'six' b'months' b',' b'winter'
    b',' b'they' b'limbs' b'more' b'.' b'"' b'Daily' b'Day' b'is' b'envisaged' b'in' b'February' b'2009' b'scoring' b'greater' b'plantations' b'April' b'22' b',' b'2006'
    b',' b'and' b'the' b'church' b'was' b'first' b'nominated' b'.' b'Lanois' b'also' b'won' b'Football' b'States' b',' b'in' b'August' b'2004' b',' b'a' b'1960s'
    b'at' b'the' b'Barre' b'Development' b'Park' b'Video' b'@-@' b'Papal' b'School' b'.' b'The' b'production' b'contains' b'how' b'her' b'possible' b'streamers' b'are' b'killed' b';'
    b'as' b'having' b'more' b'than' b'20' b'million' b'copies' b'(' b'meet' b'as' b'their' b'<unk>' b')' b'that' b'are' b'likely' b'b' b'space' b',' b'it'
    b'was' b'fairly' b'executed' b'and' b'nearly' b'one' b',' b'and' b'a' b'small' b',' b'discussion' b'that' b'is' b'<unk>' b'in' b'any' b',' b'ocean' b','
    b'the' b'rest' b'of' b'all' b'1986' b'live' b'their' b'blue' b'Collection' b',' b'as' b'it' b'<unk>' b'authority' b'on' b'1' b'December' b'1801' b'.' b'1837'
    b'in' b'the' b'Times' b',' b'the' b'rooted' b'for' b'the' b'annual' b'version' b'must' b'be' b'modified' b'at' b'least' b'had' b'prevented' b';' b'generally' b'in'
    b'sites' b',' b"'" b'Brown' b',' b'and' b'on' b'it' b'in' b'a' b'fractured' b'beak' b'or' b'friendly' b'surface' b'responses' b'around' b'a' b'fear' b'front'
    b'of' b'twenty' b'since' b'Europe' b"'" b',' b'and' b'their' b'one' b'@-@' b'largest' b'vision' b'of' b'a' b'transit' b':' b'"' b'I' b"'ve" b'could'
    b'destroy' b'it' b',' b'Mosley' b'stand' b'at' b'2' b"'" b';' b'<unk>' b'game' b'first' b'issue' b',' b'<unk>' b'complex' b'into' b'reforms' b'and' b'his'
    b'oil' b',' b'and' b'then' b'who' b'admitted' b'an' b'kind' b'of' b'box' b'elements' b'.' b'The' b'cloth' b'is' b'both' b'quite' b'limited' b'as' b'it'
    b'want' b'in' b'until' b'the' b'Firebrand' b'was' b'stopped' b'into' b'it' b'at' b'that' b'end' b',' b'because' b'Hermes' b'named' b'that' b'fresh' b'address' b'spread'
    b'and' b'at' b'Adili' b'<unk>' b'were' b'also' b'at' b'do' b'is' b'a' b'world' b'old' b',' b'justice' b'speed' b'we' b'don' b"'t" b'be' b'too'
    b'plotting' b'something' b'to' b'change' b'here' b',' b'.' b'We' b"'" b'first' b'smart' b'mathematical' b'vision' b',' b'Lucius' b'Lord' b'It' b'lives' b'not' b'enters'
    b'its' b'before' b'a' b'back' b'clear' b'"' b',' b'and' b'also' b'decrease' b'them' b'for' b'"' b'bits' b'modes' b'"' b'who' b'have' b'tight' b'mind'
    b'to' b'reflect' b'controlling' b'birth' b'.' b'However' b',' b'Ceres' b'March' b'13' b',' b'2009' b',' b'appeared' b'other' b'years' b':' b'"' b'I' b'do'
    b'not' b'give' b'it' b'rocks' b'France' b'.' b'"' b'<eos>' b'Although' b'it' b'nor' b'Henry' b'Avery' b'passed' b'with' b'husband' b"'s" b'lead' b'running' b'on'
    b'the' b'Highlanders' b'of' b'the' b'body' b',' b'he' b'learns' b'like' b'"' b'her' b'unusual' b'oh' b'of' b'his' b'hopeful' b'books' b'is' b',' b'creating'
    b'brittle' b'<unk>' b'or' b'another' b'or' b'his' b'second' b'"' b',' b'indenture' b'of' b'Soundtrack' b'and' b'tents' b'.' b'The' b'Provisional' b'Reserve' b'were' b'not'
    b'designed' b'as' b'if' b'he' b'helped' b'entirely' b'so' b'100' b'%' b'theatre' b'at' b'Easter' b'school' b'.' b'Nf6' b'a' b'most' b'much' b'orbits' b'"'
    b'the' b'head' b"'" b'<unk>' b'Cooksey' b'(' b'To' b'downloading' b'Dead' b')' b'"' b':' b'documents' b'(' b'<unk>' b')' b',' b'and' b'expressing' b'to'
    b'full' b'achievement' b'and' b'create' b'praise' b'in' b'"' b'cultural' b'<unk>' b'and' b'American' b'perfect' b'reduction' b'in' b'the' b'modern' b'situations' b'of' b'Baja' b'Australia'
    b'"' b'.' b'In' b'search' b',' b'they' b'could' b'not' b'be' b'more' b'preferred' b',' b'rather' b'than' b'worlds' b'on' b'the' b'<unk>' b'and' b'UNOSOM'
    b'Christopher' b'Young' b'(' b'Per\xc3\xb3n' b')' b'.' b'<eos>' b'At' b'youth' b',' b'the' b'presidency' b'of' b'events' b'affiliates' b'are' b'plentiful' b';' b'he' b'ordered'
    b'his' b'values' b',' b'which' b'Friedrich' b'Mather' b'successfully' b'regarded' b'as' b'"' b'lonely' b'"' b'an' b'bedroom' b',' b'Villaret' b'says' b'that' b'the' b'year'
    b'of' b'beer' b'and' b'objects' b'were' b'handled' b'before' b'being' b'confusing' b'unnecessary' b',' b'before' b'where' b'in' b'Rediff.com' b'by' b'scholars' b',' b'polished' b'characters'
    b'exacting' b'friction' b'or' b'Assessment' b'.' b'<unk>' b'strong' b'problems' b'between' b'these' b'aspects' b'of' b'600' b'%' b'1999' b'.' b'<eos>' b'<eos>' b'=' b'='
    b'=' b'unharmed' b'=' b'=' b'=' b'<eos>' b'<eos>' b'According' b'to' b'chicken' b'Watts' b',' b'the' b'comment' b'of' b'commentaries' b'on' b'Darwis' b'@-@' b'Safety'
    b'were' b'sold' b'at' b'<unk>' b'and' b'gotten' b'on' b'<unk>' b'and' b'<unk>' b',' b'and' b'also' b'in' b'<unk>' b'a' b'typical' b'percussion' b'body' b'was'
    b'put' b'down' b'in' b'wildlife' b'.' b'1136' b'moves' b'off' b'the' b'ice' b',' b'meaning' b'an' b'10' b'@.@' b'4' b'km' b'(' b'4' b'@.@'
    b'7' b'mi' b')' b'long' b'to' b'Exhale' b'.' b'They' b'have' b'do' b'their' b'counterpart' b'.' b'Another' b'other' b'obvious' b'scholarship' b'after' b'their' b'photographs'
    b'is' b'so' b'active' b'.' b'Males' b'rejects' b'it' b'and' b'moving' b'its' b'last' b'down' b'by' b'its' b'over' b'@-@' b'<unk>' b'colour' b'room' b','
    b'eventually' b'in' b'hinting' b',' b'.' b'According' b'to' b'<unk>' b'<unk>' b',' b'destitute' b'has' b'to' b'be' b'mentioned' b'38' b'km' b'(' b'4' b'@.@'
    b'8' b'mi' b')' b'from' b'the' b'magnitude' b'of' b'broadcaster' b'to' b'exist' b',' b'attacks' b'a' b'way' b'in' b'other' b'human' b'characters' b':' b'a'
    b'activity' b',' b'such' b'as' b'rectilinear' b',' b'and' b'carrying' b'exploit' b'<unk>' b'from' b'anagram' b'or' b'costs' b'south' b'of' b'the' b'family' b'painter' b'.'
    b'All' b'in' b'the' b'underside' b'of' b'a' b'planet' b'has' b'contributed' b'to' b'hundreds' b'of' b'older' b'understand' b'.' b'Australia' b'usually' b'attacks' b'fighting' b'<unk>'
    b'variations' b',' b'limited' b'or' b'hunt' b'the' b'ability' b'by' b'the' b'leading' b'<unk>' b'body' b'or' b'cap' b'other' b'drink' b',' b'including' b'veil' b','
    b'from' b'Ara' b'and' b'interior' b',' b'stealing' b'heavily' b'a' b'common' b'diameter' b'.' b'This' b'Arabic' b'level' b'on' b'their' b'storylines' b'is' b'Fey' b'is'
    b'responsible' b'.' b'The' b'brown' b'1264' b'was' b'<unk>' b'by' b'treatments' b';' b'<unk>' b'bikini' b'is' b'routed' b'on' b'its' b'series' b'of' b'Funny' b'patches'
    b'\xe2\x80\x94' b'which' b'only' b'fisheries' b',' b'not' b'occurs' b'as' b'Amor' b',' b'or' b'English' b',' b'with' b'breeding' b'material' b'following' b'<unk>' b'.' b'A'
    b'tail' b'unless' b'especially' b'the' b'entire' b'body' b'seeing' b'ELIZA' b'and' b'level' b'an' b'original' b'star' b'into' b'demon' b'trees' b',' b'which' b'Tithonian' b'the'
    b'caves' b',' b'and' b'that' b'other' b'males' b'are' b'not' b'\xe2\x80\x94' b'they' b'says' b'suspicion' b'be' b'expected' b'to' b'portray' b'they' b'had' b'one' b'of'
    b'them' b'.' b'distance' b',' b'they' b'experienced' b',' b'track' b'or' b'roll' b'being' b'<unk>' b',' b'which' b'resulted' b'to' b'Florida' b'well' b'as' b'I.'
    b'III' b',' b'B.' b'Liu' b'De' b'Limoux' b'chess' b'(' b'also' b'trioxide' b')' b'Mounted' b'sensation' b"'" b'eyes' b')' b'and' b'Pleasure' b',' b'which'
    b'cannot' b'be' b'long' b'<unk>' b',' b'temperatures' b',' b'profitable' b',' b'etc' b',' b'<unk>' b',' b'cup' b',' b'pronunciation' b',' b'honored' b',' b'appealed'
    b'to' b'transfusion' b'(' b'Cars' b')' b',' b'which' b'the' b'blooms' b'inside' b'their' b'diet' b'through' b'humans' b'to' b'appoint' b'the' b'ground' b'.' b'Both'
    b'are' b'recorded' b'as' b'a' b'consequence' b'of' b'burns' b'which' b'varies' b'males' b'and' b',' b',' b'often' b'animals' b'by' b'nodes' b'.' b'Like' b'domed'
    b',' b'it' b'is' b'one' b'of' b'the' b'largest' b'bird' b'in' b'their' b'form' b'because' b'it' b'grows' b'its' b'night' b'.' b'<eos>' b'She' b'is'





.. GENERATED FROM PYTHON SOURCE LINES 191-196

It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:

.. GENERATED FROM PYTHON SOURCE LINES 196-241

.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into bsz parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the bsz batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].reshape(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)








.. GENERATED FROM PYTHON SOURCE LINES 242-251

4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values

.. GENERATED FROM PYTHON SOURCE LINES 251-259

.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): DynamicQuantizedLinear(in_features=256, out_features=33278, dtype=torch.qint8, qscheme=torch.per_tensor_affine)
    )




.. GENERATED FROM PYTHON SOURCE LINES 260-262

The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:

.. GENERATED FROM PYTHON SOURCE LINES 262-271

.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Size (MB): 113.944608
    Size (MB): 79.739034




.. GENERATED FROM PYTHON SOURCE LINES 272-276

Second, we see faster inference time, with no difference in evaluation loss:

Note: we set the number of threads to one for single threaded comparison, since quantized
models run single threaded.

.. GENERATED FROM PYTHON SOURCE LINES 276-288

.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 194.6
    loss: 5.168
    elapsed time (seconds): 103.6




.. GENERATED FROM PYTHON SOURCE LINES 289-300

Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 5 minutes  6.505 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
