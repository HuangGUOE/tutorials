
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "advanced/dynamic_quantization_tutorial.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(beta) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we will apply the easiest form of quantization -
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.

.. GENERATED FROM PYTHON SOURCE LINES 22-32

.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F








.. GENERATED FROM PYTHON SOURCE LINES 33-39

1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.

.. GENERATED FROM PYTHON SOURCE LINES 39-73

.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))








.. GENERATED FROM PYTHON SOURCE LINES 74-82

2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.

.. GENERATED FROM PYTHON SOURCE LINES 82-132

.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')








.. GENERATED FROM PYTHON SOURCE LINES 133-141

3. Load the pre-trained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pre-trained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.

.. GENERATED FROM PYTHON SOURCE LINES 141-161

.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )




.. GENERATED FROM PYTHON SOURCE LINES 162-165

Now let's generate some text to ensure that the pre-trained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_

.. GENERATED FROM PYTHON SOURCE LINES 165-190

.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b'visitor' b'monk' b'Scientific' b'a' b'collection' b'sign' b',' b'complimenting' b'Crime' b'or' b'colonised' b'of' b'Christians' b'and' b'public' b'@-@' b'banks' b'military' b'ideas' b'and'
    b'Eh' b'burnt' b'directly' b'.' b'This' b'version' b'should' b'call' b'Pocket' b"'s" b'principal' b'behaviour' b'for' b'a' b'sense' b'of' b'examples' b'such' b'mainly' b','
    b'by' b'an' b'few' b'hours' b',' b'on' b'northeasterly' b'when' b'the' b'temperature' b'of' b'9' b'@,@' b'010' b'birds' b'are' b'<unk>' b'.' b'Once' b'limited'
    b'<unk>' b',' b'to' b'playoff' b'venom' b',' b'however' b',' b'they' b'are' b'still' b'able' b'to' b'potential' b'as' b'refuge' b'.' b'"' b'<unk>' b'Walpole'
    b'of' b'detonation' b'is' b'perhaps' b'eat' b'made' b'the' b'great' b'bastn\xc3\xa4site' b'of' b'allowing' b'that' b'however' b',' b'missed' b'our' b'harsh' b'music' b'when' b'they'
    b'understand' b'ahead' b'they' b'have' b'shall' b'attain' b'.' b'"' b'In' b'this' b'season' b'assigns' b'all' b'a' b'possible' b'carriage' b'year' b'will' b'be' b'nearly'
    b'real' b'.' b'Boom' b'sexpunctatus' b'Horus' b'especially' b'features' b'a' b'Mortal' b'Kombat' b'without' b'the' b'same' b'as' b'a' b'joke' b',' b'described' b'by' b'ghosts'
    b'as' b'relied' b'in' b'Georgian' b'faiths' b',' b'with' b'historical' b'avatars' b'as' b'an' b'planet' b'for' b'other' b'South' b'African' b'centuries' b',' b'with' b'a'
    b'number' b'of' b'educational' b',' b'Kentucky' b',' b'<unk>' b',' b'<unk>' b'or' b'Mayer' b'who' b'have' b'a' b'<unk>' b'effect' b'.' b'Vogler' b'thought' b'he'
    b'carried' b'to' b'him' b'at' b'a' b'height' b'of' b'Nuskhuri' b'years' b'that' b'may' b'have' b'"' b'eats' b'food' b'underway' b'in' b'this' b'game' b'.'
    b'"' b'<eos>' b'<eos>' b'=' b'=' b'Description' b'=' b'=' b'<eos>' b'<eos>' b'<eos>' b'=' b'=' b'Pyramid' b'=' b'=' b'<eos>' b'<eos>' b'The' b'Augustan'
    b'History' b'is' b'created' b'toward' b'fish' b',' b'and' b'records' b'is' b'deep' b'in' b'countdown' b',' b'as' b'they' b'didn' b"'t" b'encountered' b'to' b'prevail'
    b'a' b'debt' b'within' b'its' b'rocks' b'.' b'In' b'the' b'first' b'larger' b',' b'600' b'abnormalities' b'is' b'unknown' b'before' b'the' b'kakapo' b'tension' b'forward'
    b',' b'while' b'the' b'subjects' b'in' b'2007' b'is' b'in' b'love' b'.' b'A' b'<unk>' b',' b'is' b'<unk>' b'weekend' b'.' b'<unk>' b'class' b'was'
    b'poured' b'with' b'b' b',' b'males' b',' b'<unk>' b',' b'and' b'habitats' b'Gatland' b'have' b'impact' b'.' b'The' b'discovery' b'by' b'northern' b'Fresh' b'starling'
    b'is' b'overpainted' b'for' b'all' b'up' b'a' b'feat' b'and' b'one' b'away' b',' b'and' b'definition' b'claimed' b'that' b'they' b'are' b'the' b'flight' b"'s"
    b'HBO' b'.' b'The' b'resulting' b'piece' b'are' b'populated' b'or' b'sometimes' b'outbid' b'in' b'one' b',' b'inquiry' b'between' b'sea' b'and' b'12' b'%' b'Islamist'
    b'spots' b'.' b'The' b'breeding' b'state' b',' b'an' b'width' b'of' b'100' b'players' b',' b'has' b'then' b'been' b'differentiated' b'for' b'the' b'population' b'of'
    b'Ceres' b'staple' b',' b'while' b'it' b'is' b'observed' b'that' b'it' b'meant' b'that' b'they' b'touched' b'spouses' b'from' b'their' b'faith' b'.' b'Since' b'every'
    b'gift' b',' b'the' b'head' b'may' b'have' b'won' b'extensive' b'starlings' b'while' b'slowly' b'occasionally' b'onto' b'rural' b',' b'accurate' b',' b'even' b'to' b'end'
    b',' b'close' b'to' b'an' b'kevalaj\xc3\xb1\xc4\x81na' b'<unk>' b';' b'when' b'they' b'left' b'Llanbeulan' b'/' b'migrate' b',' b'they' b'have' b'<unk>' b'it' b'in' b'some'
    b'convection' b'(' b'2' b')' b'call' b':' b'"' b'some' b'are' b'certainly' b'useful' b'"' b',' b'and' b'by' b'anger' b'the' b'species' b'witnesses' b'and'
    b'in' b'areas' b'are' b'removed' b'.' b'Each' b'other' b'year' b'known' b'as' b'Production' b'angels' b',' b'jealous' b',' b'tend' b'to' b'attract' b'possible' b'favorite'
    b'calls' b';' b',' b'as' b'they' b'herbivore' b',' b'to' b'lose' b'.' b'Similarly' b',' b'fire' b',' b'the' b'nest' b'represented' b'Putnam' b',' b'chapters'
    b'or' b'no' b'Trunk' b'fin' b'searches' b'.' b'They' b'can' b'be' b'heard' b'more' b'than' b'13' b'years' b'old' b'in' b'size' b'to' b'be' b'containing'
    b'able' b'.' b'According' b'to' b'rice' b'(' b'most' b'tightly' b'due' b'to' b'Shou' b')' b'.' b'<eos>' b'<eos>' b'=' b'=' b'=' b'Christianity' b'='
    b'=' b'=' b'<eos>' b'<eos>' b'Common' b'starling' b'Catholics' b'and' b'Inari' b'relationships' b'were' b'the' b'archipelago' b'language' b'geometry' b'through' b'infringement' b'to' b'masses' b'that'
    b'were' b'posted' b'by' b'<unk>' b'and' b'whalebone' b'.' b'There' b'were' b'no' b'identify' b'1867' b'to' b'accumulate' b'.' b'Noisy' b'care' b'acquired' b'high' b'small'
    b'mammals' b'who' b'mentioned' b'<unk>' b'galactic' b'trees' b',' b'not' b'impact' b',' b'calls' b'even' b'affixed' b'to' b'some' b'or' b'structural' b'hunters' b'.' b'Some'
    b'are' b'another' b'clades' b',' b'architectural' b',' b'below' b'waste' b',' b'reduced' b'to' b'extend' b'up' b'a' b'spokesman' b'off' b'him' b'.' b'flour' b'jumps'
    b'in' b'some' b'way' b'as' b'a' b'result' b'process' b'.' b'They' b'also' b'feed' b'or' b'associated' b'water' b',' b'eight' b'chicks' b'of' b'ligaments' b','
    b'Laxa' b',' b'easy' b'kakapo' b',' b'<unk>' b',' b'failure' b',' b'and' b'light' b'with' b'usually' b'statistical' b'USDA' b',' b'well' b'as' b'Immortals' b','
    b'ascetics' b',' b'and' b'power' b'areas' b',' b'when' b'their' b'owners' b'were' b'exhausted' b'with' b'those' b'oblong' b'.' b'<eos>' b'While' b'various' b'@-@' b'lived'
    b'predicted' b',' b'they' b'suggests' b'that' b'they' b'begin' b'too' b'traditional' b'(' b'SbF' b')' b'deep' b'.' b'There' b'are' b'no' b'conflicted' b'for' b'a'
    b'small' b'transcription' b'part' b'of' b'their' b'satisfaction' b'.' b'When' b'these' b'judge' b'takes' b'into' b'tree' b'(' b'globular' b'@-@' b'green' b',' b'<unk>' b')'
    b'displays' b'treatments' b'with' b'the' b'tackled' b'taxi' b'but' b'gradually' b'always' b'starting' b'.' b'Because' b'no' b'g' b'or' b'them' b'apart' b'for' b'<unk>' b','
    b'legs' b'of' b'sequence' b'is' b'observed' b'to' b'produce' b'kakapo' b'or' b'twin' b'bones' b',' b'but' b'they' b'may' b'simply' b'approve' b'unanimously' b'raise' b'so'
    b'grains' b'from' b'necrophiliac' b'.' b'<unk>' b'that' b'quite' b'foraging' b',' b'occasionally' b'will' b'be' b'dismissed' b',' b'so' b'outside' b'they' b'have' b'done' b'spores'
    b'into' b'kakapo' b'.' b'Instead' b',' b'much' b'of' b'the' b'magical' b'structures' b'differ' b'in' b'activity' b',' b'while' b'dominant' b'fossils' b',' b'humans' b','
    b'or' b'silt' b'ladies' b'collected' b'were' b'throughout' b'cubs' b'.' b'Once' b'this' b'belief' b'do' b'not' b'need' b'to' b'feed' b'with' b'"' b'frantically' b','
    b'"' b'she' b'succeeded' b'in' b'terms' b'of' b'common' b'persons' b',' b'Croats' b'member' b',' b'which' b'is' b'pressed' b'to' b'her' b'@-@' b'under' b'@-@'
    b'sky' b'at' b'night' b'.' b'<eos>' b'Common' b'starlings' b're' b'@-@' b'thirty' b'20' b'are' b'<unk>' b',' b'medical' b',' b'and' b'grey' b',' b'due'
    b'to' b'more' b'than' b'50' b'%' b'of' b'translation' b'.' b'Due' b'to' b'some' b'way' b',' b'during' b'Chang' b'Rico' b',' b'when' b'although' b','
    b'on' b'the' b'state' b'of' b'thirty' b'or' b'reducing' b'fused' b'eggs' b',' b'they' b'have' b'Rhythms' b'imitate' b'threads' b'and' b'1663' b'<unk>' b'them' b'.'
    b'<unk>' b'often' b'discussed' b'sketches' b'being' b'emulate' b'.' b'In' b'mycologist' b'cells' b',' b'the' b'kakapo' b'appears' b'to' b'build' b'numbers' b'transfer' b'food' b','
    b'as' b'simply' b'<unk>' b'or' b'accumulate' b'over' b'different' b'<unk>' b'.' b'A' b'female' b'for' b'initial' b'steeplechase' b'organisms' b'consists' b'are' b'only' b'informally' b'and'
    b'cortex' b'.' b'The' b'wing' b'is' b'anesthetic' b'on' b'2' b'January' b'1918' b',' b'approximately' b'dark' b'or' b'\xc2\xb0' b'so' b'if' b'it' b'can' b'strike'
    b'their' b'vertical' b'arc' b'.' b'By' b'1843' b'below' b'20' b'%' b'of' b'Ceres' b',' b'short' b'bays' b',' b'<unk>' b',' b'or' b'induce' b'158'
    b',' b'mostly' b'24' b'@.@' b'3' b'species' b',' b'with' b'other' b'birds' b'.' b'<eos>' b'Common' b'starlings' b'not' b'includes' b'so' b'fly' b'hot' b'for'
    b'mobbing' b'them' b'as' b'he' b'Performing' b'cells' b'.' b'Metz' b'for' b'these' b'native' b'records' b'were' b'look' b'until' b'they' b'do' b'no' b'surface' b'to'





.. GENERATED FROM PYTHON SOURCE LINES 191-196

It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:

.. GENERATED FROM PYTHON SOURCE LINES 196-241

.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into bsz parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the bsz batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].reshape(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)








.. GENERATED FROM PYTHON SOURCE LINES 242-251

4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values

.. GENERATED FROM PYTHON SOURCE LINES 251-259

.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): DynamicQuantizedLinear(in_features=256, out_features=33278, dtype=torch.qint8, qscheme=torch.per_tensor_affine)
    )




.. GENERATED FROM PYTHON SOURCE LINES 260-262

The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:

.. GENERATED FROM PYTHON SOURCE LINES 262-271

.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Size (MB): 113.944608
    Size (MB): 79.739034




.. GENERATED FROM PYTHON SOURCE LINES 272-276

Second, we see faster inference time, with no difference in evaluation loss:

Note: we set the number of threads to one for single threaded comparison, since quantized
models run single threaded.

.. GENERATED FROM PYTHON SOURCE LINES 276-288

.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 211.2
    loss: 5.168
    elapsed time (seconds): 111.4




.. GENERATED FROM PYTHON SOURCE LINES 289-300

Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 5 minutes  31.059 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
