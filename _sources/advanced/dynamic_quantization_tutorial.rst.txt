
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "advanced/dynamic_quantization_tutorial.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(beta) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we will apply the easiest form of quantization -
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.

.. GENERATED FROM PYTHON SOURCE LINES 22-32

.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F








.. GENERATED FROM PYTHON SOURCE LINES 33-39

1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.

.. GENERATED FROM PYTHON SOURCE LINES 39-73

.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))








.. GENERATED FROM PYTHON SOURCE LINES 74-82

2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.

.. GENERATED FROM PYTHON SOURCE LINES 82-132

.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')








.. GENERATED FROM PYTHON SOURCE LINES 133-141

3. Load the pre-trained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pre-trained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.

.. GENERATED FROM PYTHON SOURCE LINES 141-161

.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )




.. GENERATED FROM PYTHON SOURCE LINES 162-165

Now let's generate some text to ensure that the pre-trained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_

.. GENERATED FROM PYTHON SOURCE LINES 165-190

.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b',' b'in' b'particular' b',' b'sinful' b'<unk>' b'lambei' b',' b'and' b'Books' b'to' b'Huerta' b'Michaels' b'of' b'Oxford' b',' b'and' b'was' b'later' b'used'
    b'to' b'employ' b'their' b'wish' b'before' b'moving' b'up' b'to' b'17' b'mph' b'.' b'd4' b',' b'Ceres' b',' b'liable' b'<unk>' b',' b'hundreds' b'of'
    b'R' b"'Malley" b'\xe2\x80\x94' b'leaves' b'to' b'succeed' b'like' b'about' b'manoeuvres' b',' b'or' b'<unk>' b',' b'New' b'Zealand' b',' b'or' b'North' b'Korea' b'.'
    b'The' b'version' b'of' b'its' b'premises' b'toured' b'by' b'Esta\xc3\xb1ol' b'salts' b'from' b'Norwalk' b'with' b'regeneration' b'Owen' b',' b'<unk>' b'Arm' b',' b'The' b'branch'
    b'form' b'Jesse' b'McGuinness' b',' b'Ezra' b"'Automobile" b',' b'and' b'Raymond' b'Alexander' b'.' b'The' b'Journal' b'of' b'proposes' b'is' b'included' b'in' b'the' b'D\xc3\xbcsseldorf'
    b'Walidah' b',' b'and' b'she' b'was' b'able' b'to' b'travelled' b'that' b'.' b'In' b'Nashville' b'at' b'about' b'the' b'same' b'age' b'of' b'previous' b'early'
    b'@-@' b'century' b'eyes' b',' b'Taunton' b'museum' b'indicated' b'it' b'to' b'have' b'to' b'be' b'a' b'proper' b'stick' b'into' b'spelling' b'subject' b'.' b'maligned'
    b',' b'with' b'this' b'entry' b',' b'urges' b'ideas' b'into' b'army' b'habitat' b',' b'a' b'observation' b'which' b'aims' b'to' b'aids' b'of' b'purposes' b'into'
    b'Cleland' b'.' b'Since' b'years' b',' b'they' b'spent' b'them' b'to' b'block' b'however' b',' b'and' b'testament' b'for' b'unless' b'they' b'were' b'their' b'projection'
    b'that' b'act' b'it' b'took' b'place' b'under' b'the' b'Reporter' b',' b'which' b'allow' b'<unk>' b'.' b'Alternatively' b',' b'photographers' b'settled' b'conference' b'east' b"'s"
    b'property' b'due' b'to' b'a' b'desire' b'to' b'emulate' b'directly' b'atop' b'journalists' b'before' b'there' b'are' b'clear' b'feeling' b'to' b'be' b'done' b';' b'they'
    b'even' b'think' b'to' b'Church' b'it' b'moving' b'to' b'seer' b'.' b'On' b'23' b'courses' b',' b'moved' b',' b'O' b"'Malley" b',' b'<unk>' b'and'
    b'gills' b',' b'are' b'expensive' b',' b'but' b'are' b'finally' b'easily' b'considered' b'to' b'establish' b'three' b'residents' b',' b'which' b'there' b'are' b'dense' b'Palmyrene'
    b'people' b',' b'and' b'thus' b'initial' b'soldiers' b'in' b'an' b'set' b'to' b'incorporate' b'the' b'strike' b'to' b'adapt' b'for' b'maximum' b'Russians' b'.' b'crude'
    b'keeper' b'Giant' b'accounts' b'said' b'that' b'it' b'"' b'could' b'be' b'a' b'less' b'remarkable' b'part' b'of' b'considerable' b'bird' b',' b'so' b'restriction' b'is'
    b'blown' b'skeletons' b'.' b'"' b'In' b'his' b'next' b'season' b'on' b'television' b',' b'tricks' b'on' b'the' b'Union' b'by' b'a' b'availability' b'in' b'the'
    b'royal' b'Sea' b'toward' b'residential' b'turmoil' b',' b'accompanies' b'mantle' b'as' b'Joint' b'Chaykovsky' b'centre' b'should' b'connections' b'to' b'struggled' b'.' b'<eos>' b'<eos>' b'='
    b'=' b'Isotopes' b'=' b'=' b'<eos>' b'<eos>' b'There' b'have' b'not' b'been' b'recorded' b'in' b'prostitutes' b'as' b'a' b'possible' b'jokes' b'of' b'connection' b'in'
    b'the' b'Pugliese' b'or' b'Azerbaijan' b',' b'and' b'they' b'were' b'found' b'for' b'sources' b'to' b'remain' b'common' b'Banksia' b'effects' b'.' b'The' b'Common' b'starling'
    b'is' b'submerged' b'to' b'prepare' b'of' b'ultraviolet' b'and' b'have' b'no' b'central' b'release' b',' b'having' b'existed' b'.' b'They' b'recommended' b'long' b'damage' b'when'
    b'their' b'large' b'starling' b'department' b'is' b'permitted' b'found' b'as' b'a' b'sort' b'.' b'<eos>' b'<eos>' b'=' b'=' b'History' b'=' b'=' b'<eos>' b'<eos>'
    b'While' b'the' b'asteroid' b'community' b'shifting' b'in' b'1987' b',' b'they' b'are' b'accepted' b'during' b'Europe' b'.' b'A.' b'Ranked' b'are' b',' b'however' b','
    b'may' b'have' b'belonged' b'to' b'their' b'kind' b'itself' b'or' b'pre' b'@-@' b'related' b'shortages' b'.' b'<eos>' b'The' b'common' b'starling' b'wins' b'with' b'good'
    b'headdress' b',' b'particularly' b'a' b'e.g.' b'term' b'of' b'many' b'Gaelic' b'rock' b'individuals' b'such' b'as' b'indium' b',' b'Farah' b'Eliot' b',' b'<unk>' b','
    b'Port' b'RNA' b',' b'and' b'Charles' b'@-@' b'Fledglings' b'.' b'Other' b'reviewers' b'fruit' b',' b'<unk>' b',' b'<unk>' b',' b'Grass' b',' b'Radio' b','
    b'backing' b',' b'are' b'first' b'unique' b'put' b'the' b'kakapo' b'now' b'until' b'Europe' b'and' b'a' b'wildlife' b'Arizona' b'hood' b'.' b'It' b'is' b'long'
    b'millions' b'of' b'common' b'starling' b',' b'particularly' b'longitudinal' b'.' b'Another' b'oral' b'starling' b'is' b'uncertain' b',' b'and' b'it' b'has' b'mainly' b'been' b'publicized'
    b'.' b'The' b'habitat' b'unlicensed' b'to' b'observe' b'quarter' b'in' b'daylight' b',' b'cutting' b'Ireland' b'from' b'a' b'concentric' b'Legislative' b'tree' b'.' b'Its' b'moored'
    b'parrot' b'is' b'in' b'susceptible' b'to' b'highly' b'nuclei' b',' b'with' b'some' b'<unk>' b'Chinese' b'starlings' b'than' b'glass' b'areas' b'out' b'of' b'one' b'birth'
    b'that' b'makes' b'Altar' b',' b'and' b'Migration' b'due' b'to' b'their' b'own' b'intention' b'being' b'recorded' b'.' b'<unk>' b'also' b'or' b'<unk>' b'alpha' b'types'
    b',' b'to' b'give' b'similarities' b'rather' b'than' b'one' b'education' b'.' b'<eos>' b'If' b'split' b'in' b'small' b'strength' b',' b'they' b'do' b'little' b'decades'
    b'like' b'penetrate' b',' b'greatly' b'Mori' b'to' b'pass' b'their' b'head' b',' b'which' b'were' b'called' b'<unk>' b',' b'or' b'areas' b'such' b'as' b'<unk>'
    b'playing' b'to' b'normal' b'eggs' b'.' b'Two' b'then' b'440' b'@-@' b'Admirals' b'behaviour' b'from' b'each' b'other' b',' b'as' b'it' b'could' b'be' b'distinguished'
    b',' b'spiritual' b'reaction' b'per' b'larvae' b'from' b'a' b'wider' b'divers' b'through' b'its' b'panoramic' b'body' b'.' b'At' b'one' b'million' b'years' b',' b'other'
    b'birds' b'rarely' b'krypton' b'are' b'different' b'in' b'Specification' b'or' b'greater' b'produce' b'feedback' b'and' b'Usually' b'them' b'.' b'They' b'have' b'baht' b'possesses' b'basic'
    b'eggs' b'again' b',' b'throws' b'or' b'immediate' b'when' b'however' b',' b'they' b'hardly' b'core' b'it' b',' b'too' b'broods' b'to' b'identify' b'them' b'.'
    b'Once' b'redeveloped' b'in' b'the' b'country' b',' b'they' b'are' b'estimated' b'to' b'be' b'luminosity' b'to' b'unlimited' b'their' b'small' b'species' b'.' b'Sitriuc' b'surviving'
    b'Dosti' b'when' b'apparent' b'(' b'such' b'with' b'green' b'DNA' b'has' b'been' b'kept' b'on' b'only' b')' b'.' b'Therefore' b',' b'too' b'narrow' b'mention'
    b'it' b'may' b'potentially' b'be' b'very' b'uncommon' b'.' b'Since' b'one' b'change' b'prevalence' b'we' b'at' b'like' b'females' b',' b'they' b'were' b'able' b','
    b'they' b'do' b'not' b'occur' b'each' b'night' b'instead' b'their' b'observation' b'.' b'A' b'11' b'@-@' b'game' b'old' b'study' b'has' b'their' b'real' b'option'
    b'to' b'Australia' b',' b'particularly' b'touch' b'as' b'Catechism' b'allowed' b'three' b'diseases' b'at' b'Shruti' b'rather' b'than' b'clinch' b',' b'so' b'others' b'may' b'be'
    b'white' b'at' b'1764' b'.' b'If' b'they' b'are' b'exposed' b'to' b'their' b'longest' b',' b'alone' b'@-@' b'flea' b'are' b'tofu' b'amplifier' b'.' b'The'
    b'retention' b'of' b'state' b'is' b'not' b'transported' b'for' b'other' b'<unk>' b'undergraduates' b'.' b'Directorate' b'was' b'led' b'by' b'aggressive' b'Hammett' b'remove' b'starts' b'above'
    b'<unk>' b'@-@' b'bowlers' b',' b'the' b'issues' b'may' b'be' b'<unk>' b'.' b'In' b'order' b',' b'multiple' b'<unk>' b'DNA' b'Achaemenid' b',' b'monogamous' b','
    b'powerful' b',' b'<unk>' b',' b'<unk>' b',' b'condominium' b',' b'metals' b',' b'<unk>' b',' b'and' b'antidote' b',' b'is' b'often' b'reduced' b'to' b'noisy'
    b'parasites' b'to' b'be' b'an' b'large' b'species' b'of' b'<unk>' b'.' b'<eos>' b'<eos>' b'=' b'=' b'History' b'=' b'=' b'<eos>' b'<eos>' b'Following' b'this'
    b'mid' b'@-@' b'243' b'species' b'early' b'presence' b'in' b'passage' b'while' b'may' b'be' b'lighter' b';' b'they' b'are' b'communal' b'Johannes' b'equilibrium' b';' b'their'
    b'ability' b'toward' b'their' b'nomen' b'Office' b'and' b'create' b'enlarged' b'from' b'trees' b'from' b'laboratory' b'validity' b',' b'the' b'cycle' b'of' b'cloth' b'and' b'is'
    b'assaulted' b'and' b'425' b'\xe2\x80\x93' b'4' b'respectively' b'.' b'Each' b'first' b'parallax' b',' b'32' b'@.@' b'5' b'%' b'residents' b'are' b'20' b'\xe2\x80\x93' b'8'
    b'prior' b'to' b'bird' b',' b'wool' b'.' b'St.' b'Diego' b'.' b'They' b'suggest' b'where' b'their' b'common' b'ecosystems' b'are' b'escalating' b',' b'compared' b'to'





.. GENERATED FROM PYTHON SOURCE LINES 191-196

It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:

.. GENERATED FROM PYTHON SOURCE LINES 196-241

.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into bsz parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the bsz batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].reshape(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)








.. GENERATED FROM PYTHON SOURCE LINES 242-251

4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values

.. GENERATED FROM PYTHON SOURCE LINES 251-259

.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): DynamicQuantizedLinear(in_features=256, out_features=33278, dtype=torch.qint8, qscheme=torch.per_tensor_affine)
    )




.. GENERATED FROM PYTHON SOURCE LINES 260-262

The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:

.. GENERATED FROM PYTHON SOURCE LINES 262-271

.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Size (MB): 113.944608
    Size (MB): 79.739034




.. GENERATED FROM PYTHON SOURCE LINES 272-276

Second, we see faster inference time, with no difference in evaluation loss:

Note: we set the number of threads to one for single threaded comparison, since quantized
models run single threaded.

.. GENERATED FROM PYTHON SOURCE LINES 276-288

.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 196.8
    loss: 5.168
    elapsed time (seconds): 107.0




.. GENERATED FROM PYTHON SOURCE LINES 289-300

Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 5 minutes  12.077 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
