
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "advanced/dynamic_quantization_tutorial.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(beta) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we will apply the easiest form of quantization -
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.

.. GENERATED FROM PYTHON SOURCE LINES 22-32

.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F








.. GENERATED FROM PYTHON SOURCE LINES 33-39

1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.

.. GENERATED FROM PYTHON SOURCE LINES 39-73

.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))








.. GENERATED FROM PYTHON SOURCE LINES 74-82

2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.

.. GENERATED FROM PYTHON SOURCE LINES 82-132

.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')








.. GENERATED FROM PYTHON SOURCE LINES 133-141

3. Load the pre-trained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pre-trained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.

.. GENERATED FROM PYTHON SOURCE LINES 141-161

.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )




.. GENERATED FROM PYTHON SOURCE LINES 162-165

Now let's generate some text to ensure that the pre-trained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_

.. GENERATED FROM PYTHON SOURCE LINES 165-190

.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b'\xe2\x80\x93' b'other' b'purpose' b',' b'<unk>' b':' b'215' b'@.@' b'7' b'in' b'(' b'<unk>' b'Loss' b')' b',' b'and' b'Nancy' b'Taken' b',' b'also'
    b'faced' b'in' b'1959' b'.' b'<unk>' b'Range' b',' b'Harry' b'Mo' b'Meginness' b'Jr' b',' b'was' b'also' b'named' b'for' b'<unk>' b',' b'but' b'in'
    b'turn' b'the' b'Doctrine' b'of' b'native' b'tolerance' b'would' b'be' b'<unk>' b'indulgence' b';' b'tantalum' b'referred' b'exclusively' b'to' b'basketball' b',' b'having' b'no' b'villain'
    b',' b'and' b'she' b'has' b'the' b'deeper' b'program' b'in' b'vacant' b'favor' b'species' b'of' b'to' b'kill' b'his' b'own' b'dole' b'.' b'The' b'pair'
    b'made' b'Liberty' b"'s" b'Kannada' b'@-@' b'room' b'proportion' b'the' b'Dubliners' b'who' b'homeless' b',' b'and' b'Richardson' b'has' b'already' b'adapted' b'when' b'he' b'returns'
    b',' b'to' b'<unk>' b'his' b'dismay' b'.' b'His' b'living' b'decision' b'was' b'that' b'of' b'revolution' b'1891' b'by' b'his' b'father' b"'s" b'next' b'<unk>'
    b'policy' b',' b'which' b'drew' b'Semaphore' b'.' b'They' b'also' b'have' b'a' b'beam' b'of' b'three' b',' b'1962' b'(' b'35' b'killed' b')' b'east'
    b'of' b'submitting' b'refreshing' b'when' b'any' b'contained' b'divides' b'before' b'it' b'was' b'called' b'clone' b'or' b'art' b'characters' b'to' b'make' b'.' b'According' b'to'
    b'issuing' b'it' b'with' b'the' b'<unk>' b'birthday' b',' b'he' b'said' b'"' b'Man' b'Lemon' b'"' b'W.' b'F.' b'Clark' b'never' b'was' b'inspired' b'by'
    b'frontman' b';' b'he' b'<unk>' b'their' b'Killarney' b'down' b'as' b'studio' b'living' b'in' b'his' b'primary' b'30' b'<unk>' b'.' b'He' b'introduced' b'his' b'<unk>'
    b'story' b'Gallipoli' b'when' b'he' b'has' b'two' b'come' b'of' b'mob' b'.' b'When' b'leader' b'critic' b'Ben' b'IV' b'called' b'"' b'Philip' b'I' b'asteroid'
    b'seeds' b'"' b',' b'little' b'and' b'<unk>' b'columnist' b'and' b'<unk>' b'Churchill' b"'s" b'stock' b'theorists' b'to' b'catch' b'their' b'identity' b'are' b'acquired' b'by'
    b'the' b'<unk>' b'Ballala' b'sinner' b'in' b'Hollywood' b'.' b'In' b'the' b'1954' b'77th' b'century' b',' b'aggravated' b'Walpole' b',' b'alarmed' b'afterwards' b'and' b'Mr'
    b"'Malley" b'were' b'designed' b'on' b'November' b'5' b',' b'2003' b';' b'in' b'September' b'this' b'he' b'commented' b'that' b'and' b'then' b'culling' b',' b'<unk>'
    b'by' b'transmissions' b'that' b'were' b'so' b'there' b'would' b'be' b'returning' b'to' b'propagandist' b'newspapers' b'.' b'He' b'also' b'hockey' b'with' b'the' b'criticism' b'of'
    b'his' b'outfits' b',' b'registered' b'his' b'final' b'place' b'near' b'Custom' b'@-@' b'Shabaab' b',' b'while' b'stimmi' b'you' b'had' b'clearly' b'tried' b'Am' b'@-@'
    b'D.' b'"' b'<unk>' b'Part' b'"' b'(' b'<unk>' b')' b',' b'pulling' b'in' b'1913' b'on' b'"' b'teacher' b'as' b'a' b'<unk>' b'"' b','
    b'becoming' b'sixty' b'@-@' b'part' b'in' b'the' b'1983' b'1990s' b'presence' b'to' b'being' b'Virtual' b'.' b'<eos>' b'<eos>' b'=' b'=' b'Personal' b'life' b'='
    b'=' b'<eos>' b'<eos>' b'A' b'novel' b'known' b'as' b'dwarfs' b',' b'<unk>' b'heard' b'during' b'the' b'Nile' b',' b'including' b'also' b'received' b'by' b'Crash'
    b'Cooper' b'in' b'1617' b'.' b'During' b'the' b'meantime' b',' b'Hornung' b'lobbied' b'a' b'new' b'starters' b',' b'with' b'signing' b'over' b'an' b'popular' b'sphere'
    b'of' b'full' b'titles' b'.' b'They' b'tried' b'to' b'improve' b'by' b'New' b'York' b'on' b'Victoria' b'.' b'However' b',' b'none' b'of' b'celestial' b'propaganda'
    b'between' b'Eaton' b'and' b'Monroe' b'are' b'unclear' b'remnant' b'.' b'The' b'diverse' b'dance' b'generally' b'declined' b'well' b'close' b'to' b'comprehensive' b'school' b'information' b'.'
    b'<eos>' b'Bach' b'and' b'Dirt' b'ran' b'to' b'indefinitely' b'other' b'Gary' b'philosopher' b'novels' b',' b'collapses' b'in' b'stores' b'through' b'Chai' b'Powers' b'about' b'an'
    b'resolution' b'that' b'could' b'be' b'created' b'to' b'become' b'an' b'man' b',' b'Kenneth' b'@-@' b'Watson' b'to' b'chronology' b'.' b'While' b'there' b'is' b'so'
    b'evidence' b'in' b'just' b'after' b'a' b'date' b'in' b'feral' b'society' b',' b'he' b'insisted' b'his' b'body' b'.' b'1st' b'History' b'sees' b'what' b'indirectly'
    b'gets' b'\xe2\x80\x94' b'flesh' b'for' b'his' b'masterly' b'villagers' b'amongst' b'their' b'attempt' b',' b'before' b'which' b'he' b'returned' b'to' b'the' b'other' b'<unk>' b'at'
    b'Witches' b'.' b'The' b'book' b'is' b'actually' b'striking' b'\xe2\x80\x94' b'as' b'en' b'pleasure' b'was' b'a' b'bit' b'teeth' b'in' b'January' b',' b'and' b'suggests'
    b'that' b'curb' b'appalling' b'innovator' b'with' b'Walton' b'(' b'due' b'to' b'looting' b')' b'.' b'"' b'The' b'Connector' b'art' b'to' b'have' b'pretty' b'the'
    b'region' b'great' b'long' b'...' b'going' b'to' b'admit' b'better' b',' b'like' b'those' b'negative' b'shoulder' b'positive' b',' b'all' b'collections' b'of' b'domestic' b'Mosley'
    b"'" b'feet' b'to' b'terms' b',' b'He' b'heard' b'both' b'preserved' b';' b'by' b'possibly' b'on' b'the' b'finds' b'of' b'thirds' b'of' b'anyone' b'?'
    b'[' b'To' b'Dalmeny' b']' b'.' b'"' b'To' b'be' b'able' b'to' b'establish' b'to' b'maat' b',' b'in' b'association' b'his' b'father' b"'s" b'final'
    b'prize' b'd' b'Piazzi' b'in' b'1997' b',' b'introduced' b'Formula' b"'Malley" b'Billington' b'as' b'Henry' b'St.' b'brother' b'in' b'what' b'began' b'me' b'into' b'the'
    b'National' b'American' b'Union' b'(' b'<unk>' b')' b'and' b'YPM' b'Petersburg' b'(' b'1059' b')' b'.' b'By' b'the' b'same' b'year' b'he' b'went' b'to'
    b'<unk>' b'and' b'ecliptic' b'to' b'fulfil' b'a' b'appeal' b'south' b'of' b'henchmen' b'.' b'He' b'can' b'have' b'proved' b'vowel' b'training' b'or' b'demanded' b'his'
    b'agreements' b'of' b'art' b'giving' b'the' b'<unk>' b'.' b'He' b'witnessed' b'her' b'role' b'at' b'a' b'counter' b'despite' b'<unk>' b'labor' b'children' b'a' b'tomatoes'
    b'to' b'fruitbodies' b'worrying' b'inside' b'experimenting' b'.' b'His' b'last' b'wife' b'was' b'arranged' b'by' b'Lemon' b'Wang' b'Ballantyne' b'.' b'The' b'force' b'of' b'Gerald'
    b'Edwin' b'is' b'being' b'probably' b'replaced' b'so' b'and' b'paid' b'some' b'stories' b'from' b'short' b'foundations' b',' b'"' b'demanding' b'"' b'without' b'back' b'detection'
    b'.' b'Again' b',' b'completing' b'his' b'person' b'found' b'eight' b'cricketers' b'in' b'theatrical' b'ranks' b'Field' b'state' b'.' b'This' b'mushroom' b'is' b'lovely' b'to'
    b'any' b'workshop' b',' b'rather' b'than' b'CE' b'has' b'remained' b'about' b'sentences' b'.' b'Evita' b'was' b'rooted' b'into' b'immediately' b'gameplay' b'War' b'as' b'showcasing'
    b',' b'with' b'what' b'he' b'had' b'no' b'instant' b'children' b'.' b'He' b'remained' b'<unk>' b'as' b'the' b'most' b'Manitoba' b'found' b'king' b'in' b'Western'
    b'feeling' b'for' b'Stonehenge' b'.' b'The' b'book' b'Ram' b'inhabit' b'edition' b'he' b'compared' b'for' b'a' b'underground' b'inscription' b',' b'leading' b'to' b'a' b'Purpose'
    b'neck' b'from' b'the' b'Persians' b';' b'it' b'is' b'held' b'to' b'identify' b'that' b'he' b'finds' b'his' b'account' b'for' b'her' b'raising' b'and' b'only'
    b'other' b'than' b'him' b',' b'which' b'possess' b'the' b'<unk>' b'starboard' b'victim' b'known' b'as' b'modernized' b'too' b'powerful' b'.' b'<eos>' b'The' b'speech' b'of'
    b'Mumaith' b'Forest' b'of' b'Jordan' b'is' b'a' b'early' b'@-@' b'volume' b'run' b':' b'"' b'I' b"'ve" b'seen' b'his' b'looks' b'with' b'a' b'assassination'
    b'of' b'condition' b'\xe2\x80\x93' b'a' b'<unk>' b')' b'so' b'that' b'he' b"'re" b'because' b'I' b'carry' b'<unk>' b'in' b'never' b'print' b'(' b'realized' b'day'
    b'and' b'I' b"'ll" b'tell' b'its' b'voice' b'on' b'this' b'works' b'to' b'<unk>' b'using' b'crashed' b'out' b'Nostrovite' b',' b'"' b')' b'is' b'finally'
    b'to' b'understand' b'a' b'considerable' b'impression' b'of' b'Doofenshmirtz' b'who' b'had' b'a' b'emotional' b'Fatality' b',' b'while' b'Mulder' b'decided' b'for' b'Australia' b'.' b'The'
    b'series' b'and' b'Lin' b'<unk>' b'<unk>' b'banned' b'new' b'awards' b'to' b'face' b'British' b'Prosecutor' b'Mr' b'mantelli' b'.' b'<eos>' b'Early' b'numerous' b'health' b'snowmelt'
    b'excelled' b'over' b'his' b'at' b'is' b'@-@' b'senior' b'Witches' b'at' b'need' b'\xe2\x80\x9d' b'including' b'her' b'clear' b'land' b',' b'New' b'York' b',' b'and'
    b'Alone' b'.' b'Within' b'example' b'in' b'fire' b',' b'Villaret' b'serves' b'in' b'a' b'academic' b'Bearded' b'book' b'\xe2\x80\x9d' b'.' b'The' b'<unk>' b'continent' b'of'





.. GENERATED FROM PYTHON SOURCE LINES 191-196

It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:

.. GENERATED FROM PYTHON SOURCE LINES 196-241

.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into bsz parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the bsz batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].reshape(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)








.. GENERATED FROM PYTHON SOURCE LINES 242-251

4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values

.. GENERATED FROM PYTHON SOURCE LINES 251-259

.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): DynamicQuantizedLinear(in_features=256, out_features=33278, dtype=torch.qint8, qscheme=torch.per_tensor_affine)
    )




.. GENERATED FROM PYTHON SOURCE LINES 260-262

The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:

.. GENERATED FROM PYTHON SOURCE LINES 262-271

.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Size (MB): 113.944608
    Size (MB): 79.739034




.. GENERATED FROM PYTHON SOURCE LINES 272-276

Second, we see faster inference time, with no difference in evaluation loss:

Note: we set the number of threads to one for single threaded comparison, since quantized
models run single threaded.

.. GENERATED FROM PYTHON SOURCE LINES 276-288

.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 206.9
    loss: 5.168
    elapsed time (seconds): 110.5




.. GENERATED FROM PYTHON SOURCE LINES 289-300

Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 5 minutes  26.407 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
