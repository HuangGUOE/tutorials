
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "advanced/dynamic_quantization_tutorial.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(beta) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we will apply the easiest form of quantization -
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.

.. GENERATED FROM PYTHON SOURCE LINES 22-32

.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F








.. GENERATED FROM PYTHON SOURCE LINES 33-39

1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.

.. GENERATED FROM PYTHON SOURCE LINES 39-73

.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))








.. GENERATED FROM PYTHON SOURCE LINES 74-82

2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.

.. GENERATED FROM PYTHON SOURCE LINES 82-132

.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')








.. GENERATED FROM PYTHON SOURCE LINES 133-141

3. Load the pre-trained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pre-trained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.

.. GENERATED FROM PYTHON SOURCE LINES 141-161

.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )




.. GENERATED FROM PYTHON SOURCE LINES 162-165

Now let's generate some text to ensure that the pre-trained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_

.. GENERATED FROM PYTHON SOURCE LINES 165-190

.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b'American' b'standards' b'such' b'as' b'Games' b'and' b'Congregation' b'@-@' b'like' b'@-@' b'TV' b'nasty' b'with' b'national' b'Jews' b',' b'Chennai' b'@-@' b'or' b'@-@'
    b'cells' b',' b'campaigned' b',' b'<unk>' b',' b'amplifier' b'Buddhist' b',' b'<unk>' b',' b'<unk>' b',' b'<unk>' b',' b'<unk>' b',' b'<unk>' b',' b'Superman'
    b',' b'Carlock' b',' b'Hunicke' b',' b'<unk>' b',' b'or' b',' b'looking' b'to' b'<unk>' b'.' b'<eos>' b'He' b'also' b'worked' b'.' b'The' b'rest'
    b'of' b'water' b'is' b'then' b'increasingly' b'[' b'you' b"'ll" b'form' b'the' b'dedication' b'home' b'.' b'He' b'<unk>' b'along' b'the' b'deaths' b'of' b'justice'
    b',' b'they' b'were' b'to' b'be' b'controlled' b',' b'and' b'in' b'1652' b',' b'still' b'resulted' b'in' b'prop' b'<unk>' b'.' b'Mfume' b'was' b'owned'
    b'by' b'an' b'record' b'inscribed' b'on' b'in' b'which' b'<unk>' b',' b'GAA' b';' b'being' b'made' b'more' b'crisis' b'to' b'subdued' b',' b'although' b'only'
    b'had' b'concentrated' b'forever' b'in' b'where' b'<unk>' b'mottled' b'to' b'either' b'a' b'flame' b'of' b'Loire' b'.' b'<eos>' b'In' b'good' b',' b'his' b'purple'
    b'service' b'is' b'confirmed' b'that' b'they' b'might' b'be' b'fused' b'help' b'.' b'There' b'are' b'only' b'only' b'@-@' b'scale' b'<unk>' b',' b'in' b'video'
    b'Bragg' b'.' b'When' b'they' b'are' b'probably' b'the' b'ground' b',' b'additions' b'have' b'any' b'breakdown' b'of' b'limited' b'network' b'.' b'Males' b'fluid' b'and'
    b'chicks' b'such' b'as' b'<unk>' b',' b'demonstrating' b'both' b',' b'Pharaoh' b'or' b'synthesize' b';' b'it' b'danced' b'with' b'that' b'smell' b'.' b'They' b'teachers'
    b'primarily' b'on' b'each' b'"' b'over' b'anyone' b'since' b'they' b'looked' b'so' b'vice' b',' b'relieved' b'Hamelin' b'and' b'more' b'nations' b'at' b'earth' b','
    b'informed' b',' b'"' b'At' b'the' b'outlets' b'of' b'understand' b'leisurely' b'in' b'the' b'region' b'and' b'different' b'any' b'families' b'of' b'which' b'could' b'be'
    b'differentiated' b'.' b'Regarding' b'erosion' b',' b'its' b'asteroid' b'methods' b'III' b'offer' b'a' b'constant' b'influence' b'ashore' b'in' b'the' b'bodies' b'\xe2\x80\x94' b'which' b'this'
    b'is' b'a' b'part' b'for' b'object' b'transformed' b'about' b'Japan' b'other' b'IV' b'periods' b',' b'which' b'appears' b'to' b'be' b'seen' b'in' b'1927' b'.'
    b'harbour' b'<unk>' b'bearing' b'stroke' b'and' b'<unk>' b'.' b'Adult' b'harmonies' b'paint' b'Schultz' b',' b'although' b'they' b'also' b'feature' b'particularly' b'monogamous' b'them' b'.'
    b'In' b'the' b'thrive' b'of' b'1187' b',' b'or' b'proceeds' b'as' b'a' b'crucial' b',' b'male' b'presence' b'moving' b'on' b'a' b'laboratory' b'community' b'.'
    b'The' b'other' b'lines' b'from' b'this' b'species' b'include' b'a' b'average' b'of' b'gene' b'clothes' b'.' b'They' b'<unk>' b'average' b'luminescence' b'by' b'Despite' b'Zhejiang'
    b'through' b'the' b'Naval' b'province' b'of' b'deployed' b'.' b'By' b'flight' b'off' b',' b'headgear' b'spread' b'in' b'a' b'brand' b'to' b'drive' b',' b'called'
    b'that' b'he' b'is' b'still' b'<unk>' b'.' b'<eos>' b'<unk>' b'io9' b'in' b'the' b'Republic' b'of' b'Delhi' b'has' b'survived' b'it' b'into' b'the' b'pagodas'
    b'they' b'were' b'very' b'common' b'.' b'The' b'female' b'fails' b'to' b'follow' b'the' b'arsenal' b'where' b'they' b'begin' b'by' b'arrange' b'down' b',' b'which'
    b'will' b'be' b'dark' b'by' b'<unk>' b',' b'as' b'they' b'argued' b',' b'even' b'they' b"'ve" b'kind' b'demonstrate' b'.' b'This' b'species' b'by' b'brightness'
    b'@-@' b'like' b'cycle' b'ground' b',' b'occasionally' b'oxidation' b',' b'may' b'either' b'assemble' b',' b'visiting' b'that' b'if' b'they' b'are' b'very' b'always' b'able'
    b'to' b'develop' b'humans' b'to' b'it' b';' b'they' b'evolved' b',' b'they' b'have' b'an' b'negative' b'relationship' b'between' b'electromagnetic' b'ages' b'and' b'490' b'motion'
    b'.' b'Artificial' b'removal' b'were' b'their' b'deadly' b'kneeling' b'Bulgarian' b'ones' b'or' b'traverse' b'them' b'to' b'keep' b'any' b'other' b'species' b'of' b'a' b'divers'
    b';' b'it' b'may' b'be' b'"' b'overseen' b'on' b'their' b'Crimean' b'"' b'.' b'Each' b'block' b'catacombs' b'realizes' b'that' b'it' b'was' b'"' b'just'
    b'the' b'complex' b'<unk>' b'"' b'that' b'may' b'be' b'arrested' b'.' b'This' b'concept' b'is' b'captured' b'as' b'Turin' b'and' b'some' b'feed' b'.' b'His'
    b'place' b'afterwards' b'were' b'short' b'and' b'used' b'into' b'some' b'starlings' b',' b'but' b'by' b'example' b',' b'they' b'fusion' b'natural' b'tests' b',' b'and'
    b'one' b'hand' b'wake' b'surrounded' b'to' b'subsidies' b'is' b'coming' b'back' b'writing' b'.' b'<eos>' b'<eos>' b'=' b'=' b'Puritan' b'starling' b'=' b'=' b'<eos>'
    b'<eos>' b'The' b'kakapo' b'can' b'be' b'drained' b'throughout' b'a' b'asteroid' b'study' b'history' b',' b'being' b'of' b'chiefly' b'bleeding' b',' b'and' b'in' b'1880'
    b',' b'they' b'tend' b'to' b'build' b'its' b'fingers' b'.' b'<eos>' b'Though' b'a' b'progenitor' b'gained' b'six' b'hours' b',' b'this' b'bird' b'has' b'four'
    b'to' b'maintain' b'back' b'of' b'Shiva' b'.' b'As' b'it' b'is' b'located' b',' b'the' b'kakapo' b'accelerated' b'over' b'a' b'elaborate' b'pace' b',' b'so'
    b'its' b'items' b'steadily' b'at' b'least' b'so' b'were' b'coming' b'to' b'him' b'if' b'it' b'will' b'edit' b'the' b'ground' b'.' b'often' b'bear' b'rotation'
    b'over' b'having' b'when' b'one' b'leave' b',' b'to' b'leave' b',' b'whether' b'consistent' b'birds' b'to' b'rejoin' b',' b'they' b'sing' b',' b'and' b'it'
    b'does' b'not' b'be' b'possessed' b'.' b'They' b'do' b'fate' b'above' b'<unk>' b'/' b'perhaps' b'look' b',' b'so' b'they' b'may' b'concealed' b'their' b'wings'
    b'mounted' b'them' b'to' b'a' b'specific' b'body' b'at' b'<unk>' b'.' b'punishment' b'are' b'shown' b'rock' b'for' b'male' b'metal' b'nesting' b'in' b'a' b'planet'
    b'with' b'Udayghad' b',' b'with' b'or' b'wind' b'respiratory' b'disperse' b'.' b'Nonetheless' b',' b'that' b'they' b'maintains' b'the' b'eggs' b',' b'they' b'take' b'it'
    b'a' b'small' b',' b'lunette' b'flock' b',' b'after' b'toned' b'over' b'.' b'Such' b'insight' b'some' b'long' b'away' b'when' b'I' b'are' b'ineffective' b'.'
    b'The' b'female' b'operator' b'can' b'produces' b'brown' b'nations' b'and' b'involve' b'their' b'genus' b'.' b'Europium' b'Ch' b'after' b'the' b'birds' b'kept' b'by' b'female'
    b'radiation' b'ground' b',' b'even' b'accurate' b'.' b'Movement' b'therefore' b"'" b'held' b'milk' b'nemesis' b'may' b'be' b'slipped' b'and' b'connected' b'with' b'that' b','
    b'a' b'outposts' b'of' b'water' b'(' b'flight' b'@-@' b'bearing' b'suburb' b'War' b')' b',' b'job' b',' b'<unk>' b'it' b'against' b'fewer' b'flocks' b'such'
    b'as' b'hills' b'.' b'<eos>' b'In' b'the' b'6th' b'century' b',' b'kakapo' b'calls' b'that' b'they' b'agreed' b'to' b'be' b'more' b'adaptable' b'to' b'an'
    b'mechanism' b'.' b'The' b'spots' b'statues' b'somewhat' b'photographed' b',' b'when' b'they' b'mainly' b'variations' b'to' b'prevent' b'nature' b',' b'maintenance' b'they' b'know' b'Cardinal'
    b'Henderson' b'.' b'By' b'either' b'time' b',' b'fewer' b'specimens' b'have' b'an' b'diameter' b'of' b'males' b'from' b'+' b'their' b'dinosaur' b'and' b'even' b'their'
    b'<unk>' b'or' b'bonding' b'sexual' b'size' b'.' b'These' b'males' b'Tobe' b'as' b'most' b'concentrate' b'around' b'<unk>' b',' b'some' b'are' b'permitted' b'to' b'prevent'
    b'cameras' b'or' b'woman' b'like' b'it' b'no' b'a' b'close' b'@-@' b'female' b'behaviour' b',' b'does' b'not' b'be' b'killed' b'.' b'It' b'may' b'be'
    b'found' b'they' b'lightened' b'it' b'or' b'water' b'detailed' b',' b'they' b'were' b'solved' b'from' b'inclusion' b'if' b'flies' b'directly' b'.' b'Also' b',' b'they'
    b'enjoyed' b'them' b'320' b'viewers' b',' b'because' b'their' b'models' b'can' b'benefit' b'Anonymous' b'toward' b'step' b'through' b'treasure' b'and' b'wider' b',' b'making' b'food'
    b'for' b'Aldershot' b'.' b'As' b'they' b'set' b'it' b'with' b'the' b'head' b',' b'horizontal' b'generations' b'provided' b'their' b'wings' b'across' b'Nebaioth' b',' b'which'
    b'they' b'are' b'corrected' b'after' b'they' b'do' b'to' b'young' b'males' b'.' b'If' b'they' b'call' b'so' b'more' b'serious' b',' b'they' b',' b'they'
    b'are' b'reinforced' b'.' b'However' b',' b'so' b'many' b'climbing' b',' b'<unk>' b'due' b'to' b'modern' b'behaviour' b'when' b'most' b'birds' b'have' b'Yingzao' b'imagined'





.. GENERATED FROM PYTHON SOURCE LINES 191-196

It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:

.. GENERATED FROM PYTHON SOURCE LINES 196-241

.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into bsz parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the bsz batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].reshape(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)








.. GENERATED FROM PYTHON SOURCE LINES 242-251

4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values

.. GENERATED FROM PYTHON SOURCE LINES 251-259

.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): DynamicQuantizedLinear(in_features=256, out_features=33278, dtype=torch.qint8, qscheme=torch.per_tensor_affine)
    )




.. GENERATED FROM PYTHON SOURCE LINES 260-262

The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:

.. GENERATED FROM PYTHON SOURCE LINES 262-271

.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Size (MB): 113.944608
    Size (MB): 79.739034




.. GENERATED FROM PYTHON SOURCE LINES 272-276

Second, we see faster inference time, with no difference in evaluation loss:

Note: we set the number of threads to one for single threaded comparison, since quantized
models run single threaded.

.. GENERATED FROM PYTHON SOURCE LINES 276-288

.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 195.5
    loss: 5.168
    elapsed time (seconds): 104.6




.. GENERATED FROM PYTHON SOURCE LINES 289-300

Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 5 minutes  8.324 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
