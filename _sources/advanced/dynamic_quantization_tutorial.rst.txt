
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "advanced/dynamic_quantization_tutorial.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(beta) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we will apply the easiest form of quantization -
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.

.. GENERATED FROM PYTHON SOURCE LINES 22-32

.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F








.. GENERATED FROM PYTHON SOURCE LINES 33-39

1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.

.. GENERATED FROM PYTHON SOURCE LINES 39-73

.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))








.. GENERATED FROM PYTHON SOURCE LINES 74-82

2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.

.. GENERATED FROM PYTHON SOURCE LINES 82-132

.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')








.. GENERATED FROM PYTHON SOURCE LINES 133-141

3. Load the pre-trained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pre-trained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.

.. GENERATED FROM PYTHON SOURCE LINES 141-161

.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )




.. GENERATED FROM PYTHON SOURCE LINES 162-165

Now let's generate some text to ensure that the pre-trained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_

.. GENERATED FROM PYTHON SOURCE LINES 165-190

.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b',' b'struggling' b'through' b'a' b'three' b'@-@' b'54' b'years' b'against' b'Hellblazer' b'.' b'<eos>' b'<eos>' b'=' b'=' b'=' b'<unk>' b'=' b'=' b'='
    b'<eos>' b'<eos>' b'In' b'1135' b',' b'children' b'helped' b'galleries' b'a' b'big' b',' b'a' b'name' b'of' b'art' b'decade' b',' b'but' b'won' b'increasingly'
    b'protester' b'of' b'rare' b'awareness' b';' b'especially' b'over' b'the' b'voices' b'it' b'ranking' b'with' b'her' b'behavior' b'goes' b'to' b'commercial' b'studios' b'.' b'A'
    b'similar' b'inscription' b'of' b'preseason' b'6' b'@.@' b'2' b'@.@' b'2' b'million' b',' b'a' b'total' b'of' b'fiestas' b'demonstrated' b'the' b'main' b'orbits' b'of'
    b'an' b'planet' b',' b'a' b'volume' b'of' b'audience' b',' b'in' b'high' b',' b'weak' b',' b'sex' b'or' b'yellow' b'friends' b'.' b'He' b'is'
    b'dangerous' b'in' b'virtually' b'place' b'during' b'his' b'respective' b'sword' b'and' b'poems' b'.' b'Kevin' b'leaves' b'a' b'large' b'defining' b'annal' b'mechanism' b':' b'a'
    b'star' b'is' b'"' b'buy' b'"' b'such' b'as' b'assaulted' b'it' b'in' b'the' b'back' b'with' b'roll' b'<unk>' b'.' b'This' b'species' b'can' b'be'
    b'able' b'to' b'be' b'affected' b'by' b'scavengers' b'.' b'policy' b'believe' b'that' b'loving' b'another' b'devotees' b'was' b'intimate' b',' b'if' b'due' b'to' b'Pemba'
    b',' b'they' b'Put' b'Rainn' b'See' b'-' b'and' b'venom' b'spread' b'out' b'to' b'cross' b'him' b'.' b'Liam' b'bought' b'general' b'and' b'successful' b'to'
    b'create' b'preserved' b'beta' b'apartments' b',' b'which' b'are' b'controlled' b'by' b'<unk>' b'kelvin' b',' b'Trujillo' b'details' b'the' b'show' b'to' b'Mahesh' b',' b'himself'
    b'for' b'a' b'mixture' b'of' b'a' b'evil' b'oval' b'chain' b',' b'pitching' b',' b'Sanh' b'when' b'they' b'wouldn' b"'t" b'spar' b'.' b'Sometimes' b'you'
    b'die' b'.' b'Behind' b'that' b'he' b'have' b'involving' b'referring' b'for' b'this' b'Cynan' b'to' b'a' b'array' b'of' b'or' b'law' b',' b'output' b'displayed'
    b'or' b'no' b'sex' b'methods' b'.' b'<unk>' b',' b'and' b'on' b'alpine' b'affairs' b'explosions' b',' b'they' b'took' b'time' b'to' b'run' b'presumably' b','
    b'but' b'unclear' b'they' b'take' b'her' b',' b'so' b'they' b'Umar' b'elbow' b'Danko' b'.' b'Ultimately' b',' b'<unk>' b'(' b'directly' b'illustrates' b')' b'and'
    b'<unk>' b')' b'of' b'astronomical' b'DNA' b'will' b'be' b';' b'or' b'whom' b'Tithonian' b'in' b'the' b'bet' b'they' b'can' b'be' b'pretty' b'going' b'to'
    b'help' b'passengers' b',' b'and' b'even' b'presents' b'Hamels' b'.' b'Mint' b'WCA' b'is' b'the' b'first' b'two' b',' b'more' b'Upset' b'back' b'.' b'Because'
    b'there' b'cracks' b'the' b'red' b'lord' b"'s" b'cuisine' b'in' b'the' b'"' b'Odaenathus' b'"' b',' b'and' b'<unk>' b'not' b'speak' b'to' b'sell' b','
    b'or' b'instead' b'of' b'occupying' b'\xe2\x80\x93' b'them' b'on' b'his' b'<unk>' b'abilities' b'.' b'In' b'1989' b',' b'they' b'staged' b'accidents' b'from' b'within' b'<unk>'
    b'lectures' b'on' b'hilltop' b'protests' b',' b'because' b'these' b'female' b'officials' b'are' b'required' b'to' b'that' b',' b'being' b'dissipated' b'to' b'pink' b'players' b'in'
    b'an' b'non' b'@-@' b'calls' b'.' b'It' b'is' b'also' b'highly' b'stable' b'in' b'one' b'of' b'the' b'first' b'states' b',' b'more' b'of' b'it'
    b'.' b'What' b',' b'before' b'many' b'of' b'his' b'behaviour' b'a' b'donation' b',' b'died' b'them' b'from' b'a' b'planet' b'and' b'the' b'first' b'various'
    b'plane' b'(' b'released' b'by' b'measuring' b'1' b'\xe2\x80\x93' b'3' b'minutes' b')' b',' b'gives' b'her' b'guard' b'wished' b'by' b'being' b'putting' b'.' b'<eos>'
    b'<eos>' b'=' b'=' b'Taxonomy' b'context' b'=' b'=' b'<eos>' b'<eos>' b'The' b'official' b'version' b'of' b'living' b'in' b'<unk>' b']' b'<eos>' b'One' b'of'
    b'Glass' b"'s" b'boyfriend' b',' b'and' b'"' b'attractive' b'<unk>' b'"' b',' b'are' b'a' b'second' b'planet' b'by' b'Youth' b'@-@' b'speaking' b'263' b'on'
    b'the' b'YouTube' b'.' b'<unk>' b'Jacques' b'richly' b'David' b'Davidson' b'garnered' b'on' b'Freddie' b'<unk>' b'in' b'2001' b'.' b'The' b'story' b'was' b'taken' b'in'
    b'1996' b'\xe2\x80\x93' b'6' b',' b'and' b'in' b'titled' b'Paul' b'II' b'in' b'2007' b',' b'has' b'seen' b'these' b'features' b'from' b'the' b'album' b','
    b'which' b'was' b'remastered' b'that' b'that' b'<unk>' b'"' b'form' b'being' b'too' b'more' b'modern' b'hook' b'shoots' b'white' b'that' b'is' b'alpine' b',' b'also'
    b'made' b'it' b'.' b'"' b'With' b'all' b'modification' b'in' b'many' b'countries' b',' b'Vasco' b'v.' b'Tuff' b'!' b'that' b'Ceres' b'asked' b'a' b'adult'
    b'approximate' b'Rise' b'if' b'her' b'<unk>' b'replacement' b'.' b'take' b',' b'on' b'either' b',' b'if' b'it' b'remains' b'it' b'does' b'not' b'extend' b'produce'
    b'.' b'As' b'a' b'anatomical' b'children' b',' b'the' b'association' b'between' b'Laverton' b'from' b'stork' b'listed' b'a' b'active' b'image' b'from' b'the' b'Christian' b'rhyme'
    b'from' b'Vasco' b'Seymour' b'wrote' b'and' b'"' b'hidden' b'darkness' b'and' b'scary' b'...' b'Child' b'of' b'Drum' b'police' b',' b'dark' b',' b'and' b'adults'
    b'belonging' b'to' b'apart' b',' b'and' b'Hz' b',' b'fewer' b'disagreements' b'ago' b'grass' b'places' b'his' b'said' b"'" b'evoke' b',' b'this' b'listen' b'to'
    b'their' b'physical' b'print' b'.' b'"' b'The' b'label' b'dedicated' b'the' b'perception' b'of' b'genius' b'in' b'a' b'Raffles' b'form' b'upon' b'Resolution' b'Scott' b'of'
    b'People' b',' b'which' b'should' b'ever' b'be' b'heard' b'down' b'.' b'In' b'both' b'@-@' b'eye' b',' b'critics' b'began' b'its' b'old' b'female' b'alteration'
    b'of' b'the' b'tapping' b'<unk>' b',' b'and' b'they' b'lost' b'with' b'which' b'his' b'appearance' b'is' b'intended' b'.' b'Early' b'asleep' b'on' b'@-@' b'screen'
    b',' b'the' b'clockwise' b'night' b'narration' b'is' b'discovered' b'holds' b'<unk>' b',' b'which' b'are' b'discovered' b'in' b'a' b'complex' b'role' b'.' b'<eos>' b'The'
    b'name' b'is' b'a' b'pure' b'item' b'than' b'a' b'sword' b'.' b'One' b'books' b'are' b'back' b'being' b'fueled' b'by' b'<unk>' b'"' b'specifically' b'"'
    b'Touch' b'and' b'the' b'R\xc3\xa9union' b'Palestinian' b'Bang' b'component' b'<unk>' b'<unk>' b'.' b'The' b'pair' b'meet' b'heavily' b',' b'but' b'may' b'be' b'contracting' b';'
    b'the' b'interstellar' b'starling' b'was' b'rare' b'and' b'considerable' b'only' b'surface' b'pagodas' b'a' b'female' b'animal' b',' b'that' b'according' b'to' b'the' b'required' b'desire'
    b'to' b'emerge' b'after' b'triangle' b'.' b'To' b'be' b'good' b'or' b'third' b'up' b'into' b'this' b'time' b',' b'they' b'crew' b'the' b'clothes' b'from'
    b'facial' b'authors' b'.' b'<eos>' b'amongst' b'ecology' b'on' b'the' b'kakapo' b',' b'they' b'are' b'common' b'or' b'acidic' b'or' b'directly' b'.' b'There' b'are'
    b'staying' b'at' b'night' b'due' b'to' b'a' b'fox' b'despite' b'white' b'scheme' b'.' b'It' b'is' b'usually' b'often' b'able' b'to' b'exist' b',' b'Starr'
    b',' b'Max' b"'s" b'sepulchral' b',' b'and' b'naked' b',' b'giving' b'her' b'skills' b'of' b'chromosomes' b"'s" b'films' b'.' b'In' b'all' b'"' b'night'
    b'"' b',' b'the' b'supreme' b'dissidents' b'is' b'introduced' b'away' b'on' b'Sil' b',' b'confirmed' b'that' b'the' b'body' b'is' b'intended' b'to' b'keep' b'their'
    b'assent' b',' b'forming' b'that' b'they' b'should' b'be' b'different' b'.' b'<eos>' b'<eos>' b'=' b'=' b'Structure' b'=' b'=' b'<eos>' b'<eos>' b'According' b'to'
    b'mobbing' b'demons' b',' b'Ceres' b'tells' b'that' b'they' b'are' b'unclear' b'from' b'.' b'He' b'always' b'does' b'not' b'speak' b'Machinery' b'to' b'Inside' b'rebellions'
    b'vote' b'for' b'over' b'touchdowns' b'instead' b'of' b'approximately' b'5' b'a.m.' b'will' b'be' b'engaged' b'in' b'evidence' b',' b'<unk>' b'or' b'statues' b':' b'"'
    b'The' b'unmarried' b'evidence' b'of' b'the' b'face' b'of' b'it' b',' b'more' b'green' b',' b'and' b'you' b'is' b'<unk>' b'that' b'humans' b'are' b'estranged'
    b'.' b'That' b'songs' b',' b'spending' b'60s' b',' b'standing' b'at' b'the' b'Church' b'of' b'people' b'.' b'"' b'Field' b'pioneers' b'is' b'a' b'definitive'
    b'or' b'aggressive' b'art' b'that' b'emphasising' b'the' b'characters' b"'" b'death' b'to' b'Delhi' b'.' b'The' b'female' b'of' b'fangs' b'<unk>' b',' b'chapel' b','





.. GENERATED FROM PYTHON SOURCE LINES 191-196

It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:

.. GENERATED FROM PYTHON SOURCE LINES 196-241

.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into bsz parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the bsz batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].reshape(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)








.. GENERATED FROM PYTHON SOURCE LINES 242-251

4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values

.. GENERATED FROM PYTHON SOURCE LINES 251-259

.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): DynamicQuantizedLinear(in_features=256, out_features=33278, dtype=torch.qint8, qscheme=torch.per_tensor_affine)
    )




.. GENERATED FROM PYTHON SOURCE LINES 260-262

The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:

.. GENERATED FROM PYTHON SOURCE LINES 262-271

.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Size (MB): 113.944608
    Size (MB): 79.739034




.. GENERATED FROM PYTHON SOURCE LINES 272-276

Second, we see faster inference time, with no difference in evaluation loss:

Note: we set the number of threads to one for single threaded comparison, since quantized
models run single threaded.

.. GENERATED FROM PYTHON SOURCE LINES 276-288

.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 209.8
    loss: 5.168
    elapsed time (seconds): 106.6




.. GENERATED FROM PYTHON SOURCE LINES 289-300

Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 5 minutes  25.191 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
