
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "advanced/dynamic_quantization_tutorial.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(beta) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we will apply the easiest form of quantization -
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.

.. GENERATED FROM PYTHON SOURCE LINES 22-32

.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F








.. GENERATED FROM PYTHON SOURCE LINES 33-39

1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.

.. GENERATED FROM PYTHON SOURCE LINES 39-73

.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))








.. GENERATED FROM PYTHON SOURCE LINES 74-82

2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.

.. GENERATED FROM PYTHON SOURCE LINES 82-132

.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')








.. GENERATED FROM PYTHON SOURCE LINES 133-141

3. Load the pre-trained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pre-trained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.

.. GENERATED FROM PYTHON SOURCE LINES 141-161

.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )




.. GENERATED FROM PYTHON SOURCE LINES 162-165

Now let's generate some text to ensure that the pre-trained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_

.. GENERATED FROM PYTHON SOURCE LINES 165-190

.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b'as' b'of' b'1' b'December' b'2006' b',' b'and' b'the' b'former' b'precursor' b'because' b'of' b'the' b'all' b'@-@' b'generation' b'African' b'Minister' b'of' b'cores'
    b'show' b'far' b'.' b'In' b'his' b'grant' b',' b'and' b'the' b'first' b'or' b'third' b',' b'three' b'have' b'occasionally' b'safely' b'a' b'Augustan' b'Dixon'
    b',' b'Mueller' b'(' b'and' b'in' b'literature' b')' b'and' b'SAT' b'soft' b'Australian' b',' b'with' b'learned' b'assent' b'(' b'<unk>' b')' b',' b'seat'
    b'wavy' b'binge' b',' b'dust' b'and' b'Yan' b'level' b'.' b'The' b'resources' b'of' b'Grace' b'and' b'its' b'wife' b'Otto' b'(' b'1981' b')' b'horizontal'
    b'time' b'members' b'Mississippi' b',' b'attempted' b'to' b'be' b'kakapo' b'<unk>' b'by' b'Raymond' b'V' b'.' b'The' b'private' b'buildings' b'again' b'took' b'place' b'on'
    b'a' b'greater' b'shortage' b'of' b'begs' b'route' b'between' b'an' b'transit' b'of' b'dollars' b',' b'to' b'observe' b'a' b'acceptance' b'of' b'their' b'cargo' b'complex'
    b'.' b'The' b'choice' b'of' b'kingpin' b'Senators' b'suggests' b'what' b'to' b'be' b'thoughtful' b'with' b'their' b'body' b',' b'which' b'Ross' b'accepted' b'straight' b'in'
    b'fourteen' b'years' b'after' b'resigned' b'as' b'an' b'planet' b'.' b'Despite' b'Mark' b'Edward' b'Sugar' b',' b'the' b'theory' b'received' b'some' b'reception' b'in' b'mushroom'
    b'rhymes' b'.' b'<eos>' b'When' b'soldier' b'held' b'create' b'his' b'roadways' b',' b'counts' b'five' b'years' b'of' b'42' b'%' b'of' b'years' b'started' b'or'
    b'every' b'short' b'spell' b'who' b'underwent' b'in' b'his' b'mainstream' b'works' b'.' b'The' b'direct' b'book' b',' b'which' b'lies' b'into' b'volunteer' b'to' b'support'
    b'237' b'@,@' b'000' b'near' b'its' b'stories' b'indicated' b'to' b'follow' b'the' b'bird' b'hair' b'at' b'any' b'Tokyo' b'games' b'.' b'In' b'1836' b','
    b'he' b'a' b'four' b'@-@' b'day' b'group' b'may' b'result' b'the' b'interests' b'of' b'North' b'R' b'steroids' b'on' b'2011' b'.' b'Media' b'For' b'general'
    b'claims' b'was' b'given' b'an' b'enhanced' b'hall' b',' b'in' b'progress' b',' b'but' b'the' b'game' b'was' b'favored' b'of' b'wheeled' b'Ulaid' b'Studios' b'.'
    b'One' b'deals' b'broke' b'in' b'presentations' b',' b'and' b'used' b'dead' b'effects' b',' b'can' b'have' b'made' b'one' b'films' b'disrupted' b'booming' b'like' b'kidnapped'
    b'intensity' b'in' b'Sherman' b'seas' b'.' b'<eos>' b'Costume' b'landmarks' b'gendarmerie' b'secured' b'offensive' b'degrees' b'in' b'air' b'things' b',' b'which' b'were' b'usually' b'isolated'
    b',' b'attaining' b'by' b'<unk>' b'Will' b'Hatfield' b',' b'encouraging' b'it' b'in' b'several' b'more' b'<unk>' b'novels' b'.' b'<eos>' b'The' b'March' b'Asian' b'version'
    b'of' b'FITs' b'and' b'their' b'potential' b'establishment' b',' b'<unk>' b',' b'and' b'lectures' b',' b'were' b'able' b'to' b'run' b'in' b'other' b'blockships' b'in'
    b'the' b'effort' b'.' b'The' b'author' b'treated' b'a' b'third' b'frontal' b'video' b'months' b',' b'which' b'saxophonist' b'the' b'Bayreuth' b'graphics' b'she' b'could' b'Naturels'
    b'work' b'.' b'<unk>' b'later' b'shared' b'her' b'father' b'strengths' b'toward' b'safety' b'in' b'1961' b'.' b'<eos>' b'Because' b'human' b'musician' b':' b'Mortimer' b'Highlander'
    b'and' b'The' b'other' b'are' b'drilled' b'into' b'rock' b'moves' b',' b'Emma' b'told' b'<unk>' b'acted' b'as' b'the' b'planet' b"'s" b'most' b'popular' b'Formula'
    b"'Malley" b'asserting' b'.' b'Two' b'voices' b'was' b'derived' b'to' b'work' b'as' b'large' b'food' b',' b'caused' b'by' b'the' b'FIA' b',' b'which' b'were'
    b'successful' b'by' b'the' b'Boston' b'network' b'.' b'The' b'Polish' b'language' b'may' b'be' b'<unk>' b'to' b'protect' b'manufacturing' b'systems' b'that' b'are' b'now' b'@-@'
    b'fundamental' b'or' b'Chopin' b'have' b'Rockets' b'.' b'<unk>' b'interval' b'Thomas' b'believes' b'the' b'Guardian' b"'s" b'modern' b'studies' b'that' b'Tetris' b'Logan' b'from' b'a'
    b'military' b'network' b',' b'and' b'James' b'removed' b'his' b'Korean' b'biography' b'for' b'one' b'option' b'per' b'to' b'@-@' b'platform' b'side' b'against' b'<unk>' b'trails'
    b',' b'about' b'short' b'being' b'printed' b'.' b'Latex' b'else' b'is' b'distributed' b'to' b'heaven' b',' b'philanthropist' b"'Africaine" b',' b'and' b'colonization' b'to' b'create'
    b'150' b'scoreless' b'stories' b'\xc2\xa3' b'4' b'million' b'per' b'year' b'.' b'Mosley' b'was' b'bent' b'from' b'persuade' b'in' b'entry' b'in' b'a' b'toilet' b'.'
    b'Their' b'successor' b'ruled' b'him' b'by' b'other' b'observations' b',' b'dedicated' b'to' b'logged' b'the' b'company' b'code' b'in' b'Foreign' b'sacrificial' b',' b'woodland' b'and'
    b'their' b'witches' b',' b'<unk>' b',' b'schools' b',' b'<unk>' b',' b'O' b'<unk>' b',' b'<unk>' b',' b'smokers' b',' b'Siberia' b'and' b'lignotuberous' b'.'
    b'<eos>' b'<unk>' b'flees' b'between' b'this' b'stage' b'is' b'a' b'mechanism' b'of' b'top' b'a' b'mob' b'got' b'to' b'succeed' b'from' b'that' b'of' b'harder'
    b'.' b'Despite' b'reaching' b'Fascists' b'Franz' b'Valkyria' b'Bang' b'chips' b',' b'Mosley' b'reduced' b'ruined' b'soils' b'in' b'traditional' b'Deacon' b',' b'some' b'of' b'whom'
    b'had' b'merely' b'waited' b'to' b'sink' b'with' b'for' b'expected' b'remit' b',' b'critiqued' b'them' b'amongst' b'for' b'coordinator' b'and' b'<unk>' b'of' b'Great' b'Britain'
    b'.' b'The' b'parental' b'might' b'later' b'have' b'occurred' b',' b'and' b'in' b'some' b'years' b'he' b'are' b'also' b'assessed' b'known' b'to' b'traverse' b'a'
    b'layered' b'quantity' b'.' b'However' b',' b'by' b'51' b'May' b'1931' b',' b'a' b'ibis' b'from' b'January' b'21' b',' b'2001' b',' b'were' b'collected'
    b'in' b'water' b'and' b'<unk>' b'to' b'supplement' b'working' b',' b'by' b'Eligius' b'organizations' b'at' b'140' b'years' b'games' b'right' b'by' b'ecosystems' b'.' b'Later'
    b'were' b'allowed' b'commissioned' b',' b'there' b'is' b'no' b'connection' b'with' b'thirty' b'@-@' b'term' b'Indian' b'society' b'of' b'15' b'@,@' b'000' b'throw' b'tons'
    b'Hanneman' b'currently' b'existed' b'in' b'2004' b'.' b'A' b'Jewish' b'Gaelic' b'response' b'has' b'been' b'unavailable' b',' b'when' b'3' b'@.@' b'3' b'metres' b'('
    b'9' b'@.@' b'5' b'from' b')' b'were' b'sought' b'plant' b',' b'and' b'for' b'most' b'maximum' b'developed' b'days' b'would' b'be' b'seen' b'.' b'<eos>'
    b'The' b'traditional' b'region' b',' b'which' b'was' b'announced' b'to' b'be' b'20' b'@.@' b'175' b'centimetres' b'(' b'95' b'ft' b')' b'tall' b',' b'is'
    b'burns' b'they' b'serve' b'as' b'a' b'police' b'1' b'\xe2\x80\x93' b'60' b'by' b'one' b'high' b'couguar' b',' b'whereas' b'there' b'are' b'be' b'often' b'possible'
    b'an' b'full' b'ball' b'by' b'sea' b'Eurasia' b'.' b'There' b'are' b'failed' b'for' b'fight' b'Bourbon' b'7' b'@.@' b'2' b'million' b'miles' b'(' b'5'
    b'@.@' b'75' b'in' b')' b'thick' b',' b'four' b'or' b'40' b'seconds' b',' b'as' b',' b'such' b'as' b'still' b'by' b'other' b'monopoly' b'carefully'
    b'its' b'first' b'moves' b',' b'increase' b'bejewelled' b'reels' b',' b'and' b'stabilization' b'or' b'<unk>' b'from' b'the' b'orbit' b'.' b'This' b'rushes' b'birds' b','
    b'they' b'survey' b'they' b'charged' b',' b'they' b'admitted' b'anywhere' b',' b'even' b',' b'not' b'unopposed' b'.' b'In' b'1893' b',' b'187' b',' b'fruits'
    b',' b'although' b'any' b'sacrifice' b'put' b'greater' b'birds' b'originated' b'in' b'varied' b'numbers' b',' b'they' b'lie' b'to' b'less' b'credit' b',' b'machine' b'or'
    b'one' b'of' b'colour' b'will' b'stay' b',' b'Mangalore' b',' b'on' b'by' b'ruins' b',' b'circulation' b'up' b'converted' b'a' b'small' b'high' b'period' b'would'
    b'be' b'targeted' b'by' b'either' b'due' b'.' b'The' b'(' b'<unk>' b'or' b'<unk>' b')' b'is' b'1' b'@.@' b'7' b'\xce\xbcm' b'or' b'1' b'@.@'
    b'5' b'\xe2\x80\x93' b'8' b'tonnes' b'(' b'55' b'@.@' b'8' b'km' b'/' b'h' b')' b',' b'but' b'can' b'be' b'the' b'winner' b'of' b'his'
    b'beak' b'.' b'<eos>' b'Seven' b'study' b'exist' b'by' b'<unk>' b'they' b'burn' b'when' b'they' b'lives' b',' b'and' b'female' b'copper' b',' b'however' b'grounds'
    b',' b'and' b'there' b'have' b'taught' b'extensive' b'behaviour' b',' b'although' b'in' b'2015' b'the' b'female' b'may' b'be' b'worried' b'in' b'time' b',' b'dominated'
    b'by' b'birds' b'or' b'habitat' b'pressure' b'having' b'its' b'plane' b'shafts' b'.' b'It' b'were' b'weakened' b'in' b'long' b'times' b',' b'when' b'it' b'will'





.. GENERATED FROM PYTHON SOURCE LINES 191-196

It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:

.. GENERATED FROM PYTHON SOURCE LINES 196-241

.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into bsz parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the bsz batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].reshape(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)








.. GENERATED FROM PYTHON SOURCE LINES 242-251

4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values

.. GENERATED FROM PYTHON SOURCE LINES 251-259

.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): DynamicQuantizedLinear(in_features=256, out_features=33278, dtype=torch.qint8, qscheme=torch.per_tensor_affine)
    )




.. GENERATED FROM PYTHON SOURCE LINES 260-262

The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:

.. GENERATED FROM PYTHON SOURCE LINES 262-271

.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Size (MB): 113.944608
    Size (MB): 79.739034




.. GENERATED FROM PYTHON SOURCE LINES 272-276

Second, we see faster inference time, with no difference in evaluation loss:

Note: we set the number of threads to one for single threaded comparison, since quantized
models run single threaded.

.. GENERATED FROM PYTHON SOURCE LINES 276-288

.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 198.6
    loss: 5.168
    elapsed time (seconds): 106.3




.. GENERATED FROM PYTHON SOURCE LINES 289-300

Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 5 minutes  13.313 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
