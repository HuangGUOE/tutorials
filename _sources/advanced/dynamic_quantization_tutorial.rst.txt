
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "advanced/dynamic_quantization_tutorial.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(beta) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we will apply the easiest form of quantization -
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.

.. GENERATED FROM PYTHON SOURCE LINES 22-32

.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F








.. GENERATED FROM PYTHON SOURCE LINES 33-39

1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.

.. GENERATED FROM PYTHON SOURCE LINES 39-73

.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))








.. GENERATED FROM PYTHON SOURCE LINES 74-82

2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.

.. GENERATED FROM PYTHON SOURCE LINES 82-132

.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')








.. GENERATED FROM PYTHON SOURCE LINES 133-141

3. Load the pre-trained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pre-trained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.

.. GENERATED FROM PYTHON SOURCE LINES 141-161

.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )




.. GENERATED FROM PYTHON SOURCE LINES 162-165

Now let's generate some text to ensure that the pre-trained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_

.. GENERATED FROM PYTHON SOURCE LINES 165-190

.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b'figures' b'of' b'Manor' b'Aidid' b',' b'flies' b'for' b'two' b'departure' b'in' b'regions' b'.' b'The' b'principal' b'Isles' b'ritualised' b'link' b'are' b'squarely' b':'
    b'using' b'an' b'variety' b'of' b'body' b'birds' b'for' b'<unk>' b',' b'wide' b'@-@' b'millimetre' b',' b'among' b'adults' b'.' b'Personnel' b'scattered' b'those' b'that'
    b'may' b'be' b'served' b'as' b'"' b'gill' b',' b'<unk>' b'and' b'valuable' b'<unk>' b'"' b'.' b'In' b'a' b'return' b'to' b'<unk>' b'Gulbenkian' b','
    b'two' b'fledging' b'<unk>' b'was' b'introduced' b'into' b'football' b'.' b'According' b'to' b'the' b'lack' b'of' b'aziridines' b'in' b'symbol' b',' b'viewing' b'after' b'being'
    b'chosen' b'to' b'be' b'approved' b',' b'they' b'are' b'unclear' b'Donnie' b'Commissioner' b'Ferguson' b',' b'also' b'I.' b'D.' b'Pius' b'signifying' b'Irish' b'<unk>' b'Mode'
    b',' b'illegal' b'like' b'leaving' b'more' b'than' b'250' b'hours' b'were' b'played' b'over' b'.' b'A' b'female' b'species' b'entirely' b',' b'when' b'nodes' b','
    b'collectively' b',' b'and' b'stoichiometric' b'borne' b'Wasp' b'by' b'a' b'Guitar' b'or' b'ban' b'1952' b',' b'was' b'frustrated' b'on' b'a' b'mild' b'head' b'for'
    b'art' b'Vogler' b'and' b'detecting' b'in' b'Europe' b'when' b'males' b'appear' b'with' b'admiration' b',' b'which' b'must' b'be' b'put' b'down' b'by' b'writ' b'of'
    b'the' b'sternum' b'.' b'<unk>' b'Argentina' b',' b'tendons' b'whatever' b'featured' b'the' b'Sami' b'falcon' b'of' b'<unk>' b'the' b'chapterhouse' b'rule' b'around' b'the' b'collapse'
    b'of' b'Ceres' b',' b'and' b'in' b'Britain' b"'s" b'appearance' b'from' b'magnitude' b'manual' b',' b'dried' b'Ukraine' b'were' b'charms' b'.' b'In' b'young' b','
    b'it' b'has' b'been' b'suggested' b'for' b'rare' b'reasons' b'from' b'their' b'face' b'.' b'The' b'milk' b'opponent' b'is' b'depicted' b'by' b'Floyd' b'root' b','
    b'which' b'are' b'more' b'differences' b';' b'they' b'islands' b'back' b'largely' b'.' b'<eos>' b'Lisa' b'populations' b'are' b'attracted' b'.' b'<eos>' b'The' b'range' b'of'
    b'number' b'have' b'caps' b'at' b'<unk>' b'problems' b'(' b'including' b'Christianisation' b'7' b'@.@' b'4' b'm' b'(' b'1' b'@.@' b'62' b'ft' b')' b'round'
    b'than' b'1' b'metres' b'(' b'40' b'm' b')' b'deep' b'.' b'It' b'is' b'traditionally' b'look' b'to' b'decline' b',' b'so' b'about' b'2016' b'are'
    b'not' b'high' b'.' b'<eos>' b'The' b'Italians' b'typically' b'varies' b'upon' b'on' b'28' b'June' b'1925' b',' b'and' b'this' b'may' b'be' b'important' b'by'
    b'spinoff' b'speak' b'and' b'Stones' b'to' b'go' b'through' b'3' b'%' b'.' b'Lover' b'in' b'length' b'ligand' b'\xe1\x83\x95' b'gentler' b',' b'which' b'may' b'be'
    b'studied' b'as' b'little' b'as' b'food' b'.' b'Males' b'<unk>' b'course' b'quick' b'from' b'a' b'plant' b'\xe2\x80\x93' b'vibration' b',' b'shielded' b'45' b'@.@' b'3'
    b'miles' b'(' b'12' b'@.@' b'0' b'km' b')' b'north' b'of' b'Moravia' b',' b'in' b'that' b'way' b'they' b'detected' b'its' b'eggs' b'during' b'a'
    b'parenting' b'mass' b'<unk>' b'.' b'"' b'For' b'Indian' b'Corrientes' b'<unk>' b'up' b'under' b'semen' b'departs' b'and' b'potential' b'a' b'coalition' b'Tonight' b'call' b'and'
    b'engage' b'forward' b',' b'true' b'away' b',' b'and' b'<unk>' b',' b'and' b'there' b'associated' b'no' b'natural' b'ores' b'on' b'Rascal' b'Catalan' b'.' b'"'
    b'Cambridge' b'was' b'also' b'unemployed' b'due' b'from' b'the' b'long' b'part' b'of' b'51' b'CE' b',' b'because' b'sucking' b'into' b'Australian' b'Cushing' b',' b'though'
    b'they' b'are' b'uniform' b'in' b'Khandoba' b',' b'speculate' b'on' b'the' b'island' b'.' b'Berg' b'followed' b'before' b'they' b'are' b'calculated' b'by' b'pain' b'.'
    b'The' b'island' b"'s" b'another' b'high' b'range' b'for' b'Mars' b'made' b'to' b'greater' b'or' b'probable' b'Irish' b'calls' b'.' b'About' b'200' b'km' b'('
    b'20' b'ft' b')' b'in' b'length' b'occurred' b'modified' b'at' b'partially' b'eight' b'they' b'emerged' b'down' b'to' b'deprecation' b'.' b'Although' b'this' b'species' b'are'
    b'in' b'prefect' b',' b'bodies' b'fed' b'(' b'sperm' b'faithful' b')' b',' b'and' b'no' b'rapid' b'air' b'reached' b'place' b'away' b'.' b'Among' b'midnight'
    b'from' b'have' b'high' b'suffer' b',' b'with' b'airport' b'snakes' b'about' b'easier' b'weapons' b'to' b'<unk>' b'an' b'orbit' b'surrounded' b'or' b'woodland' b'dwarf' b'areas'
    b'compared' b'to' b'<unk>' b'.' b'Also' b',' b'layer' b'of' b'it' b',' b'Chaos' b',' b'and' b'<unk>' b'design' b'are' b'more' b'temperate' b'content' b'.'
    b'Gandhi' b'Isesi' b'raised' b'significant' b'remains' b'director' b'as' b'the' b'wounds' b'after' b'some' b'find' b'.' b'It' b'is' b'one' b'of' b'the' b'quick' b'able'
    b'to' b'be' b'dated' b'as' b'their' b'best' b'@-@' b'lived' b'rounded' b'to' b'Mostar' b'.' b'It' b'is' b'constantly' b'.' b'On' b'December' b'20' b','
    b'2006' b',' b'the' b'amount' b'of' b'Ceres' b'\xe2\x80\x94' b'Iowa' b',' b'Brutus' b',' b'<unk>' b',' b'Riata' b'and' b'gates' b'were' b'enthusiastic' b'from' b'the'
    b'Idaho' b'Coast' b'district' b'.' b'They' b'were' b'actively' b'known' b'as' b'they' b'were' b'easily' b'regarded' b'during' b'Brazil' b'and' b'02' b'.' b'However' b','
    b'common' b'languages' b'have' b'played' b'power' b',' b'a' b'original' b'Hood' b'...' b'in' b'a' b'confession' b'will' b'be' b'knew' b'to' b'have' b'to' b'itself'
    b'due' b'to' b'the' b'eggs' b'.' b'On' b'her' b'church' b',' b'Junun' b'(' b'as' b'too' b'attached' b'for' b'the' b'reduction' b'of' b'plumage' b'never'
    b'assembled' b'more' b'than' b'50' b'%' b'of' b'86' b'million' b'F' b'(' b'120' b'ft' b')' b'above' b'rate' b',' b'more' b'than' b'2' b'million'
    b'.' b'The' b'Augustan' b'astronomer' b'includes' b'over' b'7' b'@.@' b'5' b'\xe2\x80\x93' b'3' b'@.@' b'1' b'million' b'birds' b'and' b'should' b'have' b'killed' b'consistently'
    b'than' b'58' b'states' b',' b'in' b'100' b'females' b'usually' b'Stockyards' b'.' b'Two' b'transits' b'wear' b'are' b'sufficiently' b'peculiar' b'.' b'It' b'is' b'a'
    b'difficult' b'toxicity' b'of' b'Polish' b'species' b'.' b'However' b',' b'no' b'specialized' b'heat' b'occurs' b'at' b'night' b',' b'either' b'X' b',' b'15' b'\xe2\x80\x93'
    b'15' b'to' b'become' b'small' b'public' b'than' b'zinc' b'or' b'aggressiveness' b'.' b'<eos>' b'<eos>' b'=' b'=' b'Taxonomy' b'=' b'=' b'<eos>' b'<eos>' b'indium'
    b'Research' b'Park' b'carried' b'24th' b'kilometres' b'(' b'<unk>' b'by' b'92' b'@.@' b'8' b'mm' b')' b'wide' b',' b'accurate' b'owl' b'(' b'Byzantine' b':'
    b'DS' b'was' b'mentioned' b'under' b'ecosystem' b'Webster' b')' b'.' b'The' b'understory' b'through' b'bulky' b'barbettes' b'is' b'behind' b'its' b'attendance' b'and' b'one' b'post'
    b'endangered' b'coyotes' b'on' b'the' b'west' b'side' b'of' b'stem' b',' b'with' b'food' b'as' b'Irish' b'@-@' b'shaped' b'cellular' b'Sankat' b'How' b'common' b'complexes'
    b',' b'about' b'4' b'@.@' b'5' b'million' b'years' b'per' b'year' b'.' b'A' b'more' b'rare' b'than' b'Ceres' b'use' b'humans' b',' b'dating' b'to'
    b'the' b'Irish' b'valley' b',' b'may' b'be' b'isolated' b'from' b'scripture' b'on' b'15' b'January' b'1890' b'.' b'<unk>' b',' b'they' b'considered' b'speculated' b'in'
    b'<unk>' b'.' b'<eos>' b'<eos>' b'=' b'=' b'Release' b'=' b'=' b'<eos>' b'<eos>' b'Common' b'starlings' b'Fulfilled' b'(' b'Pinus' b'Mother' b')' b'is' b'referred'
    b'to' b'as' b'more' b'of' b'as' b'addressed' b'by' b'other' b'other' b'analysis' b'.' b'This' b'type' b'can' b'be' b'seen' b'as' b'the' b'main' b'star'
    b',' b'and' b'<unk>' b'arrow' b'is' b'smokers' b'in' b'separate' b'fish' b',' b'around' b'20' b'percent' b'of' b'raiders' b',' b'snow' b',' b'cold' b','
    b'<unk>' b',' b'recordings' b',' b'airborne' b',' b'feedback' b'or' b'female' b'species' b'.' b'It' b'naves' b',' b'and' b'over' b'16' b'\xc2\xb0' b'years' b'to'
    b'lower' b'<unk>' b'.' b'In' b'there' b'are' b'shown' b'very' b'shorter' b'meaning' b'or' b'kitsunetsuki' b',' b'they' b'be' b'counting' b',' b'had' b'vertical' b'onward'
    b',' b'so' b'bivouac' b'might' b'continue' b'to' b'be' b'jump' b'in' b'the' b'sharp' b'fledging' b',' b'human' b'grey' b'gills' b'(' b'blue' b'Album' b')'
    b',' b'or' b'those' b'of' b'food' b'.' b'It' b'is' b'also' b'noted' b'that' b'males' b'may' b'be' b'present' b';' b'RNA' b',' b'they' b'must'





.. GENERATED FROM PYTHON SOURCE LINES 191-196

It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:

.. GENERATED FROM PYTHON SOURCE LINES 196-241

.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into bsz parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the bsz batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].reshape(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)








.. GENERATED FROM PYTHON SOURCE LINES 242-251

4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values

.. GENERATED FROM PYTHON SOURCE LINES 251-259

.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): DynamicQuantizedLinear(in_features=256, out_features=33278, dtype=torch.qint8, qscheme=torch.per_tensor_affine)
    )




.. GENERATED FROM PYTHON SOURCE LINES 260-262

The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:

.. GENERATED FROM PYTHON SOURCE LINES 262-271

.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Size (MB): 113.944608
    Size (MB): 79.739034




.. GENERATED FROM PYTHON SOURCE LINES 272-276

Second, we see faster inference time, with no difference in evaluation loss:

Note: we set the number of threads to one for single threaded comparison, since quantized
models run single threaded.

.. GENERATED FROM PYTHON SOURCE LINES 276-288

.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 193.3
    loss: 5.168
    elapsed time (seconds): 105.6




.. GENERATED FROM PYTHON SOURCE LINES 289-300

Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 5 minutes  7.269 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
