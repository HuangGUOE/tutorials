
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "advanced/dynamic_quantization_tutorial.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(beta) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we will apply the easiest form of quantization -
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.

.. GENERATED FROM PYTHON SOURCE LINES 22-32

.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F








.. GENERATED FROM PYTHON SOURCE LINES 33-39

1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.

.. GENERATED FROM PYTHON SOURCE LINES 39-73

.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))








.. GENERATED FROM PYTHON SOURCE LINES 74-82

2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.

.. GENERATED FROM PYTHON SOURCE LINES 82-132

.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')








.. GENERATED FROM PYTHON SOURCE LINES 133-141

3. Load the pre-trained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pre-trained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.

.. GENERATED FROM PYTHON SOURCE LINES 141-161

.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )




.. GENERATED FROM PYTHON SOURCE LINES 162-165

Now let's generate some text to ensure that the pre-trained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_

.. GENERATED FROM PYTHON SOURCE LINES 165-190

.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b'inside' b'the' b'mount' b'aesthetics' b',' b'filming' b'Gillingham' b'took' b'a' b'four' b'@-@' b'button' b'area' b'in' b'New' b'Zealand' b'.' b'Because' b'he' b'reached'
    b'these' b'close' b'stories' b',' b'"' b'taking' b'two' b'years' b',' b'an' b'few' b'or' b'example' b'in' b'set' b'is' b'unexpected' b'and' b'as' b'showed'
    b'fine' b'outside' b'.' b'"' b'Mosley' b'Hsia' b'published' b'Pryce' b'as' b'"' b'motor' b'appearance' b'that' b'sportswriters' b'grant' b'to' b'aerial' b'reviews' b'to' b'take'
    b'their' b'<unk>' b'and' b'most' b'success' b'"' b'.' b'Hornung' b'conducted' b'a' b'performance' b'considered' b'of' b'Arikamedu' b'in' b'1878' b'.' b'<eos>' b'yielded' b'another'
    b'Mosley' b'and' b'Cambridge' b',' b'with' b'no' b'cable' b'to' b'Portable' b'Maccabi' b'<unk>' b'at' b'The' b'end' b'of' b'spiders' b'he' b'alloy' b'in' b'a'
    b'massacre' b',' b'Fascists' b'operating' b'the' b'title' b',' b'its' b'content' b',' b'civilian' b'young' b'understanding' b',' b'and' b'Paveli\xc4\x87' b'.' b'Baker' b'(' b'no'
    b'"' b'prosperity' b'"' b'was' b'probably' b'canceled' b'Besant' b')' b',' b'which' b'was' b'two' b'more' b'children' b'.' b'<eos>' b'<eos>' b'<eos>' b'=' b'Moment'
    b'State' b'=' b'<eos>' b'<eos>' b'The' b'KPA' b'Island' b'would' b'a' b'well' b'<unk>' b'lead' b'of' b'3' b'@.@' b'8' b'weeks' b'per' b'month' b'and'
    b'eight' b'grown' b'Japanese' b'entering' b'Applications' b',' b'which' b'is' b'distinguished' b'by' b'The' b'Honourable' b',' b'when' b'there' b'has' b'uses' b'possible' b'for' b'50'
    b'for' b'anime' b'.' b'At' b'a' b'29' b'@-@' b'metre' b'volume' b',' b'annual' b',' b'emergency' b',' b'yellow' b',' b'and' b'up' b'the' b'<unk>'
    b'observation' b'of' b'it' b'.' b'It' b'was' b'introduced' b'to' b'run' b'the' b'fourth' b'down' b';' b'high' b'not' b'storm' b'technology' b'could' b'be' b'seen'
    b'.' b'<eos>' b'For' b'its' b'proportion' b'Belt' b'cars' b'began' b'to' b'be' b'recorded' b'than' b'1' b'%' b'of' b'tight' b'birds' b'during' b'a' b'rotation'
    b'.' b'This' b'loss' b'(' b'now' b'only' b'<unk>' b')' b'were' b'noted' b'to' b'speak' b'.' b'Although' b'<unk>' b'was' b'collected' b'in' b'the' b'vicinity'
    b'of' b'Venus' b',' b'and' b'second' b'Want' b'species' b',' b'like' b'that' b'long' b'@-@' b'time' b',' b'cooks' b',' b'have' b'infiltrated' b'its' b'<unk>'
    b'of' b'eyes' b'.' b'<eos>' b'<eos>' b'=' b'=' b'Description' b'=' b'=' b'<eos>' b'<eos>' b'The' b'kakapo' b"'s" b'kakapo' b'is' b'also' b'yet' b'thought'
    b'to' b'have' b'to' b'be' b'done' b'and' b'hurricanes' b',' b'so' b'not' b'expanding' b'before' b'being' b'snails' b',' b'including' b'Ceres' b'being' b'made' b','
    b'however' b'.' b'Planning' b'of' b'Moray' b',' b'171' b'and' b'farmland' b',' b'and' b'the' b'Stronger' b'state' b'damage' b'Tribe' b'J.' b'Carlyle' b'Celtic' b'George'
    b'1804' b',' b'have' b'Jeremi' b'acquired' b'a' b'female' b'rating' b'of' b'Taranto' b'on' b'Fourth' b'Security' b',' b'a' b'adult' b'promoter' b'than' b'found' b'away'
    b'.' b'The' b'common' b'monarch' b'has' b'been' b'introduced' b'as' b'it' b'once' b'not' b'compared' b'to' b'AU' b',' b'and' b'the' b'soft' b'<unk>' b'bird'
    b'of' b'Common' b'Ireland' b'instead' b'of' b'output' b'wasps' b'fear' b'on' b'them' b',' b'"' b'They' b'of' b'beautiful' b'access' b'.' b'It' b'is' b'smaller'
    b',' b'chemotherapy' b',' b'and' b'<unk>' b'.' b'pitch' b'is' b'located' b'about' b'32' b'%' b'of' b'brass' b',' b'molecular' b',' b'I' b'ranges' b'in'
    b'descent' b'and' b',' b'consumption' b"'s" b'cutting' b'back' b'heavy' b',' b'their' b'feelings' b'is' b'Peters' b',' b'hard' b',' b'<unk>' b',' b'distinctions' b','
    b'and' b'<unk>' b'light' b',' b'ditch' b',' b'and' b'iron' b'secondary' b'opining' b'them' b'in' b'a' b'dark' b'environment' b'by' b'not' b'to' b'command' b','
    b'instead' b'.' b'"' b'In' b'place' b',' b'local' b'starlings' b'are' b'widely' b'removed' b'.' b'In' b'addition' b',' b'the' b'glacis' b'of' b'the' b'ibis'
    b'is' b'mainly' b'hence' b'.' b'According' b'to' b'input' b',' b'most' b'birds' b'are' b'simply' b'noted' b';' b'they' b'have' b'<unk>' b'1908' b'Conference' b'@-@'
    b'imitations' b'they' b'feed' b'at' b'images' b'.' b'The' b'birds' b'are' b'politically' b'infrared' b'and' b'lasts' b',' b'but' b'directed' b'by' b'long' b'species' b'were'
    b'writes' b'by' b'almost' b'contain' b'10' b'months' b'onto' b'open' b'approaches' b'.' b'<eos>' b'In' b'the' b'luminosity' b'of' b'Cho' b',' b'efforts' b'boom' b'with'
    b',' b'they' b'can' b'be' b'prevalent' b'.' b'characteristics' b'contain' b'to' b'be' b'obsolete' b'by' b'Arabic' b',' b'elaborate' b',' b'<unk>' b',' b'and' b'<unk>'
    b'common' b'methods' b'.' b'The' b'goddess' b'calligraphy' b'has' b'high' b'protests' b'in' b'constellation' b',' b'some' b'of' b'which' b'are' b'intervened' b'backwards' b'between' b'a'
    b'similar' b'@-@' b'well' b'period' b'against' b'the' b'Pacific' b'Museum' b'and' b'elsewhere' b'before' b'<unk>' b'merely' b'20' b'%' b'.' b'It' b'is' b'only' b'one'
    b'of' b'the' b'oldest' b'partially' b'HIV' b'speech' b'in' b'nature' b'too' b'about' b'into' b'34' b'%' b'54' b'when' b'there' b'are' b'no' b'distribution' b'in'
    b'<unk>' b',' b'which' b'cannot' b'reduce' b'up' b'over' b'200' b'pounds' b'(' b'66' b'in' b')' b'from' b'horse' b'damage' b'.' b'Then' b',' b'they'
    b'are' b'then' b'known' b'as' b'significant' b'females' b',' b'and' b'affected' b'wings' b'and' b'serve' b'on' b'agree' b'from' b'<unk>' b',' b'<unk>' b',' b','
    b'populations' b'that' b'other' b'main' b'starlings' b'have' b'an' b'pink' b'flight' b',' b'a' b'boat' b'declared' b'too' b'distinctive' b'.' b'This' b'hurdling' b'moves' b'into'
    b'a' b'wild' b',' b'traveling' b'just' b'to' b'produce' b'them' b'pain' b'.' b'It' b'also' b'makes' b'those' b'a' b'total' b',' b'yellowish' b',' b'or'
    b'Tarore' b'.' b'The' b'most' b'famous' b'attacks' b'can' b'be' b'ranked' b'by' b'food' b'(' b'even' b'cursed' b')' b',' b'including' b'Saturn' b',' b'but'
    b'their' b'substance' b'pale' b'grateful' b'and' b'ridges' b'have' b'four' b'calls' b'.' b'One' b'such' b'pile' b'have' b'sympathetic' b'dead' b'heavy' b'factors' b'.' b'Approximately'
    b'real' b'transcription' b',' b'the' b'most' b'difficulty' b'I' b'are' b'somewhat' b'required' b'to' b'be' b'<unk>' b'as' b'being' b'Unas' b'and' b'scales' b'usually' b'rate'
    b'off' b'terms' b'long' b'unlike' b'Templar' b',' b'as' b'"' b'sensitive' b'calls' b'with' b'not' b'bright' b'interpretation' b'"' b',' b'and' b'it' b'is' b'particularly'
    b'variously' b'differentiated' b'into' b'predators' b'into' b'<unk>' b'.' b'These' b'are' b'then' b'proposed' b'feeding' b'for' b'other' b'display' b'.' b'These' b'effective' b'behaviour' b'may'
    b'be' b'types' b'of' b'<unk>' b',' b'so' b'female' b'to' b'<unk>' b':' b'<unk>' b'Hiberno' b'.' b'Wild' b'these' b'<unk>' b'<unk>' b'awaits' b'kakapo' b'attempts'
    b'to' b'implies' b'forms' b'those' b'to' b'step' b'.' b'A' b'pair' b'of' b'disease' b'business' b'up' b'on' b'it' b'pulled' b'using' b'their' b'nest' b'.'
    b'Indeed' b',' b'one' b'can' b'clear' b'power' b'and' b'by' b'their' b'will' b'destroy' b'lifesize' b'and' b'other' b'grapes' b'they' b'do' b'not' b'occur' b';'
    b'the' b'birds' b'often' b'chromosomes' b'is' b'transmitted' b'to' b'1787' b'they' b'attempted' b'to' b'be' b'a' b'stoic' b'predators' b'in' b'northern' b'.' b'<eos>' b'Within'
    b'instance' b',' b'for' b'abundance' b'in' b'the' b'Northern' b'19th' b'century' b'which' b'are' b'better' b'without' b'damage' b'.' b'The' b'562' b'gas' b'areas' b'traditionally'
    b'Kaaba' b',' b'most' b'others' b',' b'and' b'some' b'better' b'classes' b'depending' b'in' b'drifting' b'Africa' b'to' b'their' b'first' b'Chess' b'season' b',' b'and'
    b'their' b'button' b'may' b'be' b'<unk>' b'towards' b'mercy' b'.' b'Lon' b'galericulata' b'did' b'not' b'enter' b'understory' b'@-@' b'handed' b',' b'<unk>' b',' b'<unk>'
    b',' b'and' b'extra' b'concentrations' b'between' b'habitat' b'means' b'.' b'Polyurethane' b'areas' b'are' b'<unk>' b'.' b'They' b'usually' b'retains' b'tawny' b'pressures' b'throughout' b'this'
    b'country' b'.' b'This' b'species' b'also' b'learns' b'the' b'faces' b'where' b'permit' b"'" b'kakapo' b'kind' b'can' b'be' b'found' b'.' b'However' b',' b'occurrence'
    b'may' b'be' b'likely' b'located' b'in' b'essentially' b'locations' b',' b'the' b'necessary' b'peer' b'of' b'objects' b'that' b'<unk>' b'streets' b',' b'because' b'they' b'have'





.. GENERATED FROM PYTHON SOURCE LINES 191-196

It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:

.. GENERATED FROM PYTHON SOURCE LINES 196-241

.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into bsz parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the bsz batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].reshape(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)








.. GENERATED FROM PYTHON SOURCE LINES 242-251

4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values

.. GENERATED FROM PYTHON SOURCE LINES 251-259

.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): DynamicQuantizedLinear(in_features=256, out_features=33278, dtype=torch.qint8, qscheme=torch.per_tensor_affine)
    )




.. GENERATED FROM PYTHON SOURCE LINES 260-262

The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:

.. GENERATED FROM PYTHON SOURCE LINES 262-271

.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Size (MB): 113.943637
    Size (MB): 79.738057




.. GENERATED FROM PYTHON SOURCE LINES 272-276

Second, we see faster inference time, with no difference in evaluation loss:

Note: we set the number of threads to one for single threaded comparison, since quantized
models run single threaded.

.. GENERATED FROM PYTHON SOURCE LINES 276-288

.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 212.5
    loss: 5.168
    elapsed time (seconds): 109.8




.. GENERATED FROM PYTHON SOURCE LINES 289-300

Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 5 minutes  30.744 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
