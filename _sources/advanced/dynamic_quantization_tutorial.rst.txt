
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "advanced/dynamic_quantization_tutorial.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(beta) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we will apply the easiest form of quantization -
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.

.. GENERATED FROM PYTHON SOURCE LINES 22-32

.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F








.. GENERATED FROM PYTHON SOURCE LINES 33-39

1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.

.. GENERATED FROM PYTHON SOURCE LINES 39-73

.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))








.. GENERATED FROM PYTHON SOURCE LINES 74-82

2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.

.. GENERATED FROM PYTHON SOURCE LINES 82-132

.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')








.. GENERATED FROM PYTHON SOURCE LINES 133-141

3. Load the pre-trained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pre-trained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.

.. GENERATED FROM PYTHON SOURCE LINES 141-161

.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )




.. GENERATED FROM PYTHON SOURCE LINES 162-165

Now let's generate some text to ensure that the pre-trained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_

.. GENERATED FROM PYTHON SOURCE LINES 165-190

.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b'<unk>' b'his' b'three' b'eight' b'companies' b'in' b'sixteen' b'attempts' b'after' b'making' b'Macrianus' b'<unk>' b'just' b'to' b'escape' b'.' b'Aston' b'standing' b'is' b'often'
    b'criticized' b'.' b'O' b"'Malley" b"'s" b'court' b'makes' b'a' b'groin' b'problem' b'with' b'her' b'father' b'so' b'they' b'find' b'serious' b'Unas' b':' b'"'
    b'I' b'could' b'stop' b'the' b'more' b'common' b',' b'so' b'seclusion' b'in' b'what' b'is' b'indeed' b'classified' b'as' b'detailed' b',' b'they' b'attempted' b'a'
    b'strong' b'continuous' b'@-@' b'valuable' b'narrative' b'that' b'may' b'indicate' b'as' b'a' b'planet' b';' b'when' b'everywhere' b'is' b',' b'and' b'I' b'were' b'poorly'
    b'exposed' b'to' b'how' b'eyes' b'who' b'can' b'only' b'stop' b'the' b'bad' b'body' b'a' b'little' b'down' b'enough' b'.' b'Hornung' b'is' b'very' b'if'
    b'we' b'have' b'cold' b'significant' b'are' b'certainly' b'said' b'to' b'have' b'shown' b',' b'but' b'I' b'may' b'wanted' b'to' b'be' b'illegal' b'showing' b'.'
    b'"' b'In' b'1950' b'he' b'invites' b'to' b'rangefinder' b'when' b'"' b'probably' b'the' b'impress' b',' b'trying' b'to' b'Sulmona' b'<unk>' b'on' b'their' b'terms'
    b',' b'humans' b'are' b'thus' b',' b'nor' b'"' b'.' b'He' b'died' b'two' b'short' b'performances' b'in' b'Eurogamer' b',' b'which' b'was' b'Walpole' b'received'
    b'to' b'challenge' b'the' b'age' b'of' b'Bombay' b'.' b'<eos>' b'<eos>' b'=' b'=' b'Reception' b'=' b'=' b'<eos>' b'<eos>' b'The' b'structure' b'of' b'the'
    b'gameplay' b'was' b'designed' b'four' b'times' b',' b'and' b'a' b'member' b'of' b'Venus' b'remains' b'<unk>' b'as' b'much' b'the' b'12th' b'planet' b'in' b'his'
    b'unincorporated' b'order' b'.' b'The' b'vintage' b'to' b'write' b'they' b'were' b'also' b'amassed' b'from' b'other' b'sports' b'March' b'I' b'mentioned' b'to' b'be' b'citizens'
    b'(' b'provoking' b'2' b'%' b'of' b'a' b'planet' b')' b',' b'a' b'planet' b'diameter' b'made' b'in' b'in' b'Movie' b'Humpty' b'Age' b'(' b'La'
    b'Century' b')' b'connecting' b'his' b'previous' b'public' b'planet' b'(' b'97' b'@.@' b'7' b'million' b'kilometers' b')' b'.' b'He' b'also' b'named' b'a' b'small'
    b'way' b'on' b'John' b'returns' b'.' b'Even' b',' b'as' b'evidence' b'of' b'both' b'the' b'players' b'on' b':' b'from' b'a' b'then' b'letter' b'of'
    b'a' b'series' b'of' b'<unk>' b',' b'his' b'dancers' b'passed' b'in' b'an' b'groups' b':' b'they' b'have' b'happened' b'Xinjiang' b'tension' b'.' b'<unk>' b'draft'
    b'the' b'<unk>' b',' b'with' b'three' b'two' b'women' b'<unk>' b',' b'I' b'thought' b'they' b'do' b'not' b'e' b'it' b'or' b'through' b'vigorously' b','
    b"'" b'Together' b'years' b',' b'There' b'is' b'place' b'formerly' b'in' b'turn' b'by' b'being' b'it' b'.' b'<eos>' b'Before' b'a' b'substantial' b'holding' b'early'
    b'@-@' b'series' b',' b'series' b'resisted' b'that' b'when' b'these' b'tornadoes' b'are' b'fully' b'doubt' b',' b'any' b'1645' b'should' b'show' b'that' b'at' b'a'
    b'base' b'of' b'damage' b'.' b'One' b'they' b'idiosyncratic' b'rates' b'believed' b',' b'experimenting' b',' b'formerly' b'taking' b'their' b'actions' b'.' b'He' b'wear' b'or'
    b'the' b'speaks' b'might' b'be' b'advanced' b'to' b'occur' b'on' b'its' b'"' b'one' b'spirit' b'of' b'both' b'short' b'centuries' b'"' b'.' b'In' b'2015'
    b',' b'difficulties' b'have' b'also' b'developed' b'hypnosis' b"'" b'translation' b',' b'as' b'the' b'lethal' b'level' b'of' b'Dame' b'beats' b'as' b'and' b'one' b'who'
    b'oversaw' b'with' b'IV' b',' b'technique' b',' b'S.' b'Carlyle' b',' b'Sicily' b',' b'The' b'bulk' b'of' b'the' b'planet' b'extreme' b'and' b'<unk>' b'as'
    b'"' b'probably' b'young' b',' b'but' b'there' b'is' b'no' b'facto' b'status' b'"' b'.' b'Another' b'delightful' b'region' b'delivered' b'wapaq' b'and' b'Otto' b'\xc2\xb1'
    b'.' b'It' b'distortions' b'they' b'hear' b'20' b'%' b'and' b'west' b'difficulty' b'over' b'.' b'For' b'example' b',' b'the' b'team' b'laid' b'into' b'the'
    b'fall' b'of' b'they' b'are' b'strongly' b'ordered' b'from' b'their' b'intelligence' b'(' b'<unk>' b'rigid' b'and' b'power' b')' b'.' b'More' b'recent' b'blame' b'can'
    b'be' b'considered' b'his' b'excitement' b',' b'or' b'pungent' b'low' b'deer' b'and' b'magical' b'forms' b'.' b'One' b'of' b'these' b'are' b'consequently' b'down' b','
    b'difficulty' b'for' b'God' b'visible' b'in' b'favor' b',' b'by' b'over' b'12' b':' b'00' b'or' b'4' b':' b'13' b'<eos>' b'Deities' b'may' b'be'
    b'discarded' b',' b'while' b'the' b'tallest' b'starling' b'behind' b'a' b'juvenile' b'(' b'up' b'with' b'<unk>' b'Nc6' b'and' b'and' b'leave' b'water' b')' b'its'
    b'tendency' b'to' b'produce' b';' b'or' b'Timberlake' b'or' b'cry' b'up' b'by' b'it' b'to' b'try' b'to' b'leave' b',' b'to' b'be' b'wet' b'.'
    b'The' b'APF' b'of' b'the' b'accounts' b'is' b'capture' b'pieces' b',' b'with' b'4' b'@.@' b'8' b'm' b'(' b'brass' b'ft' b')' b'at' b'their'
    b'length' b'thick' b'.' b'For' b'example' b',' b'it' b'has' b'19' b'gun' b'flocks' b'and' b'five' b'<unk>' b'short' b'demonstrations' b',' b'20' b',' b'4'
    b'(' b'being' b'the' b'principal' b'sandy' b'base' b'.' b')' b'<unk>' b'them' b'on' b'11' b'August' b'he' b'substituted' b'1973' b'just' b'white' b'in' b'the'
    b'15th' b'century' b'.' b'Four' b'wonderful' b'characters' b'tailed' b'waterfalls' b'become' b'quite' b'found' b'.' b'With' b'it' b',' b'they' b'are' b'then' b'consumed' b'by'
    b'predators' b'or' b'increased' b'\xe2\x80\x93' b'starlings' b',' b'because' b'they' b'were' b'left' b'as' b'to' b'repair' b'central' b'fret' b'clouds' b',' b'so' b'aground' b'do'
    b'not' b'mean' b'national' b'starlings' b'.' b'The' b'other' b'more' b'spots' b'are' b'unusual' b'at' b'a' b'abdomen' b',' b'where' b'they' b'are' b'generally' b'found'
    b'by' b'undamaged' b'when' b'they' b'will' b'be' b'examined' b'.' b'<eos>' b'Corythosaurus' b'done' b'neither' b'kitsune' b'at' b'sea' b'.' b'In' b'<unk>' b',' b'arithmetic'
    b',' b'in' b'particular' b',' b'they' b'normally' b'simultaneously' b'end' b'demons' b'(' b'no' b'variety' b'cook' b'as' b'they' b'are' b'increasingly' b'much' b'enlarged' b'apart'
    b'.' b'If' b'he' b'criticizes' b'just' b'over' b'1' b'@.@' b'3' b'm' b'(' b'4' b'@.@' b'8' b'in' b')' b'purple' b'than' b'venom' b','
    b'clusters' b'of' b'ft' b'nest' b'male' b'(' b'33' b'\xc2\xb0' b')' b',' b'<unk>' b'soil' b'sequence' b'Sinclair' b',' b'flock' b'deep' b'(' b'even' b'even'
    b'"' b'<unk>' b'force' b')' b'"' b'and' b'be' b'"' b'aggressive' b'chemical' b'"' b',' b'kakapo' b':' b'<eos>' b'It' b'is' b'red' b'and' b'simultaneously'
    b'down' b',' b'suggesting' b'that' b'ask' b'(' b'stadium' b')' b'here' b'characteristic' b'is' b'my' b'stronger' b'jewelry' b'but' b'even' b'turned' b'into' b'when' b'it'
    b'is' b'entrenched' b'.' b'There' b'is' b'a' b'conspicuous' b'walks' b'between' b'2117' b';' b'it' b'is' b'Hewitt' b'of' b'<unk>' b'is' b'exceptionally' b'cannot' b'any'
    b'probably' b',' b'and' b'it' b'is' b'<unk>' b'(' b'being' b'a' b'gill' b'serve' b'on' b',' b'when' b'is' b'another' b'species' b'or' b'items' b'or'
    b'middle' b'begin' b'\xe2\x80\x94' b'as' b'Lauderdale' b"'" b'Anonymous' b'be' b'so' b'known' b'as' b'1871' b')' b'.' b'<eos>' b'<eos>' b'=' b'=' b'=' b'Habitat'
    b'and' b'asteroid' b'=' b'=' b'=' b'<eos>' b'<eos>' b'At' b'its' b'relative' b'accession' b',' b'they' b'are' b'searching' b'by' b'unlawful' b'resources' b',' b'causing'
    b'them' b'reference' b'to' b'their' b'investment' b'and' b'713' b'.' b'Many' b'female' b'results' b'on' b'eight' b'or' b'four' b'hours' b'\xe2\x80\x94' b'screen' b'<unk>' b','
    b'which' b'may' b'have' b'louder' b'muscle' b'structural' b'parrot' b'away' b'inscribed' b'from' b'<unk>' b'.' b'These' b'colour' b'are' b'probably' b'respected' b'if' b'they' b'<unk>'
    b'towards' b'areas' b'that' b'will' b'be' b'smaller' b'.' b'They' b'research' b'responded' b'stare' b'Hermann' b',' b'or' b'one' b'five' b'heavily' b'at' b'sight' b'.'
    b'O' b'Fruit' b'experienced' b'the' b'burials' b'and' b'she' b'loses' b'.' b'anymore' b'will' b'break' b'up' b'the' b'eye' b'other' b'skill' b'by' b'<unk>' b'.'
    b'All' b'parts' b'of' b'amounts' b'of' b'152' b'%' b'should' b'just' b'indicate' b'chemicals' b',' b'and' b'the' b'eggs' b'can' b'be' b'involved' b'as' b'a'





.. GENERATED FROM PYTHON SOURCE LINES 191-196

It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:

.. GENERATED FROM PYTHON SOURCE LINES 196-241

.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into bsz parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the bsz batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].reshape(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)








.. GENERATED FROM PYTHON SOURCE LINES 242-251

4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values

.. GENERATED FROM PYTHON SOURCE LINES 251-259

.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): DynamicQuantizedLinear(in_features=256, out_features=33278, dtype=torch.qint8, qscheme=torch.per_tensor_affine)
    )




.. GENERATED FROM PYTHON SOURCE LINES 260-262

The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:

.. GENERATED FROM PYTHON SOURCE LINES 262-271

.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Size (MB): 113.943637
    Size (MB): 79.738057




.. GENERATED FROM PYTHON SOURCE LINES 272-276

Second, we see faster inference time, with no difference in evaluation loss:

Note: we set the number of threads to one for single threaded comparison, since quantized
models run single threaded.

.. GENERATED FROM PYTHON SOURCE LINES 276-288

.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 234.4
    loss: 5.168
    elapsed time (seconds): 123.2




.. GENERATED FROM PYTHON SOURCE LINES 289-300

Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 6 minutes  6.526 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
