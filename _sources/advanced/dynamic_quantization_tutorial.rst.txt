
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "advanced/dynamic_quantization_tutorial.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(beta) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we will apply the easiest form of quantization -
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.

.. GENERATED FROM PYTHON SOURCE LINES 22-32

.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F








.. GENERATED FROM PYTHON SOURCE LINES 33-39

1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.

.. GENERATED FROM PYTHON SOURCE LINES 39-73

.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))








.. GENERATED FROM PYTHON SOURCE LINES 74-82

2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.

.. GENERATED FROM PYTHON SOURCE LINES 82-132

.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')








.. GENERATED FROM PYTHON SOURCE LINES 133-141

3. Load the pre-trained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pre-trained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.

.. GENERATED FROM PYTHON SOURCE LINES 141-161

.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )




.. GENERATED FROM PYTHON SOURCE LINES 162-165

Now let's generate some text to ensure that the pre-trained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_

.. GENERATED FROM PYTHON SOURCE LINES 165-190

.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b'focusing' b'in' b'Fiji' b'\xe2\x80\x94' b'"' b'Black' b'Love' b'"' b',' b'"' b'poker' b'"' b'is' b'easier' b'to' b'have' b'"' b'foreboding' b'four' b'mature'
    b'that' b'covers' b'fearful' b'and' b'everything' b'some' b'<unk>' b'that' b'with' b'081' b'is' b'a' b'personal' b'safe' b'"' b'.' b'The' b'<unk>' b'@-@' b'related'
    b'clump' b'turn' b'to' b'be' b'a' b'electro' b'shop' b'Humpty' b"'t" b'generations' b'the' b'parachute' b'bleak' b'@-@' b'length' b'hymenium' b'located' b'on' b'the' b'lift'
    b'@-@' b'like' b'@-@' b'old' b'size' b'for' b'his' b'shooting' b',' b'with' b'emplacements' b'being' b'only' b'radial' b'Guitar' b'Africa' b'.' b'Ceres' b'described' b'two'
    b'squadrons' b'at' b'night' b'.' b'<eos>' b'<eos>' b'=' b'=' b'Preparations' b'=' b'=' b'<eos>' b'<eos>' b'Before' b'their' b'descent' b'in' b'the' b'Study' b'Project'
    b',' b'eared' b'Trek' b'Weekly' b'stated' b'to' b'see' b'6' b':' b'5' b'in' b'<unk>' b'heartbreaking' b',' b'not' b'told' b'that' b'Fortuna' b'<unk>' b'said'
    b'"' b'If' b'sightings' b"'s" b'just' b'nice' b'lap' b'book' b'the' b'1230s' b',' b'and' b'players' b'that' b'supposed' b'they' b'did' b'never' b'rapidly' b'know'
    b'this' b'Tufaro' b'.' b'I' b"'ve" b'lie' b'to' b'Moresby' b'.' b'"' b'He' b'deliberately' b'added' b'in' b'his' b'appearance' b'for' b'Connie' b',' b'the'
    b'"' b'middle' b'planet' b'of' b'the' b'Wind' b'"' b'should' b'be' b'redundant' b'.' b'Hornung' b"'s" b'immense' b'name' b'is' b'complete' b'(' b'although' b'<unk>'
    b'ecumenical' b'daughters' b'<unk>' b')' b'.' b'A' b'member' b'of' b'organ' b'identified' b'in' b'a' b'high' b'version' b'Stela' b'Concept' b'<unk>' b'Fawkes' b'Kinney' b'attempt'
    b'to' b'account' b'up' b'later' b'object' b'with' b'a' b'more' b'brilliant' b'drive' b'.' b'Gilmore' b'compared' b'on' b'to' b'emulate' b'Paul' b'Blitt' b'the' b'Dead'
    b'press' b'Journey' b'Pentwyn' b'!' b'"' b'To' b'the' b'belly' b'"' b',' b'while' b'"' b'All' b'people' b'takes' b'place' b'.' b'"' b'<eos>' b'Unlike'
    b'her' b',' b'Joanna' b'kicked' b'his' b'interpretation' b'about' b'novelists' b'.' b'He' b'noted' b'that' b'Hornung' b"'s" b'remixed' b'@-@' b'time' b'backdrop' b'has' b'been'
    b'Sri' b'probably' b'influenced' b'by' b'Paul' b'Worth' b'Living' b'.' b'Walters' b'demanded' b'Ruth' b'himself' b'used' b'wires' b'for' b'his' b'inauguration' b'in' b'a' b'2005'
    b'interview' b'by' b'Thatgamecompany' b'.' b'<eos>' b'Stanley' b'makes' b'word' b'that' b'Ceres' b"'s" b'calling' b'"' b'<unk>' b'of' b'twist' b'"' b'that' b'McLuhan' b'pursues'
    b'what' b'a' b'evil' b'woman' b"'s" b'environment' b'refuses' b'a' b'attack' b'.' b'Radio' b',' b'Kilmer' b'depicts' b'his' b'"' b'male' b'effects' b'"' b','
    b'because' b'he' b'consider' b'his' b'support' b'.' b'He' b'also' b'decides' b'on' b'contact' b'with' b',' b'"' b'Marlene' b'or' b'impersonation' b',' b'which' b'are'
    b'made' b'to' b'get' b'back' b'around' b'anymore' b'Nf3' b'I' b"'m" b'so' b'<unk>' b',' b'and' b'simply' b'a' b'doctrine' b'to' b'become' b'human' b'.'
    b'And' b'[' b'I' b"'d" b']' b'not' b',' b'it' b'sing' b'me' b'<eos>' b'"' b'At' b'the' b'following' b'time' b',' b'Sayid' b'identified' b'it'
    b'as' b'"' b'a' b'little' b'powerful' b'to' b'laughing' b'.' b'"' b'So' b'Kilmer' b"'s" b'following' b'century' b'was' b'a' b'series' b'of' b'her' b'propaganda'
    b'difference' b'personally' b'he' b'said' b':' b'"' b'imaginative' b'(' b'1' b'basic' b'to' b'carry' b'into' b'1' b'years' b',' b'I' b"'m" b'matched' b'if'
    b'her' b'talent' b'has' b'possibly' b'defense' b'or' b'at' b'have' b'four' b'...' b'actually' b'far' b'away' b',' b'and' b'then' b'nothing' b'thousand' b'young' b'games'
    b'else' b')' b'how' b'the' b'very' b'obvious' b'tied' b'to' b'Paste' b'because' b'he' b'crosses' b'chaotic' b'all' b'being' b'doing' b'the' b'death' b'of' b'some'
    b'kind' b'of' b'questioning' b'sentimental' b'.' b'"' b'Despite' b'his' b'performance' b'of' b'being' b'based' b'out' b'of' b'an' b'novel' b'working' b'in' b'ambitions' b','
    b'Spacey' b'said' b',' b'"' b'I' b'You' b'like' b'mind' b'good' b'<unk>' b'.' b'biplane' b"'m" b'an' b'<unk>' b'and' b'necklace' b'to' b'produce' b'him'
    b'that' b'this' b'will' b'be' b'true' b'there' b'worth' b'an' b'rich' b',' b'right' b',' b'Angry' b',' b'structured' b'gentleman' b'"' b'.' b'Ross' b'also'
    b'described' b'the' b'collection' b'of' b'gritty' b'critics' b'on' b'two' b'technical' b'countries' b'(' b'mid' b'%' b'orbital' b'business' b'Maleev' b')' b',' b'with' b'it'
    b'"' b',' b'a' b'con' b'picture' b'pawn' b'wants' b'where' b"'s" b'Kepler' b',' b'in' b'1968' b'.' b"'" b'It' b'doesn' b"'t" b"'ll" b'myself'
    b'at' b'least' b'a' b'family' b'without' b',' b'a' b'blow' b'with' b'<unk>' b'gain' b'by' b'another' b'solenoid' b'.' b'"' b'Liu' b"'Malley" b'sold' b','
    b'as' b'they' b'became' b'possible' b'late' b'12' b'\xe2\x80\x93' b'10' b',' b'and' b'on' b'November' b'4' b',' b'2014' b'they' b'can' b'last' b'strike' b'for'
    b'the' b',' b'emotional' b'running' b'with' b'conjunction' b'with' b'Thatgamecompany' b'.' b'Upon' b'the' b'American' b'race' b'the' b'Washington' b'University' b'turned' b'to' b'write' b'their'
    b'last' b'season' b',' b'Ecclestone' b'was' b'"' b'for' b'a' b'very' b'luminous' b'excavation' b'on' b'good' b'literature' b'"' b'and' b'received' b'the' b'"' b'hard'
    b'33' b'"' b'television' b'game' b'East' b'series' b'involving' b'Hornung' b"'s" b'+' b'82' b',' b'2009' b'for' b'his' b'drummer' b',' b'Cambridge' b'.' b'The'
    b'novel' b'spent' b'around' b'20' b'mg' b'in' b'the' b'first' b'length' b'attend' b'maps' b',' b'and' b'at' b'27' b'@,@' b'000' b'copies' b',' b'the'
    b'single' b'126' b'dates' b'.' b'<eos>' b'Hornung' b'joined' b'Formula' b"'Malley" b',' b'Alan' b'McFarland' b',' b'to' b'guitar' b'Walpole' b',' b'Hyderabad' b'told' b'Inez'
    b',' b'war' b'betrays' b'warm' b'riding' b',' b'and' b'Raffles' b'liked' b'Williams' b'which' b'ended' b'when' b'came' b'commentators' b',' b'negatively' b'and' b'Raffles' b','
    b'and' b'Jordan' b'featured' b'Ceres' b'with' b'Maze' b'/' b'52' b'short' b'C' b'/' b'resuming' b'bags' b'(' b'Burke' b')' b'and' b'Australian' b'runner' b'warming'
    b'doctors' b',' b'Mason' b'and' b'The' b'Kitty' b'III' b'.' b'The' b'University' b'of' b'Cricket' b'listed' b'a' b'weighted' b'version' b'of' b'Namco' b'and' b'Andres'
    b'take' b'moving' b'members' b'over' b'viewers' b'in' b'the' b'final' b'season' b'to' b'costumes' b'.' b'<eos>' b'<eos>' b'=' b'=' b'Personal' b'life' b'=' b'='
    b'<eos>' b'<eos>' b'slavery' b'were' b'aligned' b'against' b'Liszt' b',' b'debuting' b':' b'<eos>' b'"' b'For' b'up' b'"' b',' b'Jig' b',' b'<unk>' b','
    b'received' b'survivors' b'of' b'monoxide' b'Path' b'music' b'.' b'<eos>' b'The' b'2010' b'election' b'was' b'made' b'by' b'Chen' b'in' b'Rock' b'at' b'Argosy' b','
    b'beginning' b'in' b'Duke' b'Island' b'in' b'1203' b'.' b'One' b'of' b'these' b'finds' b'the' b'amount' b'of' b'Crash' b'Bill' b'Johnson' b'as' b'"' b'The'
    b'most' b'intentionally' b'American' b'fence' b'<unk>' b'of' b'drive' b',' b'because' b'Mosley' b']' b'was' b'because' b'he' b'identified' b'in' b'all' b'life' b'"' b'.'
    b'<eos>' b'In' b'the' b'spring' b'of' b'May' b',' b'Mosley' b'implies' b'"' b'Nico' b'Young' b'creatures' b'"' b':' b'"' b'Hornung' b"'" b'big' b'audition'
    b'would' b'be' b'bad' b'and' b'wrong' b'to' b'spot' b'slightly' b'.' b'The' b'book' b'has' b'nine' b'Weiner' b'gone' b'at' b':' b'90' b'<eos>' b'The'
    b'NCAA' b'carried' b'David' b'I' b'ready' b'a' b'contract' b'down' b'even' b'Another' b'selection' b'or' b'legally' b'ever' b'kept' b'its' b'elbow' b',' b'who' b'get'
    b'plays' b'three' b'.' b'He' b'continue' b'to' b'fit' b'it' b'...' b'"' b'He' b'came' b'nearfield' b'.' b'The' b'Mr' b'Slocum' b'Journal' b'criticized' b'in'
    b'his' b'two' b'singles' b'Gratitude' b',' b'the' b'Phoenix' b'and' b'Fake' b'Raffles' b'invited' b'to' b'Kifino' b'Mackerras' b'.' b'The' b'fear' b'it' b'was' b'in'
    b'fact' b'such' b'as' b'Louis' b'<unk>' b'(' b'Mitch' b'Fischer' b')' b',' b'appearances' b',' b'and' b'leather' b',' b'as' b'one' b'brother' b',' b'Richard'
    b'Chris' b'<unk>' b',' b'created' b'by' b'Morgan' b'Records' b'.' b'Behind' b'alike' b'with' b'In' b'the' b'slot' b'@-@' b'300' b'versions' b'of' b'temporary' b'rivals'





.. GENERATED FROM PYTHON SOURCE LINES 191-196

It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:

.. GENERATED FROM PYTHON SOURCE LINES 196-241

.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into bsz parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the bsz batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].reshape(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)








.. GENERATED FROM PYTHON SOURCE LINES 242-251

4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values

.. GENERATED FROM PYTHON SOURCE LINES 251-259

.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): DynamicQuantizedLinear(in_features=256, out_features=33278, dtype=torch.qint8, qscheme=torch.per_tensor_affine)
    )




.. GENERATED FROM PYTHON SOURCE LINES 260-262

The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:

.. GENERATED FROM PYTHON SOURCE LINES 262-271

.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Size (MB): 113.944608
    Size (MB): 79.739034




.. GENERATED FROM PYTHON SOURCE LINES 272-276

Second, we see faster inference time, with no difference in evaluation loss:

Note: we set the number of threads to one for single threaded comparison, since quantized
models run single threaded.

.. GENERATED FROM PYTHON SOURCE LINES 276-288

.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 208.4
    loss: 5.168
    elapsed time (seconds): 110.0




.. GENERATED FROM PYTHON SOURCE LINES 289-300

Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 5 minutes  27.258 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
