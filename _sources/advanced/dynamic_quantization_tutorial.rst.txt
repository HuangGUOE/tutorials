
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "advanced/dynamic_quantization_tutorial.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(beta) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we will apply the easiest form of quantization -
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.

.. GENERATED FROM PYTHON SOURCE LINES 22-32

.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F








.. GENERATED FROM PYTHON SOURCE LINES 33-39

1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.

.. GENERATED FROM PYTHON SOURCE LINES 39-73

.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))








.. GENERATED FROM PYTHON SOURCE LINES 74-82

2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.

.. GENERATED FROM PYTHON SOURCE LINES 82-132

.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')








.. GENERATED FROM PYTHON SOURCE LINES 133-141

3. Load the pre-trained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pre-trained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.

.. GENERATED FROM PYTHON SOURCE LINES 141-161

.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )




.. GENERATED FROM PYTHON SOURCE LINES 162-165

Now let's generate some text to ensure that the pre-trained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_

.. GENERATED FROM PYTHON SOURCE LINES 165-190

.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b'and' b'legal' b'trends' b'period' b'to' b'greatly' b'continue' b'to' b'be' b'used' b'to' b'secure' b'lights' b',' b'but' b'this' b'doesn' b'Prix' b'was' b'driving'
    b'in' b'dominions' b'.' b'<eos>' b'A' b'reputation' b'prompted' b'a' b'Crash' b'<unk>' b'@-@' b'crime' b'stronghold' b'between' b'the' b'Song' b'/' b'rectilinear' b'Ocean' b'Village'
    b'Shirow' b'(' b'"' b'The' b'12th' b'cyclone' b'"' b')' b',' b'which' b'was' b'also' b'called' b',' b'Maryland' b',' b'as' b'"' b'every' b'reproduction'
    b'of' b'Montfort' b'exercised' b'to' b'be' b'completely' b'a' b'graphite' b'word' b'and' b'might' b'like' b'.' b'"' b'<eos>' b'Hans' b'Smart' b'played' b'in' b'2006'
    b'to' b'stick' b'a' b'56' b'term' b'audience' b',' b'informally' b'with' b'a' b'$' b'82' b'million' b',' b'1' b'%' b'of' b'contribution' b'at' b','
    b'appropriately' b',' b'and' b'Walpole' b"'s" b'house' b'ISBN' b'calculations' b'struck' b'on' b'a' b'different' b'leg' b',' b'as' b'they' b'can' b'be' b'(' b'spacecraft'
    b'of' b'"' b'holding' b'or' b'boating' b'"' b'meaning' b'"' b'Oh' b'"' b')' b'.' b'The' b'language' b'for' b'the' b'book' b'were' b'found' b'June'
    b',' b'American' b'@-@' b'language' b',' b'Goo' b',' b'millions' b'of' b'(' b'previous' b'not' b',' b'possibly' b'given' b'by' b'Brown' b';' b'in' b'special'
    b'Phoenician' b',' b'355' b',' b'in' b'his' b'fuel' b'centres' b'under' b'the' b'worst' b',' b'they' b'could' b'see' b'a' b'spectacle' b',' b'aid' b'in'
    b'operation' b',' b'which' b'included' b'singer' b'container' b'additional' b',' b'respectively' b'.' b'The' b'piers' b'of' b'air' b'between' b'2010' b'and' b'ventral' b'history' b'came'
    b'as' b'a' b'bush' b'@-@' b'catechism' b',' b'Round' b'bloody' b'<unk>' b',' b'<unk>' b'III' b'and' b'English' b'Shaotang' b',' b'which' b'gave' b'been' b'becoming'
    b'mainly' b'associated' b'shortly' b'.' b'On' b'June' b'16' b',' b'2009' b',' b'it' b'was' b'selected' b'that' b'the' b'Palace' b'comes' b'into' b'Choice' b'US'
    b'ab' b'!' b"'" b'delegates' b'because' b'adding' b'"' b'<unk>' b'338' b'years' b'did' b'simplified' b'by' b'hysterical' b',' b'somewhat' b'fighting' b'against' b'Mars' b','
    b'lay' b'<unk>' b'...' b'or' b'effective' b';' b'all' b'who' b'remodelled' b'fiberglass' b'directly' b';' b'I' b'don' b"'t" b'need' b'to' b'grow' b',' b'bearing'
    b'a' b'good' b'star' b'"' b',' b'and' b'"' b'there' b'is' b'little' b'possibilities' b'entering' b'of' b'everglades' b'used' b'in' b'his' b'process' b'"' b'.'
    b'In' b'motor' b'moments' b'he' b'had' b'since' b'Crac' b"'Malley" b',' b'including' b'Earthrealm' b'.' b'<eos>' b'<eos>' b'=' b'=' b'Personnel' b'=' b'=' b'<eos>'
    b'<eos>' b'Until' b'most' b'of' b'the' b'years' b',' b'The' b'Russian' b'Catholic' b'language' b'examination' b'confirmed' b'the' b'\xe6\x94\xbb\xe6\xae\xbb\xe6\xa9\x9f\xe5\x8b\x95\xe9\x9a\x8a' b'"' b'It' b'Early' b'the' b'planet'
    b'from' b'a' b'planet' b'"' b',' b'thanks' b'to' b'Australia' b'.' b'1610' b'was' b',' b'and' b'the' b'hero' b'of' b'the' b'same' b'year' b','
    b'<unk>' b'electron' b'<unk>' b'committed' b'himself' b'<unk>' b'women' b'(' b'Dire' b'civilization' b')' b'you' b'was' b'"' b'only' b'Hawkins' b'"' b'.' b'He' b'went'
    b'to' b'the' b'title' b'Ceres' b';' b'they' b'were' b'strongly' b'able' b'by' b'Connors' b'.' b'Generally' b',' b'the' b'<unk>' b'<unk>' b'"' b'<unk>' b"'s"
    b'<unk>' b'"' b'had' b'generally' b'said' b'a' b'sex' b'or' b'organ' b'hall' b'.' b'In' b'1994' b'the' b'"' b'<unk>' b'inscription' b'"' b'<unk>' b'practice'
    b'that' b'there' b'were' b'no' b'human' b'religion' b',' b'are' b'cracked' b'against' b'Music' b'or' b'decomposing' b'that' b'God' b'carbonate' b'called' b'to' b'"' b'Tell'
    b'calospora' b'"' b',' b'the' b'"' b'machinations' b'that' b'can' b'have' b'a' b'smart' b'supply' b'some' b'...' b'though' b'Syriac' b'have' b'"' b'and' b'he'
    b'had' b'no' b'wheel' b'of' b'its' b'traditional' b'motion' b'.' b'But' b'"' b'it' b'seems' b',' b'something' b'there' b'is' b'no' b'reputation' b'in' b'a'
    b'succession' b'of' b'Indu' b'.' b'Instead' b',' b'between' b',' b'though' b'I' b'have' b'got' b'a' b'size' b',' b'so' b'we' b'get' b'like' b'a'
    b'team' b'of' b'aren' b'One' b'Ethiopia' b'!' b'.' b'"' b'pumping' b'versions' b'have' b'attributed' b'formerly' b'to' b'diversity' b'.' b'Both' b'and' b'appearance' b'are'
    b'not' b'used' b'(' b'including' b'his' b'most' b'fundamental' b'skull' b'@-@' b'spored' b'or' b'so' b'"' b'National' b'bromide' b'"' b')' b',' b'indicating' b'Angelou'
    b"'" b'most' b'powerful' b'translation' b'.' b'The' b'discovery' b'of' b'the' b'descriptions' b'of' b'her' b'saving' b'is' b'a' b'Amylostereum' b'Arabic' b'.' b'Midge' b"'s"
    b'final' b'account' b'of' b'reconcile' b'today' b'stated' b'that' b'Peshkin' b'has' b'hurt' b'is' b'a' b'dance' b'figure' b'.' b'<eos>' b'Early' b'mirror' b'on' b'Dublin'
    b'issues' b'itself' b'are' b'equated' b'for' b'dot' b'@-@' b'derived' b',' b'and' b'<unk>' b'along' b'without' b'synthetic' b'<unk>' b'.' b'<eos>' b'mandatory' b'for' b'this'
    b'image' b'was' b'written' b'by' b'Goodman' b',' b'<unk>' b'considers' b'Busch' b'as' b'first' b'a' b'<unk>' b',' b'who' b'will' b'probably' b'be' b'Marshall' b'Brigades'
    b'.' b'However' b',' b'guy' b'described' b'a' b'similar' b'out' b'can' b'do' b'not' b'write' b'gas' b',' b'making' b'it' b'to' b'their' b'"' b'Shrine'
    b'"' b'when' b'by' b'children' b'no' b'choices' b'had' b'motivated' b'weak' b'challenge' b',' b'including' b'many' b'groups' b'loyalties' b'by' b'any' b'thugs' b'that' b'could'
    b'be' b'separated' b'towards' b'it' b'.' b'Despite' b'the' b'him.Ch.' b'pursuers' b'prolonged' b'slaves' b',' b'does' b'not' b'be' b'replaced' b'by' b'<unk>' b';' b'he'
    b'agrees' b'to' b'sponsor' b'about' b'that' b'jewellery' b'.' b'In' b'the' b'longest' b'series' b',' b'on' b'at' b'22' b'BCE' b',' b'a' b'Crash' b'Astronomical'
    b'system' b'white' b'DH.60' b'!' b'2' b',' b'a' b'Sim\xc3\xb3n' b'goal' b'that' b'must' b'occur' b'on' b'school' b';' b'after' b'the' b'next' b'.' b'Among'
    b'one' b'arms' b'(' b'nor' b'a' b'<unk>' b'witness' b')' b'pitfalls' b'provoked' b'trauma' b'or' b'inclined' b'its' b'exaggerated' b'moments' b'"' b"'d" b'someone' b'they'
    b"'re" b'MSF' b',' b'searches' b'to' b'it' b'and' b'their' b'extraordinary' b'evidence' b',' b'taking' b'place' b',' b'and' b'I' b'looks' b'that' b'they' b'will'
    b'always' b'be' b'unconstitutional' b'.' b'"' b'At' b'a' b'possible' b'<unk>' b'questioning' b'to' b'<unk>' b'releasing' b'the' b'year' b'of' b'Belgium' b"'s" b'technique' b'some'
    b'year' b',' b'in' b'only' b'the' b'bulk' b'of' b'the' b'logical' b'screen' b'out' b'many' b'female' b'components' b':' b'possession' b'of' b'crime' b'.' b'<eos>'
    b'A' b'story' b'was' b'widely' b'found' b'in' b'writings' b'when' b'overwhelming' b'Willem' b'as' b'any' b'player' b'or' b'other' b'Christians' b'.' b'Early' b'his' b'reaching'
    b'positive' b'names' b',' b'it' b'are' b'even' b'known' b'that' b'"' b'too' b'Unlike' b'its' b'student' b',' b'which' b'sense' b'torture' b'more' b'of' b'its'
    b'maze' b',' b'some' b'or' b'oxidation' b'and' b'lift' b'"' b',' b'as' b'<unk>' b'"' b'less' b'enacted' b'than' b'a' b'regular' b'rare' b'colour' b'"'
    b',' b'binding' b'upon' b'Brown' b"'s" b'images' b'.' b'Ain' b'schools' b'did' b'not' b'Milne' b'<unk>' b'rays' b',' b'making' b'that' b'or' b'their' b'fade'
    b'by' b'whiskey' b'distinguish' b'an' b'long' b'.' b'<eos>' b'<unk>' b':' b'<eos>' b'A' b'usual' b'study' b'and' b'the' b'novel' b',' b'The' b'author' b"'s"
    b'<unk>' b'(' b'involvement' b'6' b'in' b')' b',' b'trees' b'Dylan' b'(' b'Ahead' b')' b'to' b'the' b'However' b'of' b'his' b'respective' b'thin' b'students'
    b'that' b'was' b'posing' b'and' b'attempts' b'to' b'grow' b'with' b'a' b'atomic' b',' b'but' b'people' b'leaves' b'the' b'two' b'they' b'contain' b'it' b'birds'
    b'.' b'No' b'moral' b'to' b'prey' b'create' b'myself' b'.' b'The' b'small' b'name' b'have' b'not' b'heard' b'through' b'basic' b'decisions' b'with' b'disease' b'.'
    b'The' b'sky' b'has' b'<unk>' b'Claus' b'endure' b'during' b'over' b'little' b'grassland' b'meaning' b'Gacy' b',' b'while' b'she' b'Cinema' b'that' b'this' b'may' b'up'
    b'to' b'hell' b'.' b'These' b'ancient' b'sex' b'taste' b'<eos>' b'<eos>' b'=' b'=' b'=' b'Similar' b'types' b'=' b'=' b'=' b'<eos>' b'<eos>' b'God'





.. GENERATED FROM PYTHON SOURCE LINES 191-196

It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:

.. GENERATED FROM PYTHON SOURCE LINES 196-241

.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into bsz parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the bsz batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].reshape(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)








.. GENERATED FROM PYTHON SOURCE LINES 242-251

4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values

.. GENERATED FROM PYTHON SOURCE LINES 251-259

.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): DynamicQuantizedLinear(in_features=256, out_features=33278, dtype=torch.qint8, qscheme=torch.per_tensor_affine)
    )




.. GENERATED FROM PYTHON SOURCE LINES 260-262

The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:

.. GENERATED FROM PYTHON SOURCE LINES 262-271

.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Size (MB): 113.944608
    Size (MB): 79.739034




.. GENERATED FROM PYTHON SOURCE LINES 272-276

Second, we see faster inference time, with no difference in evaluation loss:

Note: we set the number of threads to one for single threaded comparison, since quantized
models run single threaded.

.. GENERATED FROM PYTHON SOURCE LINES 276-288

.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 185.7
    loss: 5.168
    elapsed time (seconds): 100.7




.. GENERATED FROM PYTHON SOURCE LINES 289-300

Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 4 minutes  54.435 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
