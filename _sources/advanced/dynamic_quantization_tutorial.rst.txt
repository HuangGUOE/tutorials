
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "advanced/dynamic_quantization_tutorial.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(beta) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we will apply the easiest form of quantization -
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.

.. GENERATED FROM PYTHON SOURCE LINES 22-32

.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F








.. GENERATED FROM PYTHON SOURCE LINES 33-39

1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.

.. GENERATED FROM PYTHON SOURCE LINES 39-73

.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))








.. GENERATED FROM PYTHON SOURCE LINES 74-82

2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.

.. GENERATED FROM PYTHON SOURCE LINES 82-132

.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')








.. GENERATED FROM PYTHON SOURCE LINES 133-141

3. Load the pre-trained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pre-trained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.

.. GENERATED FROM PYTHON SOURCE LINES 141-161

.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )




.. GENERATED FROM PYTHON SOURCE LINES 162-165

Now let's generate some text to ensure that the pre-trained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_

.. GENERATED FROM PYTHON SOURCE LINES 165-190

.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b'a' b'similar' b'<unk>' b'for' b'rock' b'exactly' b'.' b'The' b'lyric' b'achieved' b'to' b'Marquess' b',' b'living' b',' b'in' b'1898' b'Canaanite' b',' b'while'
    b'the' b'first' b'Sky' b'bridge' b'are' b'also' b'limited' b'the' b'entire' b'area' b'and' b'recorded' b'them' b'under' b'cooking' b'sizes' b'.' b'Using' b'humans' b'in'
    b'24' b'%' b'each' b'were' b'rapidly' b'aided' b'by' b'reviewers' b'Carol' b'recreational' b'daytime' b'historians' b',' b'hidden' b'experience' b',' b'and' b'<unk>' b'probably' b'.'
    b'It' b'has' b'many' b'nearest' b'mammal' b'from' b'an' b'early' b'score' b'included' b'between' b'700' b'to' b'10' b'%' b'.' b'All' b'elements' b'have' b'since'
    b'mentioned' b'from' b'the' b'exhibit' b'Abbey' b'and' b'Nameless' b'.' b'<unk>' b'diagnostic' b'FIT' b'populations' b'do' b'not' b'enter' b'different' b'significance' b'towards' b'the' b'flesh'
    b'in' b'1985' b'.' b'<eos>' b'When' b'sylvatic' b'was' b'known' b'in' b'front' b'one' b'year' b'found' b'considerable' b'Australia' b',' b'many' b'of' b'the' b'members'
    b'were' b'required' b'to' b'have' b'keen' b'legislation' b',' b'but' b',' b'it' b'is' b'with' b'not' b'any' b'Greek' b'jobs' b'.' b'To' b'Hama' b','
    b'they' b'forgive' b'the' b"'" b'head' b'<unk>' b'<unk>' b'by' b'virtuosity' b',' b'Lucille' b'colonised' b'by' b'bad' b'at' b'its' b'all' b'reset' b'.' b'With'
    b'rules' b'the' b'use' b'of' b'impact' b',' b'Eminem' b'spots' b',' b'or' b'deposited' b'as' b"'" b'tree' b'@-@' b'<unk>' b',' b'Above' b'Haitian' b'gene'
    b'regions' b',' b'\xc3\xa0' b'Coins' b',' b'reproductions' b'and' b'<unk>' b'garner' b'a' b'<unk>' b'"' b'accumulate' b'"' b'interrelated' b'<unk>' b'to' b'northern' b'Haiti' b'is'
    b'completely' b'22' b'miles' b'per' b'integrating' b'.' b'Similarly' b',' b'the' b'assignment' b'will' b'be' b'used' b'to' b'provoke' b'for' b'having' b'relic' b'unstable' b'demand'
    b',' b'especially' b'on' b'the' b'centenary' b'centimetres' b'.' b'Of' b'the' b'possibility' b'it' b'breaks' b'estimated' b'.' b'Only' b'electromagnetic' b'details' b',' b'a' b'access'
    b'as' b'Cole' b'(' b'i.e.' b'he' b'also' b'attempted' b'completely' b'home' b')' b'geographic' b'ligand' b'processes' b'.' b'<eos>' b'After' b'the' b'commercial' b'story' b','
    b'in' b'consumed' b'order' b',' b'nor' b'their' b'walls' b'before' b'@-@' b'devastating' b'eye' b',' b'the' b'other' b'juniors' b'crew' b'would' b'follow' b'outside' b'from'
    b'down' b'down' b'.' b'healthcare' b'town' b'electromagnetic' b'pores' b';' b'partition' b',' b'William' b'scales' b',' b'and' b'<unk>' b'are' b'thought' b'to' b'be' b'preferred'
    b'of' b'kakapo' b'<unk>' b'.' b'Several' b'buffalo' b'then' b'refer' b'to' b'the' b'kakapo' b',' b'who' b'feels' b'it' b'may' b'be' b'able' b'to' b'enable'
    b'synthesize' b'@-@' b'like' b'control' b'by' b'a' b'common' b'twigs' b'.' b'These' b'Tittenhurst' b'market' b'estimated' b'down' b'consist' b'of' b'or' b'<unk>' b',' b'\xce\xbcm'
    b',' b'and' b'sculpture' b',' b'may' b'the' b'sea' b'of' b'Leonardo' b'.' b'In' b'this' b'way' b',' b'it' b'was' b'possible' b'for' b'it' b'.'
    b'M.' b'Avloed' b'might' b'bowl' b'those' b'for' b'humans' b'on' b'the' b'basis' b'which' b'previously' b'supported' b'withdrawing' b'the' b'Lower' b'pore' b'Homeric' b'neck' b'in'
    b'Sanger' b'.' b'The' b'pronounced' b'radiation' b'consist' b'of' b'<unk>' b'spores' b'cultivation' b'at' b'the' b'top' b'of' b'the' b'signing' b'by' b'items' b'\xe2\x85\x93' b'in'
    b'beak' b'or' b'from' b'close' b'settlement' b'and' b'its' b'passing' b'<unk>' b'men' b'.' b'<eos>' b'In' b'the' b'late' b'1980s' b',' b'humans' b'would' b'die'
    b'for' b'humans' b'they' b'suggested' b'to' b'exist' b'to' b'expose' b'their' b'banks' b'.' b'Inside' b'them' b',' b'it' b'can' b'be' b'challenged' b'wings' b','
    b'and' b'the' b'flooding' b'are' b'intact' b'.' b'He' b'Tel' b"'t" b'find' b'tolerate' b'chicks' b'that' b'have' b'controlled' b'by' b'other' b'species' b'that' b'dry'
    b'prey' b',' b'sometimes' b'as' b'he' b'observed' b'their' b'<unk>' b'Achille' b',' b'and' b'<unk>' b'common' b'rainfall' b'.' b'Such' b'similarity' b'deformed' b'courses' b'and'
    b'fine' b'parasites' b'delivery' b'causes' b'are' b'able' b'to' b'migrate' b',' b'and' b'the' b'standout' b'female' b'maximum' b'power' b'into' b'flow' b'.' b'At' b'least'
    b'one' b'hundred' b'value' b'of' b'the' b'country' b',' b'<unk>' b'or' b'certain' b'starlings' b'played' b'by' b'the' b'remnant' b'class' b',' b'although' b'may' b'have'
    b'a' b'break' b'with' b'proportion' b'noted' b'1' b'\xe2\x80\x93' b'1' b',' b'an' b'countryside' b'on' b'19' b'September' b'2014' b'.' b'As' b'so' b',' b'they'
    b'do' b'not' b'extinction' b'around' b'Ceres' b'perimeter' b',' b'but' b'their' b'major' b'tail' b'would' b'proceed' b'for' b'birds' b'.' b'They' b'do' b'not' b'intend'
    b'a' b'pale' b'concentration' b'similar' b'to' b'prey' b',' b'as' b'they' b'are' b'trapped' b'.' b'This' b'was' b'augmented' b'by' b'Consumer' b'Sue' b',' b'afterwards'
    b',' b'about' b'one' b'part' b'of' b'their' b'removing' b'erroneous' b'Valerian' b'.' b'<eos>' b'bounded' b'after' b'their' b'brightest' b',' b'T\xc3\xba' b'<unk>' b'(' b'unused'
    b'790' b')' b'may' b'become' b'a' b'fly' b'beak' b'@-@' b'type' b'cycle' b'to' b'a' b'regular' b'representation' b'to' b'become' b'brushed' b',' b'and' b'have'
    b'several' b'spots' b'and' b'extend' b'to' b'signaling' b'as' b'completely' b'as' b'they' b'one' b'length' b',' b'resulting' b'in' b'carbon' b'on' b'the' b'head' b'upset'
    b'.' b'There' b'are' b'also' b'mostly' b'12' b'chicks' b'in' b'crowded' b'females' b'throughout' b'summer' b'.' b'Two' b'are' b'either' b'females' b',' b'when' b'name'
    b'became' b'disappointment' b',' b'directly' b'as' b'high' b'as' b'they' b'mentioned' b';' b'on' b'a' b'15' b'%' b',' b',' b'they' b'made' b'higher' b'times'
    b',' b'adding' b'with' b'natural' b'or' b'blue' b'calls' b'.' b'<unk>' b'cross' b'Chinese' b'birds' b'missing' b'up' b'around' b'20' b'in' b'(' b'40' b'ft'
    b')' b'and' b'branches' b'increases' b'at' b'site' b'.' b'Large' b',' b'then' b'illegal' b'degrees' b'outside' b'feeding' b'almost' b'or' b'that' b'other' b'figures' b'has'
    b'no' b'rescue' b',' b'much' b'are' b'worn' b',' b'more' b'more' b'effective' b'so' b'females' b',' b'councils' b'and' b'activity' b'shot' b'to' b'<unk>' b'or'
    b'even' b'XLVII' b'.' b'<unk>' b'capture' b'that' b'they' b'could' b'be' b'something' b'<unk>' b'by' b'the' b'cellular' b'Penh' b'meat' b',' b'while' b'they' b'are'
    b'<unk>' b'.' b'For' b'abrupt' b',' b'attempting' b'to' b'commit' b'males' b'are' b'little' b'cause' b'.' b'Also' b'to' b'these' b'or' b'drinking' b'areas' b','
    b'it' b'usually' b'the' b'open' b'need' b'to' b'have' b'enzymatic' b'populations' b'on' b'a' b'31' b'or' b'15' b'to' b'8' b'\xe2\x80\x93' b'1' b'@.@' b'5'
    b'inHg' b'.' b'A' b'female' b'species' b'varies' b'for' b'three' b'days' b'when' b'they' b'cannot' b'be' b'classified' b'by' b'chains' b'while' b'three' b'are' b'compared'
    b'to' b'a' b'7' b'@.@' b'06' b':' b'34' b'in' b'entertaining' b',' b'and' b'other' b'notable' b'structures' b'may' b'be' b'more' b'amounting' b'to' b'monumental'
    b'factors' b'.' b'This' b'specimens' b'are' b'slowly' b'so' b'found' b'.' b'Catholicism' b'and' b'distributed' b'favorable' b'amounts' b'of' b'males' b',' b'or' b'head' b','
    b'far' b',' b'while' b'ECU' b'<unk>' b'oil' b'.' b'<unk>' b'Scottish' b'starling' b'can' b'be' b'stretched' b'to' b'fly' b'computational' b'nestlings' b'similar' b'to' b'Ireland'
    b'to' b'confront' b'night' b'.' b'In' b'his' b'<unk>' b'resurrection' b',' b'\xc2\xb0' b'groups' b'in' b'attempts' b'to' b'appear' b'on' b'heat' b',' b'substrate' b'the'
    b'nest' b'\xe2\x80\x99' b'splashes' b'foliage' b'.' b'<unk>' b'is' b'very' b'likely' b'between' b'their' b'respective' b'source' b'.' b'Each' b'permit' b'used' b'by' b'A.' b'bernissartensis'
    b'technical' b'grey' b'searches' b',' b'and' b'<unk>' b',' b'fibrous' b',' b'they' b'seem' b'they' b'crushed' b'<unk>' b'<unk>' b'.' b'The' b'conquests' b'involves' b'glucose'
    b'structures' b'and' b'crystal' b'native' b'herd' b',' b'which' b'it' b'is' b'attempts' b'to' b'be' b'done' b'along' b'that' b'they' b'must' b'be' b'able' b'to'
    b'be' b'carried' b'.' b'<eos>' b'Kitsune' b'eventually' b'producers' b'covetousness' b'can' b'cause' b'steady' b'after' b'humid' b'areas' b'.' b'Some' b'starlings' b'are' b'similar' b'to'
    b'oxides' b'\xe2\x80\x93' b'<unk>' b'preventing' b'them' b'on' b'low' b'areas' b'and' b'they' b'achieved' b'the' b'<unk>' b'universe' b'.' b'<eos>' b'Paranthodon' b'proteins' b'can' b'be'





.. GENERATED FROM PYTHON SOURCE LINES 191-196

It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:

.. GENERATED FROM PYTHON SOURCE LINES 196-241

.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into bsz parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the bsz batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].reshape(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)








.. GENERATED FROM PYTHON SOURCE LINES 242-251

4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values

.. GENERATED FROM PYTHON SOURCE LINES 251-259

.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): DynamicQuantizedLinear(in_features=256, out_features=33278, dtype=torch.qint8, qscheme=torch.per_tensor_affine)
    )




.. GENERATED FROM PYTHON SOURCE LINES 260-262

The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:

.. GENERATED FROM PYTHON SOURCE LINES 262-271

.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Size (MB): 113.944608
    Size (MB): 79.739034




.. GENERATED FROM PYTHON SOURCE LINES 272-276

Second, we see faster inference time, with no difference in evaluation loss:

Note: we set the number of threads to one for single threaded comparison, since quantized
models run single threaded.

.. GENERATED FROM PYTHON SOURCE LINES 276-288

.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 219.1
    loss: 5.168
    elapsed time (seconds): 114.2




.. GENERATED FROM PYTHON SOURCE LINES 289-300

Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 5 minutes  42.445 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
