
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "advanced/dynamic_quantization_tutorial.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(beta) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we will apply the easiest form of quantization -
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.

.. GENERATED FROM PYTHON SOURCE LINES 22-32

.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F








.. GENERATED FROM PYTHON SOURCE LINES 33-39

1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.

.. GENERATED FROM PYTHON SOURCE LINES 39-73

.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))








.. GENERATED FROM PYTHON SOURCE LINES 74-82

2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.

.. GENERATED FROM PYTHON SOURCE LINES 82-132

.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')








.. GENERATED FROM PYTHON SOURCE LINES 133-141

3. Load the pre-trained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pre-trained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.

.. GENERATED FROM PYTHON SOURCE LINES 141-161

.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )




.. GENERATED FROM PYTHON SOURCE LINES 162-165

Now let's generate some text to ensure that the pre-trained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_

.. GENERATED FROM PYTHON SOURCE LINES 165-190

.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b'.' b'It' b'includes' b'doubt' b'as' b'a' b'member' b'control' b',' b'the' b'<unk>' b'Philippe' b'<unk>' b'<unk>' b'(' b'died' b'international' b')' b',' b'Minutes'
    b"'s" b'<unk>' b'Haitian' b'@-@' b'<unk>' b'(' b'sometimes' b'daughter' b')' b'(' b'destroying' b'arc' b')' b'.' b'This' b'royal' b'themes' b'is' b'unreliable' b','
    b'starts' b',' b'1669' b'and' b'adolescent' b'High' b'Arm' b'.' b'Two' b'months' b'later' b',' b'by' b'Palestinian' b'rule' b'Linux' b',' b'both' b'ammunition' b'upsetting'
    b'very' b'downs' b'and' b'most' b'of' b'the' b'most' b'apparent' b'spots' b'&' b'all' b'species' b'is' b'related' b'to' b'this' b',' b'and' b'and' b'thus'
    b'picked' b'.' b'The' b'National' b'tumor' b'begun' b'28s' b',' b'with' b'six' b'tiers' b',' b'on' b'the' b'other' b'English' b'distribution' b',' b'mass' b'offensive'
    b',' b'labour' b'water' b'\xe2\x80\x94' b'and' b'bite' b',' b'and' b'out' b'of' b'zinc' b'in' b'the' b'final' b'century' b',' b'of' b'the' b'reaction' b'of'
    b'Nubian' b'.' b'=' b'<eos>' b'When' b'displaying' b'as' b'fruiting' b'that' b'his' b'lek' b'numbers' b'is' b'more' b'Moroccan' b',' b'he' b'mentioned' b'the' b'eggs'
    b'for' b'W.' b'hitters' b',' b'who' b'are' b'fired' b'as' b'a' b'community' b'of' b'her' b'unusual' b'figure' b'.' b'When' b'trying' b'to' b'be' b'expecting'
    b'to' b'directly' b'demonstrate' b'it' b',' b'he' b'describes' b'bricks' b',' b'depicted' b'Veronica' b'Marquess' b'and' b'333' b'Ti' b'with' b'a' b'distinct' b'complaint' b'from'
    b'A.' b'Kressenstein' b'<eos>' b'According' b'to' b'wapaq' b'd' b'<unk>' b'of' b'Ashbee' b'to' b'intensify' b'(' b'Hailing' b'upon' b')' b'was' b'inflicted' b'in' b'parliament'
    b',' b'Italian' b'pudding' b'Beverly' b'<unk>' b'(' b'<unk>' b',' b'C' b')' b',' b'flammable' b',' b'and' b'Knowing' b'<unk>' b'of' b'Kramer' b'could' b'be'
    b'much' b'active' b'.' b'The' b'recanted' b'without' b'2004' b',' b'catching' b'the' b'butterfly' b'in' b'summer' b'planet' b'more' b'expensive' b',' b'and' b'for' b'a'
    b'two' b'nine' b'\xe2\x88\x92' b'fleet' b'and' b'a' b'Kakapo' b'flock' b'to' b'each' b'of' b'the' b'orbits' b'of' b'eclipse' b',' b'and' b'about' b'5' b'@.@'
    b'4' b'%' b'million' b'years' b'old' b';' b'again' b'on' b'The' b'68th' b'rule' b',' b'so' b'be' b'owned' b'by' b'the' b'Christian' b'Kenyon' b'.'
    b'The' b'amalgamation' b'of' b'conifer' b'is' b'commonly' b'written' b'on' b'27' b'April' b'1616' b',' b'which' b'inspired' b'in' b'the' b'Fitwatch' b'population' b'as' b'precipitated'
    b'by' b'a' b'forerunner' b'of' b'the' b'Persian' b'province' b'of' b'age' b'and' b'female' b'damage' b'.' b'During' b'Six' b'Ireland' b',' b'the' b'term' b'in'
    b'Aid' b'(' b'IUCN' b')' b'is' b'picked' b'by' b'14th' b'century' b'residents' b'and' b'17th' b'Division' b'.' b'dusty' b'of' b'<unk>' b'(' b'1853' b')'
    b'and' b'the' b'philosophers' b'from' b'BHU' b',' b'toward' b'Ullev\xc3\xa5l' b'XV' b',' b'is' b'also' b'known' b'to' b'monitor' b'handwriting' b',' b'and' b'both' b'researchers'
    b'were' b'present' b'in' b'landfill' b'.' b'<eos>' b'<eos>' b'=' b'=' b'Politics' b'=' b'=' b'<eos>' b'<eos>' b'Entertainment' b'Tech' b"'s" b'bark' b'declined' b'in'
    b'Township' b':' b'<eos>' b'Lady' b'Boom' b'Bang' b'!' b',' b'possibilities' b'for' b'Newfoundland' b',' b'and' b'is' b'smaller' b',' b'by' b'acceptable' b',' b'and'
    b'theater' b'North' b'America' b',' b'is' b'moved' b'on' b'their' b'lunch' b'west' b'of' b'<unk>' b'<unk>' b'in' b'the' b'<unk>' b'area' b'.' b'As' b'a'
    b'purple' b'star' b',' b'other' b'other' b'limits' b'persist' b'across' b'Forerunner' b'areas' b'while' b'favor' b'<unk>' b'in' b'Brazoria' b',' b'Indiamen' b',' b'incompetence' b'arose'
    b'among' b'wop' b'for' b'popular' b'crops' b'.' b'When' b'Kaimanawa' b'Tharp' b',' b'with' b'some' b'are' b'Ras' b'(' b'de' b'Water' b')' b'have' b'speculated'
    b'a' b'close' b'mass' b',' b'by' b'the' b'Arabic' b'of' b'the' b'sulfoxonium' b'(' b'1929' b'also' b')' b'murder' b',' b'merely' b'considerably' b'distinct' b'and'
    b'compared' b'to' b'Saint' b'@-@' b'Petrus' b'(' b'died' b'close' b'standing' b'about' b'1' b'%' b')' b'and' b'the' b'snakes' b"'" b'Mena' b'then' b'was'
    b'historical' b'.' b'However' b',' b'in' b'1907' b',' b'<unk>' b'was' b'moved' b'to' b'Here' b'with' b'a' b'extension' b'of' b'black' b'intelligence' b',' b'then'
    b'in' b'Felix' b'Petit' b'Bang' b',' b'New' b'York' b',' b'on' b'working' b'with' b'<unk>' b'for' b'course' b'.' b'The' b'dense' b'portion' b'of' b'the'
    b'century' b'suffered' b'their' b'spectral' b'@-@' b'year' b'ambush' b'with' b'Ceres' b'preserve' b',' b'monitoring' b',' b'<unk>' b',' b'<unk>' b',' b'<unk>' b',' b'mercenary'
    b',' b'<unk>' b',' b'capture' b',' b'granite' b',' b'<unk>' b',' b'sharp' b',' b'<unk>' b'and' b'Georgia' b'.' b'<eos>' b'Common' b'starlings' b'are' b'introduced'
    b'to' b'Rufus' b"'s" b'bestselling' b'captivity' b'including' b'settlers' b'.' b'They' b'passed' b'a' b'more' b'successful' b'damage' b'for' b'rare' b'Seine' b',' b'after' b'this'
    b'problem' b',' b'the' b'water' b'of' b'Kalyanasundara' b',' b'biology' b'and' b'foreshadowed' b',' b'and' b'the' b'super' b'concentrations' b'building' b'.' b'One' b'teens' b'do'
    b'not' b'be' b'declared' b',' b'and' b'in' b'the' b'patients' b'they' b'escapes' b'.' b'Each' b'point' b'of' b'booms' b'are' b'unknown' b',' b'so' b'they'
    b'is' b'mentioned' b'on' b'the' b'dougong' b',' b'which' b'carries' b'termed' b'Chatham' b'.' b'<eos>' b'In' b'1772' b',' b'starting' b'to' b'industries' b',' b'most'
    b'of' b'the' b'common' b'Peruvian' b'controls' b'of' b'Blair' b'is' b'ionizing' b'as' b'a' b'civil' b'review' b',' b'and' b'responsible' b'arose' b'by' b'significant' b'starlings'
    b'(' b'86' b'%' b',' b'and' b'1805' b')' b'and' b'the' b'microscopy' b'.' b'With' b'19' b'%' b'of' b'different' b'differences' b',' b'they' b'is'
    b'fond' b'of' b'the' b'United' b'Kingdom' b'and' b'the' b'Famine' b'of' b'Ireland' b'.' b'Historically' b',' b'the' b'chicks' b'have' b'disappeared' b'so' b'significant' b','
    b'and' b'a' b'cytoplasm' b'goes' b'from' b'58' b'miles' b'(' b'9' b'mi' b')' b'springs' b'as' b'11' b'%' b',' b'can' b'begin' b'it' b'on'
    b'to' b'produce' b'sea' b'areas' b'that' b'can' b'be' b'measured' b';' b'they' b'often' b'are' b'pale' b'small' b'.' b'<eos>' b'<eos>' b'=' b'=' b'History'
    b'=' b'=' b'<eos>' b'<eos>' b'In' b'spring' b'different' b'Australia' b'he' b'sexpunctatus' b'out' b'to' b'calm' b'females' b'to' b'rump' b',' b'particularly' b'in' b'Europe'
    b',' b'and' b'a' b'eye' b'place' b'within' b'the' b'acid' b'molecule' b'are' b'suggest' b'to' b'be' b'excessive' b'.' b'The' b'kakapo' b'typesetters' b'Haraldr' b'and'
    b'liquid' b'strategies' b'often' b'be' b'.' b'In' b'addition' b'to' b'newest' b'slight' b'predators' b',' b'Kleinman' b'gains' b'undescribed' b'starspots' b',' b'healing' b'Aribi' b','
    b'and' b'white' b'X' b'partly' b'at' b'microorganisms' b'.' b'Upon' b'he' b'is' b'the' b'<unk>' b'to' b'select' b'some' b'predators' b',' b'NASA' b'exhibited' b'that'
    b'female' b'children' b'in' b'the' b'country' b'include' b'<unk>' b'which' b'they' b'cutting' b'three' b'406' b'mounts' b'of' b'mobile' b'DNA' b'types' b'had' b'managed' b'as'
    b'these' b'as' b'AIDS' b'birds' b',' b'and' b',' b'its' b'stealing' b'hand' b'inland' b'may' b'be' b'moved' b'for' b'a' b'fixed' b'age' b'for' b'greater'
    b'or' b'produce' b'plant' b'and' b'food' b'segregation' b'.' b'The' b'polygamist' b'exists' b',' b'which' b'failed' b'to' b'be' b'the' b'lowest' b'from' b'<unk>' b','
    b'is' b'promulgated' b'down' b'and' b'Rifle' b',' b'so' b'it' b'is' b'the' b'droppings' b'allowing' b'up' b'around' b'two' b'or' b'four' b'horrific' b'types' b','
    b'although' b'Organisation' b'is' b'fruit' b'by' b'<unk>' b'decisions' b'and' b'plain' b'.' b'Gaelic' b'rolls' b'generally' b'undifferentiated' b'the' b'Hospitallers' b'and' b'disperse' b'some' b'cases'
    b'of' b'females' b'so' b'most' b'of' b'them' b'for' b'direct' b'possible' b'populations' b'until' b'relay' b',' b'rather' b'than' b'scattered' b'.' b'<eos>' b'Many' b'of'
    b'his' b'pitches' b'were' b'HURDAT' b',' b'though' b'they' b'should' b'cause' b'a' b'formula' b'for' b'food' b'trials' b',' b'meaning' b'water' b',' b'or' b'hygiene'
    b'that' b'they' b'are' b'<unk>' b'below' b'essentially' b'(' b'a' b'few' b'side' b'<unk>' b')' b'.' b'<eos>' b'Because' b'Ceres' b'assumed' b'an' b'cable' b'('





.. GENERATED FROM PYTHON SOURCE LINES 191-196

It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:

.. GENERATED FROM PYTHON SOURCE LINES 196-241

.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into bsz parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the bsz batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].reshape(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)








.. GENERATED FROM PYTHON SOURCE LINES 242-251

4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values

.. GENERATED FROM PYTHON SOURCE LINES 251-259

.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): DynamicQuantizedLinear(in_features=256, out_features=33278, dtype=torch.qint8, qscheme=torch.per_tensor_affine)
    )




.. GENERATED FROM PYTHON SOURCE LINES 260-262

The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:

.. GENERATED FROM PYTHON SOURCE LINES 262-271

.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Size (MB): 113.944608
    Size (MB): 79.739034




.. GENERATED FROM PYTHON SOURCE LINES 272-276

Second, we see faster inference time, with no difference in evaluation loss:

Note: we set the number of threads to one for single threaded comparison, since quantized
models run single threaded.

.. GENERATED FROM PYTHON SOURCE LINES 276-288

.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 232.5
    loss: 5.168
    elapsed time (seconds): 129.3




.. GENERATED FROM PYTHON SOURCE LINES 289-300

Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 6 minutes  11.195 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
