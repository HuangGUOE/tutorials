
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "advanced/dynamic_quantization_tutorial.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(beta) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we will apply the easiest form of quantization -
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.

.. GENERATED FROM PYTHON SOURCE LINES 22-32

.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F








.. GENERATED FROM PYTHON SOURCE LINES 33-39

1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.

.. GENERATED FROM PYTHON SOURCE LINES 39-73

.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))








.. GENERATED FROM PYTHON SOURCE LINES 74-82

2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.

.. GENERATED FROM PYTHON SOURCE LINES 82-132

.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')








.. GENERATED FROM PYTHON SOURCE LINES 133-141

3. Load the pre-trained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pre-trained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.

.. GENERATED FROM PYTHON SOURCE LINES 141-161

.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )




.. GENERATED FROM PYTHON SOURCE LINES 162-165

Now let's generate some text to ensure that the pre-trained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_

.. GENERATED FROM PYTHON SOURCE LINES 165-190

.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b'dignity' b'.' b'The' b'complete' b'observatory' b'was' b'<unk>' b'by' b'well' b'of' b'a' b'third' b'students' b'and' b'similarly' b'were' b'recovered' b'when' b'this' b'is'
    b'long' b'Revival' b'.' b'The' b'left' b'on' b'his' b'host' b'meant' b'by' b'his' b'poem' b'that' b'Coleman' b'posted' b'upbeat' b'great' b'honored' b',' b'and'
    b'where' b'"' b'that' b'Carty' b'gets' b'into' b'an' b'mature' b',' b'a' b'staple' b'resolution' b'"' b',' b'emerged' b'in' b'the' b'spot' b'and' b'ending'
    b'other' b'researchers' b'living' b'by' b'Tarore' b'in' b'Game' b'I' b',' b'specifically' b'his' b'vision' b'.' b'Shortly' b'against' b'fledgling' b',' b'but' b'it' b'was'
    b'a' b'influx' b'of' b'Camille' b'Georg' b'<unk>' b',' b'Ford' b'explores' b'a' b'Ming' b'Two' b'controller' b'for' b'the' b'first' b'seller' b'as' b'a' b'cottage'
    b'to' b'guarantee' b'to' b'compete' b'in' b'the' b'same' b'four' b'in' b'persona' b'.' b'The' b'regiment' b'left' b'him' b'visited' b'off' b',' b'with' b'selling'
    b'out' b'.' b'<eos>' b'The' b'book' b'birds' b'of' b'Haraldr' b'Eppley' b'responded' b'in' b'review' b'Campbell' b'from' b'Cincinnati' b'in' b'the' b'1860s' b'with' b'liberate'
    b'succeeded' b'by' b'the' b'Malayalam' b'line' b'.' b'Newly' b'basin' b'commenced' b'from' b'historian' b'Rama' b'studios' b',' b'which' b'represents' b'a' b'rate' b'of' b'animated'
    b'shots' b',' b'or' b'as' b'long' b'as' b'be' b'able' b'to' b'create' b'him' b'the' b'star' b'not' b'.' b'This' b'is' b'taken' b'in' b'Maq'
    b'rubber' b',' b'<unk>' b'and' b'<unk>' b',' b'before' b'Gothic' b'staff' b',' b'but' b'<unk>' b',' b'but' b'they' b'recovered' b'in' b'a' b'context' b'of'
    b'lighter' b'and' b'an' b'less' b'little' b'respected' b',' b'to' b'<unk>' b'West' b',' b'and' b'the' b'other' b'.' b'English' b'does' b'not' b'lose' b'one'
    b'more' b'signs' b'of' b'the' b'Persians' b"'s" b'cargo' b'and' b'thus' b'I' b'are' b'politically' b'mentioning' b'.' b'Developed' b',' b'they' b'had' b'so' b'become'
    b'often' b'hard' b'.' b'They' b"'ve" b'not' b'worked' b'by' b'characters' b'.' b'There' b'is' b'those' b'that' b'the' b'<unk>' b'source' b'there' b'are' b'no'
    b'Leopard' b'Pole' b'for' b'Ceres' b'and' b'1977' b',' b'in' b'particular' b',' b'or' b'different' b'cars' b',' b'on' b'heavily' b'.' b'"' b'This' b'sent'
    b'Kilmer' b'enlightened' b',' b'"' b'If' b'there' b'is' b'no' b'Clamp' b'narrator' b"'s" b'act' b'of' b'assassination' b'that' b'poetry' b',' b'can' b"'t" b'sink'
    b'officially' b'.' b'If' b'indeed' b',' b'it' b'gives' b'a' b'ordinary' b'<unk>' b'Andrew' b'"' b'A' b'sense' b'of' b'Have' b'Joseph' b'!' b'"' b'('
    b'described' b'"' b'hp' b'<unk>' b'"' b')' b'.' b'The' b'female' b'notes' b'"' b'Person' b"'s" b'<unk>' b'"' b'<unk>' b':' b'Gary' b'<unk>' b'and'
    b'Christian' b'Annie' b'flintlock' b'flightless' b'Crew' b'(' b'Bill' b'opposition' b')' b'.' b'In' b'examination' b'backwards' b'on' b'prize' b'court' b',' b'it' b'married' b'his'
    b'immersion' b'for' b'a' b'kitchen' b'girl' b'of' b'Inari' b'.' b'The' b'following' b'year' b',' b'the' b'growth' b'of' b'bearing' b'munitions' b'and' b'helped' b'spruce'
    b'cheek' b'police' b',' b'where' b'do' b'not' b'begin' b'up' b'it' b',' b'are' b'far' b'to' b'influence' b'their' b'longer' b'counter' b'.' b'When' b'they'
    b'need' b'to' b'appreciate' b'cannibalism' b'through' b'long' b'men' b'and' b'during' b'at' b'least' b'landslides' b'.' b'However' b',' b'I' b'have' b'explained' b'at' b'five'
    b'likely' b'before' b'tins' b'innocent' b'as' b'strengthens' b'it' b'into' b'the' b'Action' b',' b'and' b'only' b'trying' b'to' b'cause' b'<unk>' b'I' b'that' b'seem'
    b'to' b'be' b'released' b'as' b'realistic' b'species' b'.' b'<unk>' b'such' b'as' b'their' b'long' b'numbers' b'of' b'their' b'earlier' b'memory' b',' b'Vettel' b'finds'
    b'Pam' b'to' b'withdraw' b'for' b'outspoken' b'in' b'both' b'night' b'.' b'O' b"'t" b'complete' b'games' b'farther' b',' b'and' b'one' b'trend' b'of' b'the'
    b'detective' b"'s" b'two' b'years' b'.' b'This' b'does' b'not' b'express' b',' b'switch' b'from' b'our' b'theme' b'on' b'the' b'other' b'leg' b'.' b'Nevertheless'
    b',' b'the' b'other' b'March' b'for' b'this' b'investigation' b',' b'planet' b',' b'McDonough' b'Mentmore' b'unsuited' b'proved' b',' b'and' b'the' b'female' b'of' b'John'
    b'John' b'stingrays' b',' b'it' b'is' b'well' b'@-@' b'fired' b',' b'depiction' b',' b'and' b'worried' b'recalls' b'only' b'civilian' b'factors' b'from' b'the' b'other'
    b'Rosenblum' b'.' b'About' b'18' b'fruit' b'in' b'1998' b',' b'the' b'lighthouse' b'increases' b'in' b'a' b'similar' b'sequence' b',' b'but' b'it' b'is' b'known'
    b'at' b'a' b'falsetto' b'rate' b'that' b'silly' b'by' b'favor' b'when' b'while' b'you' b'Fresh' b'distances' b'from' b'the' b'Fauna' b'and' b'ends' b',' b'should'
    b'attract' b'an' b'pre' b'@-@' b'level' b'room' b'directly' b'.' b'He' b'notes' b'that' b'his' b'Native' b'realizes' b'healing' b',' b'enormous' b'Magnificent' b'cakes' b'have'
    b'mentally' b'increasing' b'everyday' b'fluid' b',' b'forming' b'versions' b'of' b'extremely' b'love' b'or' b'so' b'imitating' b'it' b'.' b'Stela' b'APL' b'both' b'includes' b'his'
    b'character' b'to' b'be' b'represented' b'.' b'<eos>' b'Astraeus' b'Hollow' b'(' b'especially' b'results' b'in' b'Atlanta' b')' b'according' b'to' b'characters' b'for' b'dogs' b'and'
    b'the' b'magnates' b'representing' b'geography' b'on' b'a' b'predator' b'.' b'However' b',' b'when' b'unlike' b'this' b'variety' b',' b'this' b',' b'used' b'when' b'opposition'
    b'will' b'be' b'accustomed' b'at' b'a' b'very' b'successful' b'"' b'bred' b'"' b'with' b'them' b'.' b'Leon' b'flowers' b'Oaxaca' b'throughout' b'a' b'very' b'or'
    b'a' b'ordinary' b'accident' b',' b'but' b'<unk>' b',' b'so' b'chivo' b'has' b'allowed' b'a' b'far' b'hospitals' b'duly' b',' b'which' b'grows' b'when' b'it'
    b'was' b'clear' b'.' b'Sometimes' b'these' b'sources' b',' b'some' b'people' b'penetration' b'must' b'die' b'to' b'either' b',' b'if' b'they' b'spend' b'Ernest' b'her'
    b'benefits' b':' b'humans' b"'re" b'<unk>' b',' b'while' b'<unk>' b'they' b'"' b'could' b'<unk>' b'and' b'however' b'very' b'elevating' b'...' b'when' b'Jesus' b'presents'
    b'me' b'boundary' b'as' b'romantically' b'or' b'identify' b'.' b'"' b'Later' b'not' b'short' b'range' b',' b'a' b'word' b'at' b'<unk>' b'customers' b',' b'often'
    b'relive' b'.' b'It' b'does' b'not' b'have' b'since' b'Managing' b'addressing' b'for' b'<unk>' b',' b'but' b'that' b'widespread' b'birds' b'engraving' b'calls' b'.' b'At'
    b'one' b'game' b',' b'Pavarotti' b'signed' b'a' b'total' b'place' b'hitting' b'eggs' b'to' b'produce' b'the' b'R\xc3\xa9union' b'man' b'swamps' b'sort' b',' b'limited' b'private'
    b'stories' b'and' b'animals' b'there' b'are' b'no' b'neighboring' b'starling' b'.' b'<eos>' b'<eos>' b'=' b'=' b'Gameplay' b'=' b'=' b'<eos>' b'<eos>' b'Moment' b'is'
    b'commonly' b'well' b'inbound' b'by' b'their' b'common' b'observation' b',' b'as' b'quite' b'as' b'they' b',' b'but' b'there' b'is' b'no' b'long' b'meaning' b"'"
    b'Gofraid' b',' b'falling' b'so' b'.' b'He' b'dies' b'his' b'position' b'outside' b'or' b'stronger' b'print' b';' b'Unlike' b'this' b'stumps' b'the' b'breeding' b'protein'
    b'rate' b'tell' b'her' b'own' b',' b'long' b'tired' b'of' b'Ceres' b'.' b'The' b'male' b'is' b'well' b'@-@' b'through' b'@-@' b'white' b'energy' b'or'
    b'believed' b'he' b'has' b'more' b'C6H5' b'videos' b',' b'as' b'is' b'dependent' b'to' b'<unk>' b'.' b'With' b'authenticity' b'may' b'be' b'able' b'to' b'leave'
    b'reducing' b'the' b'other' b'similarity' b'in' b'display' b'and' b'tentative' b',' b'they' b'only' b'features' b'.' b'As' b'of' b'other' b'instances' b',' b'large' b'pairs'
    b'of' b'Illinois' b'just' b'be' b'forever' b'aims' b'to' b'achieve' b'red' b'kinds' b'.' b'The' b'down' b'are' b'supported' b'as' b'<unk>' b'Hill' b',' b'or'
    b'chromatin' b'(' b'challenge' b'eclipsing' b'calf' b')' b'.' b'The' b'body' b'that' b'Captain' b'"' b'the' b'most' b'2' b'@.@' b'3' b'<unk>' b'dollars' b'not'
    b'for' b'its' b'mating' b'numbers' b'is' b'the' b'period' b'\xe2\x80\x93' b'so' b'the' b'umpires' b',' b'or' b'it' b'<unk>' b'.' b'The' b'more' b'portal' b'boat'
    b'they' b'suggest' b'is' b'happens' b'to' b'their' b'quality' b'at' b'killing' b'imperfections' b'covers' b'in' b'originally' b'difference' b'with' b'unidentified' b'threads' b'.' b'"' b'According'





.. GENERATED FROM PYTHON SOURCE LINES 191-196

It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:

.. GENERATED FROM PYTHON SOURCE LINES 196-241

.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into bsz parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the bsz batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].reshape(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)








.. GENERATED FROM PYTHON SOURCE LINES 242-251

4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values

.. GENERATED FROM PYTHON SOURCE LINES 251-259

.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): DynamicQuantizedLinear(in_features=256, out_features=33278, dtype=torch.qint8, qscheme=torch.per_tensor_affine)
    )




.. GENERATED FROM PYTHON SOURCE LINES 260-262

The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:

.. GENERATED FROM PYTHON SOURCE LINES 262-271

.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Size (MB): 113.944608
    Size (MB): 79.739034




.. GENERATED FROM PYTHON SOURCE LINES 272-276

Second, we see faster inference time, with no difference in evaluation loss:

Note: we set the number of threads to one for single threaded comparison, since quantized
models run single threaded.

.. GENERATED FROM PYTHON SOURCE LINES 276-288

.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 227.1
    loss: 5.168
    elapsed time (seconds): 127.1




.. GENERATED FROM PYTHON SOURCE LINES 289-300

Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 6 minutes  3.345 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
