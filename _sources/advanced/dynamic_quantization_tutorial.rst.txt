
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "advanced/dynamic_quantization_tutorial.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(beta) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we will apply the easiest form of quantization -
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.

.. GENERATED FROM PYTHON SOURCE LINES 22-32

.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F








.. GENERATED FROM PYTHON SOURCE LINES 33-39

1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.

.. GENERATED FROM PYTHON SOURCE LINES 39-73

.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))








.. GENERATED FROM PYTHON SOURCE LINES 74-82

2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.

.. GENERATED FROM PYTHON SOURCE LINES 82-132

.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')








.. GENERATED FROM PYTHON SOURCE LINES 133-141

3. Load the pre-trained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pre-trained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.

.. GENERATED FROM PYTHON SOURCE LINES 141-161

.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )




.. GENERATED FROM PYTHON SOURCE LINES 162-165

Now let's generate some text to ensure that the pre-trained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_

.. GENERATED FROM PYTHON SOURCE LINES 165-190

.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b'GameSpy' b',' b'a' b'sensory' b'synonymized' b'of' b'the' b'Republic' b'of' b'Nicaragua' b',' b'"' b'Matthew' b'Blood' b'That' b'opportunity' b'"' b'USAID' b'from' b'2'
    b'and' b'25' b'%' b'of' b'the' b'first' b'other' b'year' b',' b'in' b'the' b'vicinity' b'of' b'a' b'orbit' b'that' b'is' b'immediately' b'written' b'by'
    b'an' b'parallax' b'of' b'long' b'@-@' b'sexes' b'at' b'Britain' b'.' b'The' b'colony' b'of' b'children' b'feature' b'completion' b'prisons' b',' b'torrential' b'Uno' b','
    b'and' b'criminal' b'contexts' b'for' b'<unk>' b'in' b'once' b'Varrick' b'(' b'God' b')' b'and' b'<unk>' b'.' b'<unk>' b'turning' b'that' b'compromise' b',' b'Odaenathus'
    b',' b'Abby' b'of' b'Cerberus' b',' b'located' b'with' b'the' b'Neversoft' b',' b'Chicago' b'Salmon' b'(' b'<unk>' b'D' b')' b',' b'"' b'Here' b'"'
    b'(' b'dynamite' b')' b',' b'and' b'native' b'"' b'All' b'@-@' b'plus' b'Christian' b'"' b'(' b'or' b'"' b'stirring' b'as' b'God' b')' b'"'
    b')' b'far' b'to' b'age' b'The' b'English' b'folk' b'planets' b'in' b'a' b'Civilian' b'species' b'.' b'Also' b'that' b'for' b'many' b'in' b'his' b'experiences'
    b'they' b'went' b'with' b'shut' b'from' b'forget' b'such' b'to' b'far' b'<unk>' b',' b'discography' b'marched' b'the' b'different' b'nebula' b',' b'creating' b'the' b'intention'
    b'and' b'Learned' b'for' b'him' b'even' b'citing' b',' b'<unk>' b',' b'<unk>' b',' b'Madero' b"'s" b'poor' b'function' b'(' b'turned' b'received' b'or' b'a'
    b'source' b'of' b'<unk>' b')' b',' b'or' b'above' b'Farber' b'.' b'Several' b'knew' b'that' b'critics' b'must' b'run' b'up' b'for' b'self' b'@-@' b'seas'
    b'so' b'in' b'the' b'past' b',' b'initially' b'later' b'else' b'.' b'Most' b'of' b'these' b'many' b'Hokie' b'263' b'was' b'reminiscent' b'of' b'a' b'modern'
    b'variety' b'of' b'transits' b',' b'exclusively' b'having' b'concluded' b'so' b'received' b'it' b'before' b'of' b'being' b'for' b'only' b'previous' b'events' b'.' b'"' b'The'
    b'[' b'Mariana' b']' b'World' b'is' b'my' b'first' b',' b'bettered' b'these' b'too' b'criteria' b'"' b'.' b'The' b'actors' b'have' b'partly' b'happen' b'.'
    b'Even' b'"' b'kills' b'its' b'doctors' b'or' b'Coniston' b'electric' b'and' b'a' b'bit' b'honorary' b'game' b'"' b'and' b'"' b'The' b'detail' b'"' b'in'
    b'<unk>' b'follows' b'their' b'couple' b'for' b'various' b'livestock' b'.' b'His' b'next' b'place' b'was' b'used' b'to' b'write' b'a' b'attack' b'which' b'was' b'erected'
    b'at' b'sexpunctatus' b'asking' b'a' b'car' b'before' b'that' b'Bennett' b'intrigue' b'.' b'M.' b"'Malley" b"'s" b'range' b'includes' b'mortal' b'status' b',' b'"' b'<unk>'
    b'"' b'and' b'"' b'flotilla' b'"' b'.' b'They' b'has' b'said' b'that' b'the' b'character' b'in' b'journeys' b'the' b'series' b'of' b'an' b"'" b'romance'
    b'"' b'.' b'"' b'The' b'Zenobia' b'God' b'who' b'knew' b'"' b'Nf6' b'now' b'today' b'because' b'change' b'increased' b'online' b'due' b'to' b'getting' b'and'
    b'technical' b'instruments' b'to' b'have' b'a' b'sex' b'act' b'.' b'The' b'gameplay' b'says' b'"' b'opposite' b'anything' b'made' b'in' b'it' b'emitted' b'.' b'"'
    b'The' b'title' b'fails' b'many' b'cuts' b'with' b'other' b'lives' b'(' b'indeed' b'a' b'full' b'series' b')' b'.' b'Subsequently' b',' b'the' b'male' b'is'
    b'the' b'<unk>' b'of' b'the' b'<unk>' b'favored' b'by' b'unnecessary' b',' b'and' b'the' b'latter' b'lightly' b'would' b'be' b'closed' b',' b'but' b'they' b'lived'
    b'before' b'they' b'shall' b'offer' b'their' b'scale' b'.' b'But' b'pictures' b'lacks' b'a' b'horror' b'minds' b'in' b'1567' b'.' b'Other' b'sense' b'give' b'catch'
    b'themes' b'within' b'the' b'subsequent' b'family' b'.' b'Ceres' b'leaves' b'them' b'as' b'"' b'<unk>' b'of' b'guitarist' b'wouldn' b"'t" b'<unk>' b'Marlene' b"'" b'in'
    b'late' b'that' b'to' b'deliver' b'or' b'cherries' b'to' b'make' b'things' b'with' b'some' b'other' b'spots' b'.' b'He' b"'re" b'thought' b'to' b'find' b'the'
    b'good' b'C.R.U.S.H.' b'[' b'of' b'his' b'death' b',' b'not' b'near' b'makers' b'and' b'Cherry' b'"' b'.' b'Corbet' b"'s" b'Choice' b'is' b'<unk>' b'intent'
    b'about' b'the' b'poem' b':' b'Palmyra' b'through' b'<unk>' b'and' b'the' b'Dead' b'<unk>' b'an' b'short' b'<unk>' b'<unk>' b'Mifune' b'(' b'<unk>' b')' b','
    b'two' b'.' b'(' b'Star' b'<unk>' b',' b'all' b'of' b'which' b'is' b'enthroned' b'to' b'use' b',' b'of' b'the' b'idea' b'of' b'Trollope' b'bearing'
    b'near' b'Australia' b')' b'reflection' b'.' b'"' b'Similar' b'things' b'relented' b'from' b'a' b'star' b'<unk>' b'Pfaster' b'moves' b'around' b'-' b'a' b'soloist' b'from'
    b'"' b'.' b'Living' b"'" b'innocence' b'immediately' b'is' b'"' b'150' b'loading' b'like' b'a' b'version' b',' b'not' b'nutrient' b'or' b'soul' b'.' b'If'
    b'being' b'very' b'key' b',' b'once' b'can' b'wish' b',' b'they' b'left' b'of' b'imaginative' b'aware' b'of' b'mythology' b'.' b'"' b'The' b'own' b'amount'
    b'of' b'controversy' b'should' b'be' b'written' b'by' b'A.' b'\xce\xbaB' b',' b'and' b'the' b'same' b'down' b'Prefectures' b'has' b'apparent' b'blame' b'creates' b'new' b'head'
    b'prey' b'as' b'they' b'will' b'allow' b'125th' b'society' b'.' b'<eos>' b'Discovery' b'<unk>' b'I' b'said' b'they' b"'ve" b'more' b'confused' b',' b'likely' b'"'
    b'they' b'was' b'3' b'\xe2\x80\x93' b'12' b'that' b'You' b'would' b'leave' b'locally' b'to' b'have' b'velvet' b'of' b'till' b'microscopic' b'@-@' b'cold' b',' b'rising'
    b',' b'the' b'foxes' b'around' b'black' b'each' b'even' b'/' b'1' b',' b'moved' b'to' b'around' b'18' b'mph' b'and' b'doesn' b"'t" b"'t" b"'t"
    b'be' b'what' b'is' b'abbreviated' b',' b'chorus' b'or' b'super' b',' b'then' b'they' b'have' b'once' b'grenade' b'and' b'It' b'could' b'have' b'to' b'do'
    b'or' b'or' b'lips' b'about' b'that' b'on' b'the' b'hand' b'until' b'developing' b'another' b'eaten' b'cascade' b',' b'or' b'even' b'<unk>' b'to' b'legal' b','
    b'white' b',' b'roommate' b'Glenn' b'(' b'<unk>' b')' b'Centre' b'<unk>' b',' b'halogenated' b'Would' b'irrelevant' b'(' b'Mitch' b'da' b')' b"'" b'Directions' b'-'
    b'and' b'accumulated' b'their' b'largest' b'integrity' b'for' b'writing' b'itself' b'or' b'doing' b'it' b'down' b',' b'very' b'true' b'and' b'clapping' b':' b'other' b'guys'
    b'devastated' b'Plunketts' b'woodlands' b'could' b'be' b'receptive' b'.' b'<eos>' b'<eos>' b'=' b'=' b'Experience' b'=' b'=' b'<eos>' b'<eos>' b'While' b'the' b'nature' b'of'
    b'its' b'superiority' b'feet' b'with' b'the' b'husbandman' b'into' b'Ceres' b',' b'they' b'tilt' b'that' b'they' b'find' b'dancing' b'to' b'normalcy' b'.' b'The' b'film'
    b'is' b'examination' b'of' b'a' b'<unk>' b'limited' b'Band' b'<unk>' b'@-@' b'<unk>' b',' b'and' b'are' b'progressive' b',' b'so' b'from' b'which' b'the' b'animal'
    b'are' b'overwhelmed' b',' b'it' b'believes' b'that' b'they' b'do' b'gems' b'have' b'the' b'classical' b'strength' b'of' b'his' b'self' b'@-@' b'wide' b'light' b'and'
    b'their' b'formula' b'.' b'Further' b'grinder' b'is' b'urges' b'when' b'the' b'usual' b'sorts' b'of' b'Abraham' b'symbol' b'had' b'pointed' b'after' b'.' b'Chinese' b'balls'
    b'<unk>' b'Manager' b'dynamically' b'at' b'how' b'connected' b'it' b'one' b',' b'<unk>' b'for' b'sprinting' b',' b'the' b'closest' b'level' b'that' b'supports' b'they' b'were'
    b'inadvertently' b'cured' b'.' b'Therefore' b',' b'they' b'perform' b'ardent' b'cliffs' b'of' b'the' b'existence' b'of' b'broad' b'spots' b'or' b'not' b'bring' b'to' b'prevent'
    b'European' b'\xc4\x90\xc3\xacnh' b'colour' b'.' b'Ultimately' b',' b'not' b'talking' b'are' b'dangerous' b'in' b'both' b'a' b'eagle' b'.' b'While' b'a' b'mad' b'Jane' b'shaped'
    b'suit' b'as' b',' b'"' b'Leslie' b'medieval' b'may' b'be' b'roll' b'or' b'all' b'incorporate' b'.' b'"' b'A' b'female' b'angle' b'include' b'can' b'be'
    b'tested' b'so' b'a' b'mandible' b',' b'who' b'follows' b'a' b'close' b'altar' b'or' b'a' b'distinctive' b'unmarried' b'carriage' b',' b'when' b'they' b'were' b'more'
    b'flute' b'160' b'years' b'old' b'.' b'<eos>' b'<eos>' b'=' b'=' b"'Las" b'=' b'=' b'<eos>' b'<eos>' b'<eos>' b'=' b'=' b'=' b'Field' b'tissue'
    b'=' b'=' b'=' b'<eos>' b'<eos>' b'In' b'but' b'kakapo' b',' b'colorful' b',' b'and' b'membrane' b',' b'they' b'inside' b'<unk>' b'and' b'ascending' b'over'





.. GENERATED FROM PYTHON SOURCE LINES 191-196

It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:

.. GENERATED FROM PYTHON SOURCE LINES 196-241

.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into bsz parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the bsz batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].reshape(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)








.. GENERATED FROM PYTHON SOURCE LINES 242-251

4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values

.. GENERATED FROM PYTHON SOURCE LINES 251-259

.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): DynamicQuantizedLinear(in_features=256, out_features=33278, dtype=torch.qint8, qscheme=torch.per_tensor_affine)
    )




.. GENERATED FROM PYTHON SOURCE LINES 260-262

The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:

.. GENERATED FROM PYTHON SOURCE LINES 262-271

.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Size (MB): 113.944608
    Size (MB): 79.739034




.. GENERATED FROM PYTHON SOURCE LINES 272-276

Second, we see faster inference time, with no difference in evaluation loss:

Note: we set the number of threads to one for single threaded comparison, since quantized
models run single threaded.

.. GENERATED FROM PYTHON SOURCE LINES 276-288

.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 214.0
    loss: 5.168
    elapsed time (seconds): 105.9




.. GENERATED FROM PYTHON SOURCE LINES 289-300

Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 5 minutes  29.007 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
