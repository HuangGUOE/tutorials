
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "advanced/dynamic_quantization_tutorial.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(beta) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we will apply the easiest form of quantization -
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.

.. GENERATED FROM PYTHON SOURCE LINES 22-32

.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F








.. GENERATED FROM PYTHON SOURCE LINES 33-39

1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.

.. GENERATED FROM PYTHON SOURCE LINES 39-73

.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))








.. GENERATED FROM PYTHON SOURCE LINES 74-82

2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.

.. GENERATED FROM PYTHON SOURCE LINES 82-132

.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')








.. GENERATED FROM PYTHON SOURCE LINES 133-141

3. Load the pre-trained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pre-trained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.

.. GENERATED FROM PYTHON SOURCE LINES 141-161

.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )




.. GENERATED FROM PYTHON SOURCE LINES 162-165

Now let's generate some text to ensure that the pre-trained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_

.. GENERATED FROM PYTHON SOURCE LINES 165-190

.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b'bands' b'and' b'by' b'start' b'horsepower' b'to' b'guarantee' b'them' b'to' b'take' b'a' b'necklace' b'resembling' b'Doofenshmirtz' b'for' b'them' b'drawings' b'.' b'<eos>' b'<eos>'
    b'=' b'=' b'spear' b'=' b'=' b'<eos>' b'<eos>' b'Farah' b'Bernie' b'Oilers' b'succeeded' b'home' b'of' b'honorary' b'race' b'throughout' b'his' b'mansion' b'on' b'June'
    b'4' b',' b'2007' b'when' b'Mosley' b'died' b'as' b'part' b'of' b'his' b'name' b'against' b'Jerzy' b'watched' b'in' b'London' b'.' b'Mosley' b'told' b'you'
    b'"' b'participated' b'in' b'in' b'sire' b'"' b',' b'spelled' b'the' b'academy' b'for' b'the' b'Quan' b'Evening' b'Award' b'(' b'false' b'African' b'Saga' b'of'
    b'<unk>' b')' b',' b'Mendota' b'trout' b'(' b'Ian' b'Age' b')' b',' b'mayor' b'Eritrea' b'<unk>' b',' b'unpublished' b'Bowers' b'(' b'Jamaica' b')' b','
    b'CA' b'and' b'baptised' b'declined' b'school' b'supply' b'@-@' b'Norman' b'for' b'regular' b'martial' b'descent' b'.' b'Walker' b"'s" b'largest' b'time' b'of' b'production' b'was'
    b'a' b'kind' b'of' b'non' b'@-@' b'Montenegrin' b',' b'having' b'establishing' b'a' b'practically' b'story' b'of' b'<unk>' b'Masters' b'fore' b'Wilson' b'.' b'As' b'of'
    b'April' b'2011' b'his' b'"' b'rotation' b'of' b'Melbourne' b'"' b'may' b'be' b'organized' b'to' b'represent' b'large' b'political' b'sites' b'(' b'3' b'%' b'@-@'
    b'Bede' b')' b'to' b'pose' b'Crash' b'State' b"'s" b'novel' b',' b'Kamara' b'Mackenzie' b'(' b'Adams' b')' b',' b'read' b'Hornung' b"'s" b'assassination' b'with'
    b'a' b'R\xc3\xa9union' b'legs' b'.' b'<eos>' b'Two' b'years' b'later' b',' b'Mosley' b"'s" b'head' b'internationally' b'created' b'a' b'non' b'@-@' b'ninth' b'@-@' b'year'
    b'wife' b',' b'<unk>' b'CEO' b'Ending' b'Manning' b',' b'a' b'scratch' b'with' b'a' b'planet' b',' b'a' b'character' b'of' b'up' b'that' b'consists' b'of'
    b'Mars' b',' b'seam' b'<unk>' b',' b'and' b'Cole' b'.' b'<unk>' b',' b'such' b'as' b'<unk>' b',' b'was' b'forbidden' b'by' b'American' b',' b'bold'
    b'based' b'on' b'the' b'Army' b"'s" b'<unk>' b'and' b'swampy' b'officers' b'\xe2\x80\x94' b'with' b'receiving' b'a' b'criminal' b'head' b'resolved' b'as' b'"' b'parent' b'burning'
    b'opinions' b'astronomical' b'unfamiliar' b'and' b'tribute' b'<unk>' b'\xe2\x80\x94' b'but' b'very' b'on' b'hard' b'intensity' b'<unk>' b'today' b'or' b'oxygen' b'[' b'...' b']' b'they'
    b'couldn' b"'t" b'best' b'believe' b'you' b"'re" b"'" b'<eos>' b'This' b'is' b'usually' b'overlooked' b'in' b'the' b'four' b'Lynch' b'introductory' b'<unk>' b'"' b'though'
    b'however' b',' b'it' b'has' b'no' b'longer' b'Up' b'increased' b',' b'forming' b'in' b'<unk>' b',' b'Hearts' b',' b'<unk>' b',' b'Castle' b',' b'<unk>'
    b',' b'<unk>' b',' b'and' b'.' b'However' b',' b'he' b'emphasizes' b'the' b'improved' b'average' b'number' b'of' b'failures' b',' b'with' b'nominations' b'and' b'certain'
    b'the' b'emerging' b'cohesive' b'style' b'.' b'The' b'Laurence' b'Ruth' b'Thousands' b'is' b'too' b'modeled' b'in' b'times' b'<unk>' b'in' b'Telugu' b'control' b';' b'despite'
    b'every' b'added' b'below' b'the' b'lack' b'of' b'spots' b'from' b'prefabricated' b',' b'the' b'earliest' b'growing' b'harsh' b',' b'high' b'when' b'it' b'was' b'wide'
    b'to' b'whether' b'the' b'smell' b'can' b'be' b'able' b'to' b'eat' b'their' b'glass' b'Hubble' b'shower' b'.' b'consult' b'may' b'be' b'the' b'same' b','
    b'they' b'the' b'oldest' b'Tide' b'@-@' b'rich' b'g.' b'cushion' b'pace' b',' b'have' b'been' b'addressed' b'by' b'508' b'is' b'<unk>' b',' b'mouse' b'<unk>'
    b'.' b'smart' b'Ward' b"'s" b'wives' b'kill' b'the' b'<unk>' b'west' b',' b'that' b'will' b'find' b'put' b'place' b'with' b'other' b'other' b'<unk>' b'noise'
    b'questionable' b'miners' b'.' b'Similar' b'kakapo' b'case' b'has' b'very' b'farther' b'and' b'<unk>' b';' b',' b'the' b'player' b'known' b'as' b'"' b'the' b'Islamic'
    b'Amendment' b'"' b'has' b'been' b'reworked' b'as' b'it' b'was' b'less' b'Stony' b',' b'as' b'they' b'allowed' b'back' b'to' b'their' b'skin' b'at' b'IFA'
    b'.' b'he' b'believes' b'in' b'a' b'worsened' b'when' b'he' b'has' b'open' b'Trapdoor' b'she' b'thus' b'suggests' b'he' b'have' b'an' b'dense' b'gentleman' b','
    b'to' b'operate' b'further' b'.' b'<eos>' b'Florida' b'is' b'assigned' b'to' b'human' b'television' b'planet' b'by' b'deer' b'on' b'the' b'European' b'planet' b'.' b'One'
    b'immediate' b'further' b'claim' b'trench' b'@-@' b'up' b'accommodations' b',' b'are' b'eaten' b'by' b'Julio' b'vulgaris' b'annually' b'held' b'by' b'Chronicles' b'<unk>' b'.' b'<unk>'
    b'(' b'k' b'Russell' b')' b'and' b'"' b'exposing' b'Edition' b'nest' b'ventral' b'manipulate' b'exotic' b'or' b'extinct' b'roosts' b"'" b'his' b'form' b'in' b'an'
    b'game' b'of' b'mind' b'"' b'individuals' b',' b'followed' b'with' b'slavery' b'<unk>' b'<unk>' b'a' b'Brandy' b',' b'hand' b',' b'deliberately' b'held' b'.' b'When'
    b'their' b'Sb' b'is' b'quite' b'in' b'the' b'same' b'parts' b',' b'all' b'other' b'or' b'spherical' b'calls' b'Croats' b',' b'with' b'his' b'early' b'pair'
    b'within' b'the' b'fragment' b'of' b'mitosis' b',' b'is' b'recognise' b'.' b'A' b'female' b'of' b'nature' b'arc' b'suspect' b'it' b'could' b'be' b'extremely' b'independent'
    b'.' b'When' b'its' b'atomic' b'<unk>' b'is' b'like' b'a' b'hillside' b',' b'it' b'may' b'be' b'administered' b'by' b'tous' b'Muhammad' b',' b'Doran' b'adjective'
    b',' b'battlefield' b'rocks' b'and' b'<unk>' b'.' b'A' b'magical' b'inducing' b'blood' b'shark' b',' b'which' b'had' b'a' b'long' b'omniscience' b'is' b'divided' b'into'
    b'this' b'alive' b'posture' b'guards' b':' b'it' b'is' b'an' b'very' b'easy' b'man' b'for' b'other' b'open' b'teeth' b',' b'particularly' b'after' b'part' b'of'
    b'numerous' b'model' b'.' b'Most' b'experts' b'hundreds' b'that' b'have' b'required' b'many' b'species' b'of' b'food' b'.' b'According' b'to' b'something' b'long' b',' b'they'
    b'have' b'their' b'finances' b'for' b'mating' b'.' b'<eos>' b'Sometimes' b'ice' b'rarely' b'survive' b'to' b'her' b'old' b'needs' b',' b'all' b'on' b'"' b'tooth'
    b'"' b'movement' b'effects' b'may' b'be' b'eased' b'to' b'provoke' b'their' b'naturally' b',' b'channels' b'(' b'their' b'appearance' b',' b'or' b'Tuozhou' b')' b','
    b'although' b'Major' b'Stepmother' b'separates' b'and' b'sacks' b'are' b'known' b'through' b'their' b'mist' b',' b'Barbuda' b',' b'<unk>' b',' b'<unk>' b',' b'Similar' b','
    b'accessible' b',' b'<unk>' b',' b'Norway' b'and' b'Mkhedruli' b'upon' b'other' b'starlings' b'.' b'<eos>' b'Z.' b'declines' b'is' b'also' b'located' b'by' b'eggs' b'.'
    b'Their' b'distinctive' b'calls' b'of' b'interface' b',' b'and' b'Hentz' b'watched' b'a' b'false' b'projection' b'of' b'religion' b',' b'intense' b'eggs' b',' b'disrupting' b'Times'
    b',' b'don' b'Ke' b',' b'<unk>' b',' b'tied' b'<unk>' b',' b'\xe3\x80\x88' b'Harris' b',' b'<unk>' b'Family' b',' b'R' b'<unk>' b',' b'<unk>' b'and'
    b'Stanford' b'.' b'The' b'partner' b'ends' b'as' b'Isesi' b'(' b'called' b'O' b'Eliot' b')' b'jam' b',' b'including' b'whom' b'their' b'neck' b'echoed' b'or'
    b'makes' b'them' b'iron' b'takes' b'time' b',' b'it' b'is' b'a' b'integral' b'darker' b'structure' b'of' b'a' b'food' b'deity' b'.' b'Although' b'the' b'female'
    b'closely' b'prefers' b',' b'it' b'was' b',' b'quantum' b'and' b'the' b'outside' b'parrot' b'it' b',' b'but' b'some' b'birds' b'indicate' b'that' b',' b'when'
    b'they' b'they' b'do' b'not' b'be' b'able' b'to' b'send' b'governmental' b'mind' b'itself' b',' b'they' b'are' b'presumed' b'now' b'frustrated' b'.' b'<eos>' b'Sudan'
    b'islands' b'Hum' b'reported' b'that' b'M.' b'Llosa' b'can' b'<unk>' b'the' b'beast' b',' b'which' b'become' b'similar' b'to' b'theoretically' b'man' b'rather' b'than' b','
    b'during' b'example' b'of' b'interior' b'movements' b'with' b'k\xc4\x81la' b'.' b'At' b'his' b'feet' b'between' b'2' b'@.@' b'5' b'million' b'\xc3\x97' b'80' b'million' b'times'
    b'(' b'with' b'1' b'@.@' b'5' b'million' b'F' b')' b'flooded' b'a' b'portion' b'world' b'airship' b',' b'dim' b'acid' b'(' b'<unk>' b')' b','
    b'average' b'by' b'Bootleg' b'@-@' b'Scleroderma' b',' b'<unk>' b'and' b'the' b'family' b'.' b'The' b'first' b'object' b'has' b'no' b'parrots' b',' b'in' b'their'
    b'male' b'feature' b'Jainism' b'and' b'mortars' b'(' b'about' b'2' b'@.@' b'10' b'million' b'years' b'ago' b')' b',' b'demonstrators' b',' b'ages' b',' b'and'





.. GENERATED FROM PYTHON SOURCE LINES 191-196

It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:

.. GENERATED FROM PYTHON SOURCE LINES 196-241

.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into bsz parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the bsz batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].reshape(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)








.. GENERATED FROM PYTHON SOURCE LINES 242-251

4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values

.. GENERATED FROM PYTHON SOURCE LINES 251-259

.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): DynamicQuantizedLinear(in_features=256, out_features=33278, dtype=torch.qint8, qscheme=torch.per_tensor_affine)
    )




.. GENERATED FROM PYTHON SOURCE LINES 260-262

The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:

.. GENERATED FROM PYTHON SOURCE LINES 262-271

.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Size (MB): 113.943637
    Size (MB): 79.738057




.. GENERATED FROM PYTHON SOURCE LINES 272-276

Second, we see faster inference time, with no difference in evaluation loss:

Note: we set the number of threads to one for single threaded comparison, since quantized
models run single threaded.

.. GENERATED FROM PYTHON SOURCE LINES 276-288

.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 205.0
    loss: 5.168
    elapsed time (seconds): 102.8




.. GENERATED FROM PYTHON SOURCE LINES 289-300

Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 5 minutes  15.923 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
