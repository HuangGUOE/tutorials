
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "advanced/dynamic_quantization_tutorial.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(beta) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we will apply the easiest form of quantization -
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.

.. GENERATED FROM PYTHON SOURCE LINES 22-32

.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F








.. GENERATED FROM PYTHON SOURCE LINES 33-39

1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.

.. GENERATED FROM PYTHON SOURCE LINES 39-73

.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))








.. GENERATED FROM PYTHON SOURCE LINES 74-82

2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.

.. GENERATED FROM PYTHON SOURCE LINES 82-132

.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')








.. GENERATED FROM PYTHON SOURCE LINES 133-141

3. Load the pre-trained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pre-trained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.

.. GENERATED FROM PYTHON SOURCE LINES 141-161

.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )




.. GENERATED FROM PYTHON SOURCE LINES 162-165

Now let's generate some text to ensure that the pre-trained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_

.. GENERATED FROM PYTHON SOURCE LINES 165-190

.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b',' b'their' b'financial' b'perfection' b'using' b'part' b'have' b'immigrated' b'searching' b'.' b'Some' b'titles' b'have' b'further' b'taken' b'to' b'live' b'another' b'<unk>' b'course'
    b'can' b'be' b'frequently' b'changing' b'.' b'He' b'reportedly' b'tells' b'his' b'plan' b'six' b'years' b'before' b'Vandernoot' b'against' b'State' b',' b'return' b'correct' b'-'
    b'nothing' b'the' b'notion' b'case' b'that' b'distances' b'was' b'removed' b'.' b'<eos>' b'<eos>' b'=' b'=' b'Biography' b'=' b'=' b'<eos>' b'<eos>' b'Subspecies' b'they'
    b'observed' b'special' b'fans' b'for' b'loaves' b',' b'including' b'Web' b'exhaled' b',' b'including' b'Mail' b'and' b'at' b'S.' b'beetles' b'and' b'Mira' b'with' b'The'
    b'ethnically' b'definition' b'.' b'Upon' b'the' b'resulting' b'Cave' b',' b'Omar' b"'s" b'story' b'is' b'a' b'S.R.' b'Informer' b'to' b'enter' b'into' b'infancy' b'and'
    b'the' b'accents' b'variations' b',' b'and' b'she' b'suggested' b'it' b'must' b'be' b'amassed' b'as' b'to' b'have' b'other' b'driving' b'theropods' b'.' b'However' b','
    b'"' b'those' b'breaking' b'long' b'themes' b',' b'assassination' b',' b'<unk>' b'fantasies' b'wrought' b'special' b'symbiotic' b'cards' b',' b'or' b'<unk>' b'boys' b',' b'one'
    b'of' b'most' b'uncovering' b'or' b'companies' b'that' b'need' b'to' b'be' b'when' b'.' b'"' b'On' b'his' b'2009' b'South' b'American' b'content' b',' b'and'
    b'an' b'pads' b'of' b'Narasimha' b'birth' b'about' b'21' b'years' b'before' b'however' b',' b'it' b'began' b'to' b'dry' b'aspects' b'of' b'art' b'Africaine' b','
    b'particularly' b'known' b'since' b'Matagorda' b'.' b'A' b'broader' b'manga' b'continued' b'up' b'to' b'her' b'diaries' b'while' b'however' b',' b'he' b'was' b'thirty' b'@-@'
    b'justified' b',' b'Cleland' b'is' b'suspected' b'to' b'write' b'by' b'mines' b'as' b'"' b'pulls' b'individual' b'Gagosian' b'"' b'.' b'Common' b'screening' b'males' b'were'
    b'appointed' b'intersections' b'.' b'du' b'Power' b'Ceres' b'proceeds' b'for' b'this' b'graphics' b'.' b'During' b'this' b'period' b'best' b'cinematic' b'to' b'have' b',' b'they'
    b'assume' b'factory' b'processes' b'(' b'Scott' b'currants' b')' b'are' b'more' b'qualities' b'for' b'Dan' b'@-@' b'Terror' b'.' b'When' b'instance' b'means' b'lunch' b'or'
    b'unofficial' b'seconds' b',' b'with' b'<unk>' b',' b'<unk>' b',' b'relative' b',' b'<unk>' b',' b'this' b'lifesize' b'attractive' b'patronage' b'in' b'November' b'<unk>' b'at'
    b'<unk>' b'.' b'<eos>' b'Before' b'1882' b',' b'kingdom' b'of' b'Pr\xc3\xa9val' b'rate' b'of' b'explicit' b'Avon' b'in' b'his' b'banks' b'was' b'<unk>' b',' b'but'
    b'it' b'was' b'most' b'than' b'or' b'pass' b'combined' b'.' b'It' b'was' b'also' b'denied' b'that' b'Echmarcach' b'after' b'some' b'of' b'his' b'new' b'role'
    b'can' b'be' b'slight' b'to' b'be' b'.' b'Eu2O3' b'and' b'often' b'failed' b'to' b'have' b'a' b'sense' b'of' b'sight' b'basically' b'density' b',' b'they'
    b'are' b'paranoid' b'for' b'them' b'.' b'There' b'will' b'be' b'proven' b'to' b'provide' b'two' b'<unk>' b'partially' b'guides' b'that' b'that' b'<unk>' b'travel' b'to'
    b'enemy' b'expansion' b'.' b'The' b'eyes' b'with' b'researchers' b'were' b'so' b'<unk>' b'that' b'frustrating' b'leaf' b'to' b'<unk>' b'are' b'.' b'They' b'who' b'rarely'
    b'<unk>' b'the' b'events' b'of' b'Ceres' b',' b'was' b'be' b'preventing' b',' b'even' b'of' b'glacial' b'when' b'fun' b'grow' b'of' b'Building' b'causes' b'.'
    b'characters' b'are' b'definitely' b'indistinguishable' b'as' b'of' b'mature' b'combat' b'.' b'Yamaha' b'was' b'often' b'moved' b'for' b'busy' b'imaging' b'technique' b',' b'while' b'when'
    b'they' b'are' b'made' b'even' b'as' b'"' b'Dhangar' b'"' b',' b'they' b'may' b'leave' b'open' b'them' b'.' b'<eos>' b'Power' b'was' b'marketed' b'as'
    b'a' b'censorship' b'of' b'certain' b'interest' b'or' b'the' b'chemicals' b'.' b'Almost' b'Anglo' b'@-@' b'six' b'@,@' b'conscientious' b'people' b'restore' b'a' b'heaven' b'between'
    b'Gaeltacht' b'crystallography' b',' b'Flowers' b',' b'and' b'either' b'<unk>' b'models' b',' b'be' b'limited' b'to' b'food' b'by' b'comma' b',' b'passionate' b',' b'victims'
    b'and' b'linebacker' b'cover' b',' b'that' b'can' b'fusing' b'Doyle' b',' b'which' b'are' b'still' b'only' b'lucky' b'while' b'tiger' b'F1' b',' b'and' b'Ceres'
    b',' b'above' b'longer' b'not' b'on' b'19' b'and' b'5' b'%' b'of' b'the' b'same' b'bird' b',' b'while' b'due' b'to' b'his' b'flightless' b'splits'
    b'on' b'later' b'or' b'with' b'the' b'discovery' b'of' b'other' b'areas' b'with' b'any' b'other' b',' b'they' b'just' b'lose' b'sawgrass' b'moves' b'.' b'A'
    b'kakapo' b'@-@' b'refer' b',' b'Sarnia' b'(' b'including' b'a' b'hydrophobic' b'shadow' b')' b'of' b'watery' b',' b'a' b'male' b'woman' b'of' b'is' b'@-@'
    b'sculpted' b',' b'can' b'the' b'surface' b',' b'Hemisphere' b'by' b'orange' b'outbursts' b',' b'and' b'indeed' b'pitted' b'them' b'to' b'build' b'his' b'tail' b','
    b'bearing' b'further' b',' b'taking' b'to' b'that' b',' b'19' b'or' b'platform' b'when' b'they' b'will' b'either' b'help' b'those' b'frequency' b'into' b'the' b'nest'
    b'.' b'Such' b'their' b'disruption' b'suggest' b'on' b'his' b'character' b'=' b'<eos>' b'Khandoba' b'then' b'loses' b'a' b'distinct' b'sixteenth' b'@-@' b'century' b'risk' b','
    b'and' b'suggests' b'so' b'that' b'they' b"'ve" b'<unk>' b'by' b'weapons' b'.' b'More' b'basic' b'small' b'starlings' b'dropped' b'keratin' b'good' b'panels' b',' b'such'
    b'as' b'Abdirashid' b'"' b'<unk>' b'"' b'asteroids' b',' b'a' b'Basilica' b'that' b'has' b'taken' b'a' b'better' b"'Shara" b'in' b'driving' b'and' b'remarkable' b'of'
    b'the' b'male' b',' b'remaining' b'in' b'a' b'range' b'of' b'welding' b'an' b'representative' b'to' b'marketing' b',' b'leaving' b'high' b',' b'or' b'light' b'.'
    b'This' b'may' b'be' b'broadcast' b'in' b'so' b'such' b'legal' b'<unk>' b'or' b'smaller' b'linear' b'starlings' b'.' b'According' b'to' b'these' b'187' b'it' b','
    b'<unk>' b',' b'<unk>' b',' b'\xe1\x83\xbb' b',' b'intimate' b',' b'and' b'sense' b'of' b'bright' b'instruments' b',' b',' b'enlarged' b'significant' b'treatments' b',' b'will'
    b'become' b'fresh' b'and' b'the' b'very' b'dangerous' b',' b'venomous' b'@-@' b'communal' b'or' b'pure' b'behaviour' b',' b'two' b'short' b'uniform' b'measures' b'.' b'This'
    b'effect' b'is' b'doing' b'good' b',' b'stamp' b'producers' b',' b'the' b'rules' b'of' b'Megan' b'watch' b',' b'which' b'may' b'translate' b'spawn' b'such' b'as'
    b'<unk>' b'on' b'Ireland' b',' b'which' b'may' b'leave' b'lasers' b',' b'the' b'bird' b'readily' b'mistook' b'directly' b',' b'different' b'aspects' b'of' b'monitoring' b'habit'
    b'.' b'Studies' b'are' b'seen' b'into' b'the' b'kakapo' b'(' b'elk' b')' b'.' b'The' b'kakapo' b'MacLeod' b'finds' b'the' b'parasites' b'they' b'occurs' b'at'
    b'one' b'time' b'of' b'their' b'many' b'times' b'and' b'breaking' b'his' b'star' b'.' b'<eos>' b'Iguanodon' b"'s" b'difficult' b'rate' b',' b'greatly' b'or' b'there'
    b'takes' b'local' b'note' b'when' b'a' b'eye' b'call' b',' b'even' b'legal' b'<unk>' b',' b'such' b'as' b'<unk>' b',' b'synthetic' b',' b'and' b'sheep'
    b'.' b'It' b'has' b'2' b'morphology' b',' b'they' b'call' b'another' b'way' b'to' b'be' b'probably' b'sufficiently' b'loved' b'to' b'be' b'another' b'first' b'whole'
    b'him' b'.' b'In' b'the' b'mid' b'@-@' b'fourth' b"'" b'nuclear' b'Ages' b',' b'such' b'as' b'purple' b'gani' b',' b'are' b'more' b'small' b'to'
    b'be' b'wells' b'release' b'with' b'all' b'proteins' b'for' b'his' b'CAT' b'.' b'If' b'any' b'human' b'legs' b'have' b'taken' b'itself' b',' b'it' b'is'
    b'his' b'common' b'workshop' b',' b'rather' b'of' b'which' b'are' b'subject' b'to' b'<unk>' b',' b'that' b'may' b'have' b'to' b'disappearance' b'.' b'Because' b'Uleki'
    b'compounds' b'were' b'consumed' b',' b'they' b'are' b'disturbing' b'causes' b',' b'but' b'sometimes' b'and' b'exclusively' b'to' b'undergo' b'classify' b'them' b'away' b'before' b'when'
    b'they' b',' b'their' b'high' b'and' b'111' b'hours' b'fur' b'probable' b'populations' b'of' b'feed' b'treated' b'.' b'sharing' b'with' b'typical' b'hours' b',' b'they'
    b'may' b'relocate' b'.' b'Although' b'they' b'are' b'the' b'truth' b'of' b'other' b'as' b'eliminate' b'that' b'they' b'are' b'completely' b'destroyed' b'.' b"'" b'Marlow'
    b'and' b'<unk>' b'de' b'male' b'use' b'was' b'totally' b'simple' b'.' b'The' b'helmet' b'family' b'authority' b'are' b'procured' b'and' b'must' b'be' b'intact' b'as'





.. GENERATED FROM PYTHON SOURCE LINES 191-196

It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:

.. GENERATED FROM PYTHON SOURCE LINES 196-241

.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into bsz parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the bsz batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].reshape(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)








.. GENERATED FROM PYTHON SOURCE LINES 242-251

4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values

.. GENERATED FROM PYTHON SOURCE LINES 251-259

.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): DynamicQuantizedLinear(in_features=256, out_features=33278, dtype=torch.qint8, qscheme=torch.per_tensor_affine)
    )




.. GENERATED FROM PYTHON SOURCE LINES 260-262

The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:

.. GENERATED FROM PYTHON SOURCE LINES 262-271

.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Size (MB): 113.944608
    Size (MB): 79.739034




.. GENERATED FROM PYTHON SOURCE LINES 272-276

Second, we see faster inference time, with no difference in evaluation loss:

Note: we set the number of threads to one for single threaded comparison, since quantized
models run single threaded.

.. GENERATED FROM PYTHON SOURCE LINES 276-288

.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 226.7
    loss: 5.168
    elapsed time (seconds): 125.4




.. GENERATED FROM PYTHON SOURCE LINES 289-300

Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 6 minutes  1.170 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
