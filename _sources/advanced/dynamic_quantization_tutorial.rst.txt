
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "advanced/dynamic_quantization_tutorial.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(beta) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we will apply the easiest form of quantization -
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.

.. GENERATED FROM PYTHON SOURCE LINES 22-32

.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F








.. GENERATED FROM PYTHON SOURCE LINES 33-39

1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.

.. GENERATED FROM PYTHON SOURCE LINES 39-73

.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))








.. GENERATED FROM PYTHON SOURCE LINES 74-82

2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.

.. GENERATED FROM PYTHON SOURCE LINES 82-132

.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')








.. GENERATED FROM PYTHON SOURCE LINES 133-141

3. Load the pre-trained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pre-trained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.

.. GENERATED FROM PYTHON SOURCE LINES 141-161

.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )




.. GENERATED FROM PYTHON SOURCE LINES 162-165

Now let's generate some text to ensure that the pre-trained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_

.. GENERATED FROM PYTHON SOURCE LINES 165-190

.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b'in' b'woodland' b'British' b',' b'keen' b'artistic' b'immigrants' b'introduced' b'trouble' b'.' b'<eos>' b'The' b'artwork' b'have' b'developed' b'the' b'species' b'throughout' b'much' b'week'
    b'@-@' b'winning' b'centers' b',' b'and' b'can' b'say' b'all' b'of' b'its' b'Jews' b'.' b'No' b'are' b'Second' b'Space' b'Boom' b'Forest' b"'" b'runs'
    b'in' b'118' b'African' b',' b'surpassing' b'shutters' b'how' b'they' b'were' b'a' b'career' b'beginning' b'.' b'They' b'called' b'it' b'a' b'apparent' b'teenager' b'when'
    b',' b'due' b'to' b'work' b'such' b'as' b'"' b'<unk>' b'"' b',' b'those' b'of' b'Turing' b'<unk>' b'Kaplan' b'in' b'1758' b'(' b'32' b'hands'
    b')' b'and' b'215' b'\xe3\x83\xbb' b'Wynter' b'in' b'1999' b'.' b'Y' b'complains' b'<unk>' b'Jordan' b"'s" b'naked' b'patches' b'for' b'Dylan' b'in' b'1992' b'.'
    b'The' b'Robert' b'commentaries' b'gave' b'a' b'two' b'mm' b'@-@' b'game' b'<unk>' b'Coaches' b'on' b'the' b'<unk>' b'magazine' b'that' b'migrated' b'to' b'the' b'Holy'
    b'Amateur' b'Templar' b'as' b'Davis' b'and' b'<unk>' b'on' b'Bologna' b'.' b'That' b'2010' b'arm' b'would' b'be' b'challenged' b'1' b'@.@' b'8' b'km' b'('
    b'2' b'@.@' b'0' b'to' b'2' b'@.@' b'8' b'mi' b')' b'long' b',' b'in' b'what' b'they' b'pursued' b'the' b'Romanesque' b'to' b'a' b'male'
    b',' b'formed' b'while' b'in' b'each' b'Gateway' b'of' b'common' b'eggs' b';' b'offers' b'in' b'<unk>' b',' b'Blue' b',' b'and' b'field' b',' b'in'
    b'11' b'.' b'<eos>' b'This' b'bird' b'depicts' b'no' b'20' b'@-@' b'season' b'150' b'miles' b'per' b'hour' b'to' b'giving' b'the' b'other' b'classes' b'.'
    b'Stanley' b'say' b'that' b'there' b'are' b'no' b'scenes' b'to' b'be' b'accepted' b'on' b'size' b',' b'from' b'Tripoli' b',' b'and' b'classes' b'Green' b'.'
    b'In' b'terms' b',' b'the' b'kakapo' b'may' b'be' b'<unk>' b'to' b'be' b'replaced' b'by' b'sublime' b'.' b'The' b'mouth' b'of' b'sub' b'@-@' b'thirds'
    b'has' b'a' b'878' b'@-@' b'pressure' b'1882' b'centre' b',' b'with' b'an' b'human' b'population' b'of' b'9' b'\xe2\x80\x93' b'3' b'\xe2\x80\x93' b'18' b'(' b'02'
    b'@.@' b'2' b'MeV' b')' b'at' b'a' b'area' b'of' b'60' b'feet' b'(' b'8' b'ft' b')' b'high' b'.' b'The' b'mean' b'at' b'a'
    b'large' b'angle' b'of' b'95' b'passengers' b'are' b'and' b'4' b'@.@' b'8' b'miles' b'in' b'diameter' b'in' b'1961' b',' b'and' b'6' b'%' b'of'
    b'the' b'population' b"'s" b'base' b'with' b'a' b'moment' b'at' b'attaining' b'15' b'kilometers' b'(' b'transits' b')' b',' b'of' b'whom' b'the' b'worst' b'temperature'
    b'Mycena' b'Fantuzzi' b'their' b'only' b'known' b'at' b'16' b'@.@' b'2' b'metres' b'(' b'6' b'@.@' b'0' b'oz' b')' b'of' b'filmmaking' b'.' b'It'
    b'is' b'now' b'long' b'as' b'much' b'as' b'<unk>' b',' b'but' b'in' b'no' b'other' b'areas' b',' b'it' b'may' b'be' b'linked' b'to' b'average'
    b'@-@' b'on' b'@-@' b'18' b'hands' b'more' b'than' b'10' b'at' b'capitals' b'.' b'Boise' b'!' b'has' b'nine' b'yellow' b'species' b'throughout' b'this' b'country'
    b',' b'and' b'is' b'sometimes' b'considered' b'smaller' b'Vega' b'.' b'Sometimes' b',' b'its' b'male' b"'s" b'burned' b'order' b'and' b'equally' b'natural' b'Mantellisaurus' b','
    b'along' b'with' b'various' b'exotic' b'calls' b'<unk>' b'after' b'so' b'under' b'slain' b'an' b'steady' b'diameter' b'Brandywine' b',' b'weigh' b'or' b'particularly' b'moving' b'for'
    b'trees' b'.' b'This' b'pattern' b'of' b'small' b'male' b'activity' b'directors' b'may' b'be' b'found' b'due' b'to' b'results' b'as' b'other' b'as' b'12' b'in'
    b'an' b'bid' b'at' b'one' b'@-@' b'time' b'in' b'Athletics' b'.' b'In' b'<unk>' b',' b'most' b'of' b'their' b'breeding' b'web' b'variation' b'is' b'a'
    b'harsh' b'kakapo' b'.' b'Therefore' b',' b'large' b'@-@' b'feeding' b'generators' b'in' b'Africa' b'may' b'be' b'allowed' b'into' b'floods' b'.' b'There' b'are' b'no'
    b'eggs' b'that' b'can' b'be' b'taken' b'in' b'they' b'would' b'leave' b'505' b'females' b',' b'except' b'each' b'too' b'and' b'smaller' b',' b'low' b'reinforcements'
    b'.' b'The' b'<unk>' b'while' b'milking' b'after' b'down' b'it' b'young' b',' b'although' b'when' b'potentially' b'or' b'they' b'faces' b',' b'they' b'inhabit' b'pigments'
    b'when' b'they' b'are' b'infinite' b'to' b'file' b'.' b'Another' b'gust' b'will' b'be' b'a' b'crest' b'cannot' b'eat' b'common' b'starlings' b'.' b'They' b'may'
    b'be' b'caught' b'in' b'the' b'same' b'when' b':' b'<unk>' b'<unk>' b'at' b'Philadelphia' b',' b'hours' b',' b'and' b'often' b'temperate' b'in' b'some' b'or'
    b'most' b'other' b'megaliths' b',' b'small' b'membrane' b'@-@' b'614' b'spiral' b'cell' b',' b'having' b'that' b'Sari' b'females' b',' b'warning' b'instruments' b',' b'gleba'
    b',' b'Gopal' b'particles' b',' b'and' b'<unk>' b'recycled' b'.' b'<unk>' b'data' b',' b'usually' b'manuscripts' b',' b'are' b'very' b'able' b'toward' b'humans' b'from'
    b'Stalin' b'.' b'Names' b'by' b'bouts' b'of' b'another' b'house' b',' b'trees' b'is' b'circular' b',' b'with' b'varying' b'radiation' b'housing' b',' b'have' b'originally'
    b'pointed' b'a' b'invention' b'of' b'her' b'<unk>' b'chap' b'.' b'When' b'a' b'fewer' b'disadvantages' b'placed' b'on' b'the' b'ground' b'will' b'works' b'from' b'other'
    b'or' b'together' b'activity' b',' b'1880' b',' b'the' b'kakapo' b'is' b'hypothesized' b'.' b'There' b"'s" b'measures' b'exaggerated' b'due' b'to' b'wind' b'dwarfs' b','
    b'the' b'kakapo' b'has' b'since' b'lived' b'up' b'the' b'beach' b'of' b'revolutionary' b'ball' b'.' b'The' b'feathers' b'are' b'written' b'by' b'less' b'deep' b','
    b'high' b'or' b'<unk>' b',' b'tied' b'speak' b'within' b'duller' b'or' b'infiltrates' b'from' b'curved' b'.' b'When' b'the' b'nests' b'of' b'bird' b'or' b'the'
    b'black' b',' b'food' b'emitted' b'back' b'despite' b'the' b'kakapo' b'.' b'Such' b',' b'or' b'larger' b'literally' b'partial' b'white' b',' b'then' b'latitude' b'may'
    b'be' b'one' b'of' b'its' b'own' b'revisions' b'in' b'the' b'head' b'are' b'the' b'reliable' b'and' b'<unk>' b'@-@' b'back' b'range' b'based' b'at' b'once'
    b'calls' b'to' b'nest' b',' b'WMSC' b',' b'such' b'as' b'"' b'turning' b'"' b'.' b'And' b'they' b'are' b'heavily' b'made' b'as' b'weeks' b'comprehend'
    b',' b'they' b'are' b'capable' b'of' b'satire' b'.' b'predation' b'be' b'yet' b'held' b'by' b'lead' b'receptors' b'and' b'level' b'by' b'pursuers' b'.' b'This'
    b'is' b'supported' b'by' b'Drinkwater' b'(' b'gum' b')' b',' b'especially' b"'u'll\xc3\xa1h" b'and' b'discreetly' b'bearing' b'females' b'was' b'together' b'where' b'nest' b'events' b'made'
    b'.' b'<eos>' b'<eos>' b'=' b'=' b'Taxonomy' b'=' b'=' b'<eos>' b'<eos>' b'The' b'starling' b'was' b'good' b'argues' b'by' b'the' b'destitute' b'that' b'"'
    b'You' b'see' b',' b'"' b'is' b'accomplished' b'as' b'they' b'have' b'used' b'urgent' b'activities' b',' b'involving' b'database' b',' b'and' b'have' b'its' b'edible'
    b'body' b':' b"'" b'The' b'spore' b'resolve' b'(' b'capital' b';' b'"' b'<unk>' b'"' b')' b',' b'"' b'dubium' b'and' b'Shoop' b'<unk>' b'"'
    b',' b'reflecting' b'extravagant' b'rains' b'including' b'brittle' b'juice' b',' b'often' b'required' b'kakapo' b'that' b'was' b'.' b'<eos>' b'Following' b'the' b'first' b'asteroid' b'known'
    b'known' b'to' b'be' b'adapted' b';' b'they' b'were' b'more' b'traditional' b'in' b'which' b'1949' b',' b'more' b'than' b'four' b'nm' b'are' b'present' b'.'
    b'motorway' b'vulgaris' b'the' b'reviewer' b',' b'Waiting' b'for' b'a' b'person' b'projects' b',' b'eternal' b'for' b'his' b'national' b'<unk>' b'as' b'air' b'as' b'they'
    b'included' b'a' b'zero' b'rumor' b'that' b'serve' b'as' b'logs' b',' b'entertain' b'many' b'of' b'their' b'sexually' b'pure' b'buildings' b',' b'ranging' b'to' b'more'
    b'confidence' b',' b'which' b'do' b'not' b'be' b'killed' b'.' b'Peshkin' b'sang' b'a' b'article' b'in' b'case' b'and' b'Penh' b'to' b'<unk>' b'trees' b','
    b'reaches' b'from' b'double' b',' b'and' b'a' b'female' b',' b'often' b'said' b',' b'"' b'That' b'is' b'somebody' b'to' b'kill' b'our' b'happen' b','
    b'still' b'that' b'model' b'from' b'<eos>' b'...' b'it' b"'s" b'precise' b',' b'it' b'starts' b'this' b'black' b'night' b',' b'This' b'in' b'turn' b'hard'





.. GENERATED FROM PYTHON SOURCE LINES 191-196

It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:

.. GENERATED FROM PYTHON SOURCE LINES 196-241

.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into bsz parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the bsz batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].reshape(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)








.. GENERATED FROM PYTHON SOURCE LINES 242-251

4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values

.. GENERATED FROM PYTHON SOURCE LINES 251-259

.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): DynamicQuantizedLinear(in_features=256, out_features=33278, dtype=torch.qint8, qscheme=torch.per_tensor_affine)
    )




.. GENERATED FROM PYTHON SOURCE LINES 260-262

The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:

.. GENERATED FROM PYTHON SOURCE LINES 262-271

.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Size (MB): 113.944608
    Size (MB): 79.739034




.. GENERATED FROM PYTHON SOURCE LINES 272-276

Second, we see faster inference time, with no difference in evaluation loss:

Note: we set the number of threads to one for single threaded comparison, since quantized
models run single threaded.

.. GENERATED FROM PYTHON SOURCE LINES 276-288

.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 207.9
    loss: 5.168
    elapsed time (seconds): 112.1




.. GENERATED FROM PYTHON SOURCE LINES 289-300

Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 5 minutes  28.841 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
