
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "advanced/dynamic_quantization_tutorial.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(beta) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we will apply the easiest form of quantization -
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.

.. GENERATED FROM PYTHON SOURCE LINES 22-32

.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F








.. GENERATED FROM PYTHON SOURCE LINES 33-39

1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.

.. GENERATED FROM PYTHON SOURCE LINES 39-73

.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))








.. GENERATED FROM PYTHON SOURCE LINES 74-82

2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.

.. GENERATED FROM PYTHON SOURCE LINES 82-132

.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')








.. GENERATED FROM PYTHON SOURCE LINES 133-141

3. Load the pre-trained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pre-trained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.

.. GENERATED FROM PYTHON SOURCE LINES 141-161

.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )




.. GENERATED FROM PYTHON SOURCE LINES 162-165

Now let's generate some text to ensure that the pre-trained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_

.. GENERATED FROM PYTHON SOURCE LINES 165-190

.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b',' b'mostly' b'wrote' b'to' b'available' b'until' b'the' b'mid' b'@-@' b'coup' b'<unk>' b'<unk>' b'and' b'the' b'vicar' b'of' b'Aberdeen' b'.' b'The' b'Regional'
    b'Telegraph' b'(' b'4th' b'1235' b'called' b'"' b'The' b'Heir' b'Day' b'"' b')' b'are' b'organized' b'by' b'a' b'spare' b'drivers' b'with' b'the' b'supreme'
    b'Halliwell' b'Financial' b'Aircraft' b'searching' b'.' b'Some' b'people' b'include' b'suitable' b',' b'suspension' b',' b'<unk>' b',' b'k' b',' b'<unk>' b',' b'<unk>' b','
    b'2000' b',' b'responsible' b',' b'<unk>' b',' b'gill' b'.' b'It' b'is' b'guilty' b'of' b'his' b'ability' b'to' b'find' b'.' b'It' b'resulted' b'to'
    b'a' b'very' b'important' b'blade' b',' b'where' b'they' b'cite' b'or' b'even' b'far' b'Moravia' b'another' b'eye' b',' b'but' b'there' b'are' b'275' b'evidence'
    b'that' b'have' b'told' b'informal' b'energy' b'enemies' b'to' b'honour' b'.' b'In' b'Robert' b'S.' b'Ellie' b',' b'a' b'Ulaid' b'@-@' b'stemmed' b'from' b'The'
    b'area' b'drifts' b'to' b'assess' b'the' b'legs' b'\xe2\x80\x99' b's' b'right' b'of' b'its' b'food' b'.' b'Some' b'of' b'these' b'zoos' b'have' b'been' b'eaten'
    b'by' b'being' b'burned' b'slowly' b'to' b'settle' b'on' b'the' b'Irish' b'armed' b'race' b'.' b'According' b'to' b'a' b'further' b'endless' b'reception' b',' b'which'
    b'subsequently' b'colonised' b'mixtures' b'under' b'<unk>' b'flattening' b'in' b'his' b'incorporation' b'of' b'all' b'on' b'1842' b',' b'sometimes' b'play' b'.' b'The' b'correlation' b'between'
    b'Ceres' b'where' b'would' b'have' b'been' b'and' b'burn' b',' b'as' b'Wilfrid' b'(' b'threatened' b'into' b'<unk>' b'caused' b'by' b'some' b'were' b'sufficient' b')'
    b'.' b'The' b'<unk>' b'consists' b'of' b'further' b'martyr' b'supported' b'under' b'the' b'Latin' b'(' b'equivalent' b'to' b'stoats' b'from' b'Old' b'Lucia' b')' b';'
    b'perhaps' b'of' b'the' b'Lesson' b',' b'it' b'could' b'be' b'destructive' b'by' b'78' b'or' b'black' b':' b'52' b'.' b'arises' b',' b'with' b'some'
    b'he' b',' b'Phineas' b'and' b'Margaret' b'Bird' b'is' b'required' b'to' b'be' b'distinguished' b'thigh' b'.' b'<unk>' b',' b'they' b'were' b'followed' b'by' b'importins'
    b'.' b'<unk>' b'to' b'decline' b'that' b'would' b'be' b'relating' b'as' b'this' b'introduction' b'will' b'be' b'used' b',' b'when' b'they' b'can' b'disrupt' b'it'
    b',' b'any' b'of' b'which' b'might' b'be' b'assembled' b'so' b'that' b'this' b'can' b'be' b'settled' b'.' b'When' b'eventually' b',' b'they' b'are' b'stored'
    b'as' b'they' b'are' b'much' b'different' b',' b'many' b'or' b'become' b'some' b'common' b'distinct' b',' b'confident' b'characteristics' b'or' b'<unk>' b',' b'<unk>' b'@-@'
    b'exempt' b'intervention' b'and' b'beneath' b'predators' b'on' b'a' b'variety' b'of' b'killing' b'or' b'non' b'@-@' b'enzyme' b'<unk>' b'that' b'their' b'<unk>' b'of' b'the'
    b'kakapo' b'.' b'A' b'reality' b'itself' b'is' b'typically' b'involved' b'in' b'the' b'dipped' b'European' b'<unk>' b',' b'having' b'fallen' b'more' b'than' b'1' b'@.@'
    b'5' b'\xc2\xb5m' b'(' b'their' b'mine' b'Cenozoic' b',' b'killed' b'from' b'concolor' b'or' b'then' b')' b',' b'and' b'only' b'dragging' b',' b'<unk>' b'itself'
    b',' b'and' b'grey' b',' b'four' b'shooting' b'(' b'34' b'ft' b')' b'and' b'11' b'cm' b'(' b'8' b'@.@' b'2' b'm' b')' b';'
    b'this' b'will' b'be' b'effective' b'.' b'The' b'best' b'eggs' b',' b'sea' b'or' b'Dor' b'is' b'<unk>' b',' b'and' b'their' b'male' b',' b'prey'
    b'or' b'relative' b',' b'the' b'bird' b'which' b'superstition' b'him' b'for' b'greater' b'Crash' b'of' b'mating' b'.' b'gill' b'M.' b'M.' b'triangle' b'is' b'developed'
    b'in' b'<unk>' b'(' b'sometimes' b'the' b'most' b'Cell' b'stones' b')' b';' b'the' b'parasites' b'seated' b'so' b'before' b'it' b'was' b'exists' b'to' b'die'
    b'things' b',' b'while' b'in' b'particular' b'the' b'kakapo' b'greatly' b'species' b'it' b'presents' b'its' b'"' b'chance' b'to' b'edible' b'people' b'before' b'low' b'in'
    b'his' b'existence' b',' b'and' b'it' b'is' b'more' b'unlikely' b'so' b'to' b'do' b'of' b'white' b'"' b'.' b'Because' b'it' b'suffered' b'German' b'patch'
    b',' b'some' b'works' b'Kawartha' b'women' b'larvae' b'are' b'their' b'glossy' b'friendly' b'or' b'common' b'areas' b'to' b'be' b'well' b'stores' b'were' b'formed' b'.'
    b'According' b'to' b'Anonymus' b',' b'parasites' b'may' b'ensure' b'that' b'they' b'are' b'calculated' b'to' b'satisfy' b'their' b'sins' b'.' b'The' b'larger' b'diagnosis' b'of'
    b'artificial' b'masses' b'as' b'to' b'occasional' b'desire' b'with' b'the' b'bird' b'before' b'certain' b'servicemen' b'are' b'heavily' b'hanging' b'.' b'<eos>' b'As' b'they' b'give'
    b'eggs' b',' b'their' b'efforts' b'regarding' b'first' b'such' b'staff' b'are' b'one' b'of' b'any' b'truck' b'.' b'They' b'albeit' b'Naughty' b'feeding' b',' b'they'
    b'lived' b'the' b'bird' b'.' b'As' b'they' b'might' b'juveniles' b',' b'they' b'were' b'completely' b'heard' b';' b'their' b'potential' b'ranges' b'with' b'other' b'transmitted'
    b'birds' b',' b'these' b'female' b',' b'forestry' b'or' b'420' b'as' b'it' b'does' b'not' b'be' b'possible' b'.' b'<unk>' b'differs' b'to' b'Israelites' b'as'
    b'he' b'may' b'be' b'easily' b'only' b'isolated' b'without' b'weather' b',' b'showing' b'them' b'to' b'fall' b'place' b',' b'being' b'because' b'necessary' b'astronaut' b'S.'
    b'Charles' b'to' b'have' b'lost' b'regulate' b'it' b'and' b'disassembly' b'of' b'the' b'bird' b'.' b'If' b'these' b'courtship' b'chicks' b'is' b'founded' b',' b'they'
    b'may' b'be' b'identified' b'together' b'with' b'his' b'eggs' b',' b'and' b'may' b'often' b'come' b'to' b'take' b'power' b'shock' b'.' b'They' b'who' b'can'
    b'begin' b'quickly' b'driver' b'Willis' b'in' b'beforehand' b',' b'as' b'they' b'move' b'more' b'thin' b'arc' b',' b'as' b'they' b'be' b'often' b'as' b'thus'
    b'poor' b'when' b'they' b'wouldn' b"'t" b'seem' b'to' b'privacy' b'.' b'This' b'will' b'hear' b'greater' b'birds' b'and' b'serving' b'.' b'Common' b'starlings' b'sulfides'
    b'smell' b'in' b'metallicity' b'.' b'<eos>' b'In' b'the' b'nucleolus' b',' b'lays' b',' b'aggressively' b'or' b'<unk>' b',' b'can' b'be' b'released' b',' b'when'
    b'their' b'nest' b'is' b'fewer' b'years' b'after' b'it' b'is' b'incessantly' b'.' b'As' b'Asian' b'birds' b'of' b'females' b'are' b'connected' b',' b'information' b'may'
    b'remain' b'them' b'out' b'a' b'specific' b'Penarth' b'.' b'<unk>' b'varies' b'up' b'from' b'regions' b'as' b'they' b'siding' b'as' b'food' b',' b'so' b'often'
    b'as' b'happen' b'moisture' b'at' b'a' b'point' b';' b'each' b',' b'they' b'are' b'dangerous' b'.' b'However' b',' b'the' b'lamin' b'scales' b'mined' b'or'
    b'damaged' b'basalt' b'charges' b'that' b'spread' b'.' b'Furthermore' b',' b'instead' b'are' b'also' b'involved' b'between' b'size' b'.' b'<eos>' b'<eos>' b'=' b'=' b'='
    b'Fourth' b'description' b'=' b'=' b'=' b'<eos>' b'<eos>' b'Before' b'New' b'Zealand' b',' b'where' b'shoreline' b'is' b'not' b'formed' b'.' b'<unk>' b'@-@' b'shaped'
    b'two' b'common' b'nucleus' b'blue' b'prognosis' b',' b'notably' b'with' b'much' b'guitar' b',' b'they' b'were' b'required' b'to' b'be' b'able' b'to' b'take' b'personal'
    b',' b'and' b'it' b'reveal' b'no' b'a' b'unique' b'instruction' b'or' b'feed' b'across' b'<unk>' b'.' b'The' b'corresponding' b'experiment' b'with' b'male' b'birds' b','
    b'particularly' b'male' b'clusters' b',' b'suffering' b'typically' b'following' b'birds' b'they' b'occur' b'.' b'replication' b'full' b'fewer' b'post' b'bones' b'electrical' b'scales' b'for' b'one'
    b'year' b'.' b'They' b'appear' b'signatures' b'with' b'totally' b',' b'though' b'at' b'a' b'nomen' b'condition' b'complex' b'increases' b'.' b'However' b',' b'they' b'have'
    b'led' b'Stanley' b'in' b'<unk>' b'425' b',' b'clear' b'habitats' b'such' b'as' b'<unk>' b',' b'or' b'also' b'produce' b'flight' b'underneath' b'him' b'.' b'In'
    b'general' b',' b'amino' b'miner' b'diet' b'may' b'be' b'seriously' b'dataDyne' b'.' b'Common' b'starlings' b'may' b'have' b'different' b'starling' b',' b'indifferent' b'\xe2\x80\x9c' b'birds'
    b'divisional' b',' b'and' b'forth' b'rods' b'to' b'cope' b'.' b'<unk>' b'claim' b'they' b'are' b'useful' b'.' b'He' b'may' b'start' b'Hod' b'eucalypts' b','
    b'form' b'Lisbon' b',' b'Archangel' b',' b'<unk>' b',' b'<unk>' b',' b'<unk>' b',' b'resorted' b'and' b'<unk>' b',' b'they' b'know' b'without' b'there' b'are'





.. GENERATED FROM PYTHON SOURCE LINES 191-196

It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:

.. GENERATED FROM PYTHON SOURCE LINES 196-241

.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into bsz parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the bsz batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].reshape(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)








.. GENERATED FROM PYTHON SOURCE LINES 242-251

4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values

.. GENERATED FROM PYTHON SOURCE LINES 251-259

.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): DynamicQuantizedLinear(in_features=256, out_features=33278, dtype=torch.qint8, qscheme=torch.per_tensor_affine)
    )




.. GENERATED FROM PYTHON SOURCE LINES 260-262

The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:

.. GENERATED FROM PYTHON SOURCE LINES 262-271

.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Size (MB): 113.944608
    Size (MB): 79.739034




.. GENERATED FROM PYTHON SOURCE LINES 272-276

Second, we see faster inference time, with no difference in evaluation loss:

Note: we set the number of threads to one for single threaded comparison, since quantized
models run single threaded.

.. GENERATED FROM PYTHON SOURCE LINES 276-288

.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 225.5
    loss: 5.168
    elapsed time (seconds): 127.0




.. GENERATED FROM PYTHON SOURCE LINES 289-300

Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 6 minutes  1.683 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
