
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "advanced/dynamic_quantization_tutorial.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(beta) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we will apply the easiest form of quantization -
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.

.. GENERATED FROM PYTHON SOURCE LINES 22-32

.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F








.. GENERATED FROM PYTHON SOURCE LINES 33-39

1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.

.. GENERATED FROM PYTHON SOURCE LINES 39-73

.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))








.. GENERATED FROM PYTHON SOURCE LINES 74-82

2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.

.. GENERATED FROM PYTHON SOURCE LINES 82-132

.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')








.. GENERATED FROM PYTHON SOURCE LINES 133-141

3. Load the pre-trained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pre-trained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.

.. GENERATED FROM PYTHON SOURCE LINES 141-161

.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )




.. GENERATED FROM PYTHON SOURCE LINES 162-165

Now let's generate some text to ensure that the pre-trained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_

.. GENERATED FROM PYTHON SOURCE LINES 165-190

.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b',' b'but' b'retaliatory' b'men' b'grew' b'.' b'precious' b'support' b'in' b'the' b'Great' b'Party' b'extended' b'the' b'Sclerodermatineae' b'.' b'He' b'now' b'participated' b'on'
    b'Peters' b"'s" b'2009' b'game' b'Jeremy' b'<unk>' b'<unk>' b'through' b'owned' b'of' b'Governor' b'Boom' b'Bang' b'!' b'before' b'being' b'named' b'by' b'Loire' b'<unk>'
    b'and' b'Mary' b'the' b'names' b',' b'but' b'there' b'mechanism' b'was' b'returned' b'to' b'the' b'planet' b'spotted' b'children' b'in' b'PTC' b'.' b'In' b'1922'
    b',' b'Numbers' b'in' b'the' b'Ganganelli' b'would' b'show' b'the' b'sport' b'English' b',' b'moving' b'from' b'advertisement' b',' b'many' b'of' b'whom' b'are' b'<unk>'
    b'.' b'The' b'average' b'military' b'distribution' b'included' b'IFTA' b'.' b'<eos>' b'A' b'planet' b'following' b'John' b'Leguat' b',' b'through' b'a' b'fixed' b'Plate' b'man'
    b'and' b'married' b'members' b'of' b'the' b'<unk>' b';' b'as' b'to' b'have' b'a' b'notable' b'planet' b'on' b'view' b'of' b'the' b'type' b'to' b'not'
    b'select' b'a' b'gap' b'with' b'Leader' b'Thomas' b'Morrow' b'(' b'Ren\xc3\xa9' b'Kinzer' b')' b',' b'"' b'Always' b'clans' b',' b'and' b'Minnesota' b'<unk>' b'About'
    b'-' b'the' b'reservoir' b'barrier' b'to' b'age' b'@-@' b'notched' b'.' b'The' b'amount' b'of' b'examination' b'"' b'drew' b'on' b'to' b'have' b'to' b'be'
    b'one' b'of' b'the' b'supernatural' b'<unk>' b'raw' b'burdensome' b',' b'which' b'Schulz' b'until' b'100' b'years' b',' b'before' b'which' b'her' b'game' b'Levine' b'('
    b'including' b'#' b'York' b'to' b'selects' b'his' b'falling' b'and' b'later' b'magnitude' b')' b',' b'it' b'was' b'no' b'greater' b';' b'waiting' b'out' b'he'
    b'starts' b'for' b'5' b'years' b'.' b'World' b'War' b'I' b'found' b'to' b'run' b'orders' b'and' b'Sherborne' b'.' b'At' b'so' b'party' b'diet' b'were'
    b'thought' b'to' b'have' b'to' b'deploy' b'sailing' b'their' b'creation' b',' b'with' b'entity' b'during' b'what' b'had' b'holds' b'additional' b'items' b'to' b'be' b'pressured'
    b'to' b'destroy' b'it' b'to' b'him' b'.' b'In' b'addition' b',' b'all' b'teams' b',' b'including' b'fabrication' b',' b'adopted' b'ongoing' b'@-@' b'fundamentalists' b'.'
    b'<unk>' b'was' b'ironic' b'by' b'the' b'police' b'to' b'raise' b'children' b'for' b'PVC' b',' b'the' b'forest' b'in' b'<unk>' b',' b'a' b'much' b'recent'
    b'event' b'.' b'These' b'multipurpose' b'problems' b'may' b'be' b'being' b'developed' b'.' b'<eos>' b'The' b'first' b'overview' b'of' b'mortal' b'characters' b'will' b'be' b'distinguished'
    b'.' b'<unk>' b'<unk>' b'.' b'<eos>' b'The' b'Tree' b'category' b'calls' b'his' b'social' b'sex' b'and' b'<unk>' b',' b'usually' b'associated' b'over' b'discerning' b'Kobe'
    b'lines' b'.' b'Other' b'of' b'its' b'herds' b'will' b'be' b'perfectly' b'of' b'high' b',' b'and' b'by' b'particular' b',' b'they' b'do' b'one' b'reality'
    b'every' b'player' b'.' b'<eos>' b'Later' b',' b'there' b'are' b'several' b'against' b'these' b'other' b'factors' b':' b'<eos>' b'express' b'an' b'body' b',' b'"'
    b'that' b'when' b'm' b',' b'because' b'encoded' b'Boon' b'exists' b'by' b',' b'and' b"'s" b'a' b'a' b'laugh' b',' b'was' b'caught' b'in' b'this'
    b'fiction' b',' b'U2' b'stood' b'on' b'how' b'the' b'other' b'birds' b'rear' b'together' b'at' b'famous' b'.' b'"' b'When' b'it' b'was' b'at' b'this'
    b'time' b',' b'the' b'combination' b'have' b'been' b'believed' b'to' b'have' b'allowed' b'a' b'dozen' b'dispute' b'in' b'increased' b'twist' b'of' b'any' b'other' b'hero'
    b',' b'Zartan' b',' b'for' b'example' b'and' b'a' b'Fruit' b'kids' b'and' b'social' b'pests' b'and' b'guilty' b',' b'with' b'roller' b'Paper' b'leading' b'to'
    b'.' b'According' b'to' b'boat' b',' b'twelfth' b'items' b',' b'and' b'<unk>' b',' b'<unk>' b',' b'birds' b'from' b'data' b',' b'can' b'be' b'kept'
    b'in' b'old' b'lek' b'purposes' b'for' b'<unk>' b'BC' b'.' b'At' b'night' b',' b'they' b'were' b'absent' b';' b'rocks' b'already' b'cater' b'in' b'hypothetical'
    b'large' b',' b'and' b'it' b'is' b'based' b'at' b'a' b'encounter' b'in' b'1647' b'.' b'There' b'are' b'rays' b'that' b'Mexico' b'may' b'probably' b'nil'
    b'seemingly' b'bind' b'or' b'be' b'their' b'hidden' b'poetry' b'measure' b'after' b'off' b'all' b'down' b'or' b'gather' b'to' b'raise' b'away' b'.' b'<eos>' b'Some'
    b'Gaelic' b'combination' b'of' b'Ceres' b'heavier' b'young' b'or' b'birds' b'have' b'in' b'black' b'possessions' b':' b'Tawny' b'kerb' b'officials' b'is' b'known' b'as' b'Chardonnay'
    b',' b'and' b'the' b'entire' b'center' b'to' b'reduce' b'raided' b'knot' b'species' b'if' b'Grand' b'acid' b'antelope' b'opportunities' b'forward' b'.' b'Taff' b'rule' b'reporting'
    b'and' b'the' b'older' b'narrow' b'difficulty' b'of' b'orbit' b'fruits' b'through' b'the' b'United' b'States' b'through' b'Bart' b'Asian' b'feature' b',' b'from' b'about' b'30'
    b'students' b'without' b'a' b'proton' b'.' b'That' b'hatch' b'to' b'study' b'these' b'severe' b'strips' b',' b'the' b'kakapo' b'rises' b'with' b'green' b'fire' b'data'
    b'and' b'means' b'that' b'thereafter' b'shown' b'them' b',' b'they' b'occurred' b'since' b'one' b'two' b'years' b'to' b'send' b'to' b'expand' b'Steffy' b'when' b'they'
    b'might' b'be' b'Accrington' b'.' b'The' b'muster' b'increase' b'is' b'all' b'effectively' b'longer' b'disperse' b'by' b'anatomical' b'progression' b',' b'and' b'in' b'particular' b'the'
    b'female' b'gas' b'used' b'targeted' b'by' b'no' b'due' b'shapes' b'to' b'its' b'beak' b'.' b'These' b'reception' b'can' b'be' b'only' b'only' b'careful' b'.'
    b'Since' b'being' b'searching' b'only' b'they' b'were' b'understood' b'abandoning' b'them' b'.' b'egg' b'may' b'be' b'more' b'unidentified' b'than' b'India' b',' b'when' b'only'
    b'that' b'more' b'believes' b'about' b'them' b'freely' b'.' b'They' b'keep' b'up' b'their' b'number' b'of' b'birds' b'and' b'extract' b'mediate' b',' b'and' b'is'
    b',' b'and' b'it' b'is' b'both' b'fully' b'<unk>' b'.' b'The' b'female' b'populations' b'are' b'the' b'non' b'@-@' b'35th' b'brighter' b'dominant' b'developed' b'of'
    b'common' b'disassembly' b';' b'they' b'will' b'have' b'trailing' b'very' b'greater' b'housing' b'from' b'the' b'59' b'.' b'Kim' b'<unk>' b'operates' b':' b'two' b'breeding'
    b'toes' b'begin' b'each' b'old' b'to' b'remain' b',' b'with' b'some' b'spots' b'.' b'jackets' b'do' b'not' b'walk' b'the' b'belly' b',' b'which' b'were'
    b'later' b'short' b'according' b'to' b'their' b'male' b'shoulders' b'.' b'By' b'the' b'Yamu' b',' b'they' b'do' b'not' b'join' b'from' b'another' b'numbers' b'because'
    b'they' b'believed' b'to' b'indicate' b'.' b'Owing' b'that' b'it' b'is' b'a' b'apparent' b'--' b'to' b'disturbances' b'as' b'the' b'miracle' b'permit' b'of' b'Alexandra'
    b'or' b'reform' b',' b'appears' b'away' b'according' b'to' b'Cajal' b'atmosphere' b'.' b'discarded' b'displays' b'have' b'no' b'physical' b'indications' b'so' b'of' b'smaller' b'food'
    b'such' b'as' b'deficiencies' b',' b'flightless' b'plants' b'and' b'<unk>' b'approaches' b'.' b'The' b'Rose' b'is' b'often' b'reddish' b',' b'whose' b'Gardnerian' b'malls' b'is'
    b'respect' b'to' b'high' b',' b'scramble' b',' b'neighbours' b'Dahlan' b'and' b'<unk>' b'.' b'As' b'they' b'increased' b'equip' b'in' b'the' b'first' b'known' b'film'
    b',' b'clothing' b'becomes' b'only' b'5' b'\xe2\x80\x93' b'28' b'years' b'old' b'.' b'The' b'or' b'wings' b'change' b',' b'reaching' b'Virginia' b'Bay' b',' b'greenish'
    b'.' b'<eos>' b'<eos>' b'=' b'=' b'=' b'P.' b'Wives' b'=' b'=' b'=' b'<eos>' b'<eos>' b'Because' b'of' b'its' b'sexual' b'interest' b',' b'little'
    b'triangular' b'are' b'close' b'to' b'their' b'cameras' b'.' b'When' b'they' b'have' b'a' b'significant' b'bird' b'of' b'forbs' b',' b'the' b'word' b'god' b'is'
    b'forced' b'to' b'enter' b'speaking' b'this' b'planet' b'.' b'Dax' b'Savoy' b'thought' b',' b'"' b'single' b'can' b'be' b'<unk>' b'you' b'best' b'were' b','
    b'unknown' b',' b'a' b'calls' b'elements' b'of' b'these' b',' b'they' b'East' b'people' b'is' b'feel' b'.' b'"' b'planting' b'after' b'a' b'variety' b'of'
    b'half' b'tip' b',' b'tap' b',' b'or' b'930' b',' b'they' b'may' b'have' b'been' b'reported' b'as' b'they' b'may' b'both' b'You' b'around' b'28'
    b'%' b'of' b'06' b'.' b'cellular' b'females' b'are' b'native' b',' b'with' b'kitsunetsuki' b',' b'or' b'any' b',' b'possibly' b'fast' b'should' b'be' b'invertebrate'





.. GENERATED FROM PYTHON SOURCE LINES 191-196

It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:

.. GENERATED FROM PYTHON SOURCE LINES 196-241

.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into bsz parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the bsz batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].reshape(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)








.. GENERATED FROM PYTHON SOURCE LINES 242-251

4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values

.. GENERATED FROM PYTHON SOURCE LINES 251-259

.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): DynamicQuantizedLinear(in_features=256, out_features=33278, dtype=torch.qint8, qscheme=torch.per_tensor_affine)
    )




.. GENERATED FROM PYTHON SOURCE LINES 260-262

The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:

.. GENERATED FROM PYTHON SOURCE LINES 262-271

.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Size (MB): 113.944608
    Size (MB): 79.739034




.. GENERATED FROM PYTHON SOURCE LINES 272-276

Second, we see faster inference time, with no difference in evaluation loss:

Note: we set the number of threads to one for single threaded comparison, since quantized
models run single threaded.

.. GENERATED FROM PYTHON SOURCE LINES 276-288

.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 206.6
    loss: 5.168
    elapsed time (seconds): 109.3




.. GENERATED FROM PYTHON SOURCE LINES 289-300

Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 5 minutes  24.478 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
