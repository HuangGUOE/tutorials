
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "advanced/dynamic_quantization_tutorial.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(beta) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we will apply the easiest form of quantization -
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.

.. GENERATED FROM PYTHON SOURCE LINES 22-32

.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F








.. GENERATED FROM PYTHON SOURCE LINES 33-39

1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.

.. GENERATED FROM PYTHON SOURCE LINES 39-73

.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))








.. GENERATED FROM PYTHON SOURCE LINES 74-82

2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.

.. GENERATED FROM PYTHON SOURCE LINES 82-132

.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')








.. GENERATED FROM PYTHON SOURCE LINES 133-141

3. Load the pre-trained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pre-trained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.

.. GENERATED FROM PYTHON SOURCE LINES 141-161

.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )




.. GENERATED FROM PYTHON SOURCE LINES 162-165

Now let's generate some text to ensure that the pre-trained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_

.. GENERATED FROM PYTHON SOURCE LINES 165-190

.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b'from' b'stage' b'to' b'.' b'When' b'<unk>' b'the' b'folds' b'after' b'the' b'same' b'process' b'was' b'initially' b'used' b'with' b'the' b'<unk>' b'Tech' b'inscribed'
    b'for' b'Guthrie' b',' b'facing' b'thousands' b'of' b'Activision' b"'s" b'accounts' b'as' b'it' b'was' b'known' b'as' b'from' b'Earth' b'"' b'correct' b'sources' b'and'
    b'deeply' b'<unk>' b'with' b'awry' b'"' b'.' b'The' b'Iranian' b'was' b'issued' b'also' b'as' b'the' b'"' b'special' b'"' b"'s" b'.' b'Observations' b'that'
    b'troubled' b'a' b'duel' b'with' b'Yukon' b',' b'as' b'they' b'have' b'Stream' b'so' b'to' b'survive' b'an' b'beautiful' b'planet' b'in' b'mostly' b'one' b'of'
    b'the' b'original' b'language' b',' b'Campbeltown' b'embarkation' b'it' b'for' b'Ganganelli' b'and' b'"' b'a' b'language' b'/' b'<unk>' b'challenge' b'<unk>' b'or' b'Pakistan' b','
    b'I' b'give' b'capped' b'a' b'<unk>' b',' b'"' b'and' b'suited' b'to' b'publicly' b';' b'his' b'claim' b'was' b'issued' b'by' b'starring' b'<unk>' b'her'
    b'through' b'Latham' b'considered' b'packaging' b'since' b'apples' b'.' b'He' b'president' b'King' b'Susan' b'Jack' b',' b'crew' b'due' b'to' b'these' b'absolute' b'types' b','
    b'alluvium' b',' b'and' b'<unk>' b',' b'a' b'Swiss' b'line' b'that' b'covered' b'its' b'influence' b'for' b'Bridge' b'hotel' b'as' b'a' b'respected' b'planet' b'partitioned'
    b'individuals' b'became' b'assumptions' b'for' b'by' b'Trujillo' b"'s" b'existence' b'.' b'As' b'such' b',' b'there' b'is' b'rise' b'that' b'saptibha\xe1\xb9\x85g\xc4\xab' b'out' b'of' b'Child'
    b'are' b'a' b'large' b'native' b'sale' b'of' b'Elaine' b'painters' b'in' b'the' b'paintings' b',' b'that' b'they' b'are' b'Pescara' b'.' b'lip' b'@-@' b'plants'
    b'who' b'do' b'like' b'do' b'not' b'die' b'and' b'make' b'them' b'to' b'Brook' b',' b'or' b'associated' b'themselves' b',' b'one' b'finite' b'<unk>' b'or'
    b'think' b'that' b'they' b'do' b'not' b'Limerick' b'up' b'.' b'O' b'Boom' b'Power' b'(' b'<unk>' b')' b'dated' b'<eos>' b'starling' b',' b'however' b','
    b'natural' b'Carriage' b'textures' b';' b'and' b'in' b'1976' b',' b'also' b'won' b'only' b'a' b'elaborate' b'bowls' b'than' b'cells' b'.' b'Kass' b'pointed' b'announce'
    b'northern' b'caliber' b'disciples' b'and' b'the' b'older' b'Allegheny' b'weary' b'<unk>' b',' b'"' b'the' b'two' b'spots' b'"' b',' b'which' b'were' b'considered' b'to'
    b'rely' b'on' b'"' b'Mr.' b'Wica' b'of' b'Police' b'"' b'as' b'falling' b'in' b'1801' b'and' b'she' b'is' b'dominant' b'to' b'make' b'by' b'direct'
    b'evidence' b'.' b'Historical' b'pillars' b'falling' b'economically' b',' b'but' b'are' b'somewhat' b'known' b'to' b'be' b'delivered' b'outside' b'.' b'The' b'interior' b'set' b'on'
    b'a' b'theme' b'at' b'home' b'but' b'a' b'more' b'beautiful' b'sequence' b'of' b'U\xc3\xad' b'@-@' b'F\xc3\xa9lix' b'dying' b',' b'perhaps' b'a' b'fertile' b',' b'which'
    b'is' b'distinguished' b'by' b'a' b'ibis' b'that' b'could' b'be' b'looking' b'to' b'build' b'its' b'evidence' b'.' b'An' b'less' b'or' b'dark' b'Gordon' b'who'
    b'enters' b'of' b'negotiations' b'to' b'affinity' b'and' b'or' b'appear' b'to' b'become' b'supplemented' b'and' b'left' b'by' b'that' b'causes' b'a' b'male' b'Catholicism' b'of'
    b'hockey' b';' b'and' b'be' b'stated' b'to' b'be' b'chosen' b'to' b'have' b'inhabited' b'director' b'.' b'Instead' b',' b'reluctant' b'who' b'acknowledged' b'IR8' b'and'
    b'remind' b'elements' b'of' b'relative' b'habits' b'.' b'At' b'his' b'1932' b'home' b'shift' b'into' b'the' b'series' b'that' b'they' b'are' b'release' b'to' b'admit'
    b'a' b'cold' b'invention' b'where' b'they' b'were' b'also' b'made' b'Compounds' b'.' b'Using' b'such' b'free' b'pleasure' b',' b'Individuals' b',' b'<unk>' b',' b'and'
    b'movies' b',' b'tire' b'above' b'a' b'female' b'conversation' b'and' b'suit' b',' b'a' b'fox' b'takes' b'place' b'.' b'This' b'Veerashaiva' b'responses' b'occurred' b'elaborate'
    b'times' b'of' b'falls' b'.' b'The' b'most' b'successful' b'examples' b'is' b'eaten' b'by' b'a' b'Insular' b'pair' b'of' b'rRNA' b'because' b'it' b'is' b'most'
    b'plentiful' b'and' b'replaced' b'when' b'pecking' b',' b'and' b'slightly' b'governors' b'sunlight' b',' b'this' b'male' b'takes' b'business' b'Maids' b'for' b'bishop' b'vocals' b','
    b'most' b'results' b'to' b'women' b"'s" b'DNA' b'(' b'<unk>' b')' b'and' b'RanGTP' b'.' b'In' b'common' b'areas' b',' b'uniform' b',' b'ego' b'-'
    b'and' b'backlash' b',' b'can' b'not' b'participate' b'so' b'in' b'his' b'propositions' b'.' b'<unk>' b'may' b'be' b'sent' b'to' b'change' b'.' b'Only' b'birds'
    b',' b'as' b'long' b'king' b',' b'or' b'may' b'be' b'easy' b'.' b'It' b'is' b'always' b'said' b'to' b'have' b'been' b'no' b'variety' b','
    b'as' b'head' b'may' b'form' b'the' b'eighteenth' b'diameter' b'without' b'other' b'of' b'them' b'.' b'There' b'are' b'more' b'smaller' b'stages' b'of' b'Chicago' b','
    b'compared' b'to' b'proximity' b'to' b'New' b'Zealand' b',' b'although' b'his' b'habit' b'can' b'be' b'Viet' b'or' b'seven' b'birds' b'and' b'decrease' b'.' b'When'
    b'it' b'is' b'printed' b"'s" b'expense' b',' b'there' b'are' b'no' b'cardiac' b'component' b',' b'rather' b'than' b'20' b'years' b'.' b'Flocks' b'are' b'worse'
    b',' b'with' b'each' b'other' b'hand' b'and' b'females' b'with' b'binding' b'an' b'staircase' b'.' b'For' b'example' b',' b'how' b'the' b'same' b'delightful' b'moon'
    b'is' b'saying' b'to' b'be' b'found' b',' b'they' b'turn' b'.' b'They' b'who' b'know' b'that' b'there' b'are' b'also' b'72' b'hours' b'of' b'holds'
    b'as' b'good' b'when' b'they' b'results' b'up' b':' b'had' b'Feodosiya' b'or' b'prevent' b'some' b'feathers' b'<unk>' b';' b'<unk>' b',' b'there' b'has' b'no'
    b'dress' b'or' b'singles' b'while' b'she' b'only' b'was' b'different' b'when' b'some' b'survived' b'it' b'.' b'In' b'July' b'promised' b'a' b'element' b'of' b'birds'
    b'only' b'be' b'forced' b'Pandu' b'with' b'violence' b',' b'but' b'left' b'the' b'last' b'latter' b'Ze' b'.' b'If' b'<unk>' b'from' b'food' b'will' b'be'
    b'placed' b'older' b'on' b'B.' b'contrast' b',' b'they' b'do' b'remain' b'values' b',' b'they' b'version' b'of' b'dead' b'thoughts' b';' b'they' b'do' b'a'
    b'bit' b'downtown' b'of' b'surge' b'.' b'These' b'indicated' b'whether' b'females' b'exist' b'into' b'<unk>' b'in' b'noise' b',' b'so' b'it' b'is' b'usually' b'unfounded'
    b'.' b'They' b'may' b'begin' b'by' b'relatively' b'the' b'nuclear' b'Hemisphere' b'groups' b'say' b'that' b'they' b'conduct' b'screaming' b':' b'membranes' b',' b'bride' b'<unk>'
    b'.' b'B\xc3\xa9dard' b'are' b'obvious' b'to' b'chiefly' b'heavier' b'shrubs' b'on' b'his' b'<unk>' b'.' b'Sify' b'is' b'a' b'discernible' b'and' b'not' b'undercover' b'as'
    b'he' b'tries' b'a' b'governess' b'.' b'Harris' b',' b'seeing' b'by' b'tough' b'hydride' b',' b'have' b'great' b'comedies' b',' b'moist' b'or' b'conventional' b'gravel'
    b'@-@' b'hand' b'art' b',' b'dance' b'to' b'feed' b'off' b'.' b'respawn' b'may' b'have' b'decline' b',' b'but' b'unleashed' b'their' b'own' b'NBC' b'.'
    b'Across' b'its' b'jewelry' b',' b'despite' b'an' b'short' b'solicitor' b',' b'it' b'methods' b'when' b'a' b'male' b'mount' b'may' b'be' b'able' b'to' b'help'
    b'bread' b'.' b'Although' b'this' b'desired' b'hand' b'may' b'break' b'the' b'longest' b'eggs' b'stop' b'.' b'"' b'<eos>' b'The' b'island' b'of' b'Conservation' b'('
    b'harder' b'having' b'unharmed' b'with' b'the' b'aspects' b'of' b'Pig' b"'" b'children' b')' b'is' b'inclusive' b'that' b'assumption' b'were' b'with' b'<unk>' b',' b'head'
    b'owl' b'.' b'Trypanosoma' b'(' b'also' b'special' b',' b'piston' b')' b'environments' b'between' b'a' b'period' b'of' b'methods' b',' b'information' b',' b'or' b'grazing'
    b'(' b'green' b',' b'shy' b')' b',' b'resembles' b'and' b'providing' b'a' b'very' b'unusual' b'strike' b'model' b'.' b'A' b'female' b'astronomer' b',' b'believed'
    b'it' b'may' b'be' b'different' b',' b'otherwise' b'Errol' b'Yeoh' b',' b'treat' b'two' b'more' b'<unk>' b':' b'(' b'<unk>' b'or' b'Catholic' b'm' b')'
    b'requires' b'his' b'dirty' b'cross' b'of' b'the' b'presence' b'of' b'"' b'Halina' b'eggs' b'"' b',' b'which' b'may' b'find' b'Barbarian' b'of' b'head' b'.'
    b'O' b'Zachary' b'bernissartensis' b'are' b'often' b'separated' b'by' b'C.' b'M.' b'S.' b'Breaking' b'.' b'<unk>' b'gastrointestinal' b'twisted' b'in' b'the' b'face' b'of' b'water'





.. GENERATED FROM PYTHON SOURCE LINES 191-196

It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:

.. GENERATED FROM PYTHON SOURCE LINES 196-241

.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into bsz parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the bsz batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].reshape(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)








.. GENERATED FROM PYTHON SOURCE LINES 242-251

4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values

.. GENERATED FROM PYTHON SOURCE LINES 251-259

.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): DynamicQuantizedLinear(in_features=256, out_features=33278, dtype=torch.qint8, qscheme=torch.per_tensor_affine)
    )




.. GENERATED FROM PYTHON SOURCE LINES 260-262

The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:

.. GENERATED FROM PYTHON SOURCE LINES 262-271

.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Size (MB): 113.944608
    Size (MB): 79.739034




.. GENERATED FROM PYTHON SOURCE LINES 272-276

Second, we see faster inference time, with no difference in evaluation loss:

Note: we set the number of threads to one for single threaded comparison, since quantized
models run single threaded.

.. GENERATED FROM PYTHON SOURCE LINES 276-288

.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 209.6
    loss: 5.168
    elapsed time (seconds): 111.3




.. GENERATED FROM PYTHON SOURCE LINES 289-300

Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 5 minutes  29.559 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
