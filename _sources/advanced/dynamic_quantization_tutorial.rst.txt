
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "advanced/dynamic_quantization_tutorial.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(beta) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we will apply the easiest form of quantization -
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.

.. GENERATED FROM PYTHON SOURCE LINES 22-32

.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F








.. GENERATED FROM PYTHON SOURCE LINES 33-39

1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.

.. GENERATED FROM PYTHON SOURCE LINES 39-73

.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))








.. GENERATED FROM PYTHON SOURCE LINES 74-82

2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.

.. GENERATED FROM PYTHON SOURCE LINES 82-132

.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')








.. GENERATED FROM PYTHON SOURCE LINES 133-141

3. Load the pre-trained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pre-trained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.

.. GENERATED FROM PYTHON SOURCE LINES 141-161

.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )




.. GENERATED FROM PYTHON SOURCE LINES 162-165

Now let's generate some text to ensure that the pre-trained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_

.. GENERATED FROM PYTHON SOURCE LINES 165-190

.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b'THX' b'@-@' b'courts' b',' b'some' b'available' b',' b'actions' b',' b'have' b'at' b'least' b'turning' b'subtly' b'<unk>' b',' b'but' b'two' b'more' b'modern'
    b'is' b'taken' b'to' b'be' b'collected' b'slowly' b'.' b'The' b'breeding' b'images' b'focuses' b'in' b'Indonesian' b',' b'and' b'shape' b'leaves' b'some' b'kinds' b'of'
    b'legs' b'.' b'radiation' b'is' b'only' b'estimated' b'to' b'be' b'gone' b'for' b'water' b'.' b'A' b'artificial' b'jet' b'portrait' b'by' b'both' b'automobile' b'sludge'
    b',' b'it' b'is' b'also' b'damaged' b'by' b'undirected' b'planet' b'by' b'extensive' b'or' b'tree' b',' b'by' b'that' b'day' b'by' b'Nataraja' b'in' b'New'
    b'Zealand' b'.' b'The' b'text' b'makes' b'a' b'weak' b'asteroid' b'estate' b'should' b'be' b'transformed' b'through' b'that' b'network' b'.' b'Rough' b'is' b'immediately' b'damaged'
    b'.' b'This' b'Coldrum' b'All\xc4\x81h' b'hoped' b'Northern' b'@-@' b'century' b'aisle' b',' b'but' b'then' b'inspired' b'older' b'species' b',' b'as' b'he' b'is' b'very'
    b'close' b'to' b'limitation' b',' b'Vladimir' b'anticipate' b'the' b'body' b'of' b'making' b'\xe2\x80\x93' b'his' b'pads' b',' b'so' b'bright' b'records' b'make' b'be' b'more'
    b'cautious' b'.' b'There' b'have' b'included' b'a' b'great' b'range' b'of' b'experts' b'.' b'According' b'to' b'Petrus' b'Frost' b',' b'loss' b'by' b'the' b'structural'
    b'gesture' b'of' b'Rules' b'(' b'<unk>' b')' b'has' b'estimated' b'og' b'trees' b'to' b'Parish' b'(' b'590' b'%' b'frames' b')' b'and' b'had' b'histories'
    b'of' b'being' b'reduced' b'from' b'kakapo' b'.' b'Most' b'commonly' b'ancient' b'starlings' b'ruins' b'nomina' b'Perrin' b',' b'which' b'is' b'distributed' b'to' b'ensure' b'that'
    b'they' b'may' b'never' b'up' b'between' b'among' b'several' b'individuals' b'.' b'At' b'the' b'other' b'hand' b'of' b'an' b'series' b'of' b'high' b'civilizations' b','
    b'Shizong' b'comes' b'to' b'<unk>' b',' b'almost' b'to' b'being' b'concerning' b'to' b'look' b'.' b'It' b'is' b'referred' b'to' b'as' b'"' b'"' b'Connors'
    b'"' b'is' b'the' b'<unk>' b'of' b'<unk>' b'<eos>' b'The' b'proposed' b'ingredients' b'of' b'a' b'fishing' b'date' b'has' b'not' b'suggest' b'during' b'period' b'and'
    b'recognition' b',' b'and' b'the' b'entire' b'inclination' b'that' b'they' b'sing' b'it' b'remarkably' b',' b'so' b'hypothesized' b'heterosexual' b'fare' b'is' b'valued' b'in' b'space'
    b'.' b'The' b'bird' b'existed' b'in' b'decisions' b'for' b'Occasionally' b'(' b'approximately' b'175' b',' b'or' b'tensions' b'six' b'letters' b'in' b'developmental' b'food' b','
    b'which' b'methods' b')' b',' b'sensory' b'analyses' b'and' b'relative' b'feathers' b'from' b'runoff' b'authority' b'.' b'One' b'these' b'eggs' b'is' b'their' b'inhabitant' b';'
    b'they' b'serve' b'completely' b'may' b'seem' b'to' b'determine' b'ignore' b'northern' b'needed' b'.' b'Since' b'they' b'are' b',' b'rather' b'white' b',' b'they' b'can'
    b'be' b'more' b'fluid' b'.' b'livestock' b',' b'often' b'Mexico' b',' b'occur' b'within' b'a' b'lignotuberous' b'or' b'FLT3' b"'s" b'cell' b'and' b'<unk>' b'to'
    b'each' b'other' b'or' b'the' b'male' b'.' b'Between' b'93' b'minutes' b'of' b'five' b'of' b'five' b'days' b'at' b'tough' b'minerals' b'being' b'off' b'on'
    b'systematic' b',' b'each' b'of' b'a' b'territory' b'after' b'a' b'male' b'bird' b'or' b'flash' b'symbolized' b'require' b'flowers' b'.' b'<eos>' b'In' b'Paris' b','
    b'they' b'enter' b'and' b'look' b'to' b'nominal' b'societies' b';' b'<unk>' b'<unk>' b'Sacks' b'have' b'received' b'minor' b'bodies' b'plans' b',' b'afforded' b'homes' b','
    b'or' b'albeit' b'Astarte' b'accurate' b'to' b'other' b'sections' b'of' b'Ceres' b'.' b'In' b'around' b'new' b'times' b',' b'the' b'kakapo' b'can' b'be' b'named'
    b'by' b'this' b'spectral' b'@-@' b'fledged' b'low' b',' b'rather' b'than' b'a' b'family' b'.' b'It' b'also' b'stays' b'into' b'tons' b'since' b'the' b'facial'
    b'main' b'days' b'of' b'survivor' b',' b'but' b'westward' b'to' b'move' b'a' b'central' b'habitat' b',' b'so' b'prey' b'called' b'spacing' b',' b'bomb' b'waste'
    b',' b'users' b'to' b'talk' b'almost' b'<unk>' b'.' b'Any' b'plants' b'from' b'spacing' b'in' b'Solar' b'(' b'1859' b')' b'is' b'devastating' b'a' b'star'
    b'female' b'in' b'Everton' b',' b'and' b'unable' b'to' b'develop' b'these' b'different' b'branches' b'1600' b'.' b'<eos>' b'The' b'female' b'follows' b'the' b'spores' b'in'
    b'publication' b'and' b'his' b'<unk>' b'scraps' b'.' b'This' b'method' b'of' b'consolidation' b'guaranteed' b'down' b'to' b'a' b'oxidation' b'bird' b'at' b'a' b'inclined' b'of'
    b'brownish' b'<unk>' b'player' b'or' b'black' b'.' b'<eos>' b'In' b'the' b'same' b'product' b'in' b'England' b',' b'where' b'it' b'<unk>' b',' b'athletes' b'continues'
    b'involving' b'robust' b'or' b'occasionally' b'Rafa' b',' b'rather' b'than' b'just' b'strive' b'.' b'It' b'is' b'not' b'taking' b'detonation' b'without' b'representations' b'of' b'prey'
    b'.' b'<eos>' b'Kakapo' b'therapy' b'areas' b'are' b'have' b'a' b'declaration' b'of' b'signal' b',' b'which' b'greater' b'attendant' b',' b'fluorescence' b'to' b'gloves' b','
    b'or' b'capture' b'another' b'troopship' b'male' b',' b'they' b'may' b'be' b'distinct' b',' b'by' b'one' b'side' b'of' b'birds' b'.' b'In' b'addition' b','
    b'arena' b'neared' b'risk' b'of' b'credible' b'body' b'Wicca' b'after' b'spider' b'off' b'and' b'a' b'random' b'take' b'possibly' b'in' b'India' b'.' b'They' b'toward'
    b'egg' b'even' b'discuss' b'psychological' b'eggs' b'with' b'bleeding' b',' b'so' b'they' b'resemble' b'red' b'taxon' b',' b'usually' b'when' b'they' b'can' b'be' b'able'
    b'to' b'indicate' b'see' b'men' b',' b'following' b'their' b'other' b'fat' b'eye' b'figures' b'.' b'In' b'1834' b',' b'common' b'starlings' b'tend' b'to' b'hatch'
    b'a' b'indenture' b',' b'seeking' b'by' b'humans' b'leading' b'into' b'black' b'displays' b'used' b'across' b'the' b'nestlings' b'by' b'security' b'or' b'<unk>' b'efforts' b'on'
    b'25' b'Kampong' b'licensing' b',' b'ranging' b'before' b'one' b'motherboard' b'.' b'As' b'told' b'control' b'they' b'must' b'feed' b'on' b'a' b'planet' b',' b'they'
    b'hides' b'when' b'they' b'were' b'not' b'.' b'People' b'external' b'her' b'biographer' b'<unk>' b"'s" b'"' b'passionate' b'and' b'<unk>' b'"' b'such' b'as' b'Fern\xc3\xa1ndez'
    b'roots' b',' b'taking' b'bringing' b'up' b'themes' b',' b'can' b'pattern' b'by' b'Yorkshire' b',' b'and' b'the' b'zinc' b'@-@' b'classification' b'\xc4\x81' b'access' b'to'
    b'p' b',' b'New' b'Zealand' b'.' b'There' b'are' b'Thi' b'of' b'any' b'of' b'eight' b'different' b'types' b'of' b'vertices' b'.' b'The' b'kakapo' b'of'
    b'Ceres' b'is' b'locally' b'.' b'More' b'same' b'900' b'%' b'excess' b'riding' b'that' b'they' b'given' b'to' b'doctrine' b'in' b'160' b'other' b'blood' b'droppings'
    b'(' b'which' b'caused' b'no' b'<unk>' b'@-@' b'tract' b'Sb' b')' b',' b'therapy' b'or' b'non' b'@-@' b'bottomed' b'.' b'<eos>' b'116' b'birds' b'of'
    b'kakapo' b'have' b'three' b'only' b'recorded' b'females' b'.' b'The' b'kakapo' b'has' b'uterus' b'for' b'roughly' b'mostly' b'eight' b'years' b',' b'only' b'obsolete' b'away'
    b',' b'even' b'as' b'<unk>' b'as' b'an' b'common' b'layer' b'of' b'5' b'\xe2\x80\x93' b'20' b'.' b'Further' b'involve' b'when' b'they' b'just' b'extend' b'because'
    b'their' b'MK' b'(' b'notably' b'while' b'tip' b')' b'.' b'The' b'act' b'migrate' b'to' b'adult' b'electron' b'Evil' b',' b'very' b'long' b'.' b'However'
    b',' b'with' b'233' b',' b'exception' b'<unk>' b'male' b'is' b'largely' b'small' b'up' b'directly' b'.' b'In' b'both' b'1977' b',' b'it' b'is' b'also'
    b'red' b'.' b'At' b'the' b'other' b',' b'males' b')' b'also' b'<unk>' b'weddings' b',' b'and' b'in' b'then' b',' b'they' b'was' b'submerged' b'.'
    b'They' b'visitors' b'would' b'actively' b'require' b'their' b'longer' b'light' b'when' b'they' b'know' b'.' b'This' b'behaviour' b'or' b'vice' b'predators' b'believed' b'that' b'reducing'
    b'persons' b'make' b'bird' b'names' b'by' b'external' b'body' b'software' b'.' b'They' b'usually' b'consistently' b'act' b'towards' b'nickel' b'smell' b',' b'but' b'not' b'though'
    b'this' b'as' b'an' b'unique' b'eye' b'than' b'an' b'bird' b'can' b'convey' b'difficult' b'.' b'<eos>' b'There' b'are' b'23' b'\xe2\x80\x93' b'14' b'\xce\xbcm' b'and'
    b'electric' b'scales' b'form' b'birds' b'when' b'their' b'flocks' b'do' b'not' b'be' b'simply' b'rankled' b'to' b'<unk>' b'.' b'With' b'contrast' b',' b'it' b'makes'





.. GENERATED FROM PYTHON SOURCE LINES 191-196

It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:

.. GENERATED FROM PYTHON SOURCE LINES 196-241

.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into bsz parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the bsz batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].reshape(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)








.. GENERATED FROM PYTHON SOURCE LINES 242-251

4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values

.. GENERATED FROM PYTHON SOURCE LINES 251-259

.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): DynamicQuantizedLinear(in_features=256, out_features=33278, dtype=torch.qint8, qscheme=torch.per_tensor_affine)
    )




.. GENERATED FROM PYTHON SOURCE LINES 260-262

The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:

.. GENERATED FROM PYTHON SOURCE LINES 262-271

.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Size (MB): 113.944608
    Size (MB): 79.739034




.. GENERATED FROM PYTHON SOURCE LINES 272-276

Second, we see faster inference time, with no difference in evaluation loss:

Note: we set the number of threads to one for single threaded comparison, since quantized
models run single threaded.

.. GENERATED FROM PYTHON SOURCE LINES 276-288

.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 194.0
    loss: 5.168
    elapsed time (seconds): 108.0




.. GENERATED FROM PYTHON SOURCE LINES 289-300

Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 5 minutes  10.178 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
