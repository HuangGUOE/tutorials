
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "advanced/dynamic_quantization_tutorial.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(beta) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we will apply the easiest form of quantization -
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.

.. GENERATED FROM PYTHON SOURCE LINES 22-32

.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F








.. GENERATED FROM PYTHON SOURCE LINES 33-39

1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.

.. GENERATED FROM PYTHON SOURCE LINES 39-73

.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))








.. GENERATED FROM PYTHON SOURCE LINES 74-82

2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.

.. GENERATED FROM PYTHON SOURCE LINES 82-132

.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')








.. GENERATED FROM PYTHON SOURCE LINES 133-141

3. Load the pre-trained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pre-trained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.

.. GENERATED FROM PYTHON SOURCE LINES 141-161

.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )




.. GENERATED FROM PYTHON SOURCE LINES 162-165

Now let's generate some text to ensure that the pre-trained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_

.. GENERATED FROM PYTHON SOURCE LINES 165-190

.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b'.' b'<eos>' b'0600' b'errors' b'in' b'leaves' b'masterpieces' b'\xe2\x80\x93' b'a' b'Herons' b'such' b'as' b'"' b'A' b'radio' b'@-@' b'Europos' b'"' b',' b'Joe'
    b'101' b',' b'written' b'for' b'the' b'zombies' b'all' b'fee' b'of' b'directors' b'.' b'The' b'"' b'short' b'culture' b'"' b'is' b'also' b'decorated' b'in'
    b'the' b'Spring' b'best' b',' b'while' b'it' b'is' b'on' b'several' b'large' b',' b'is' b'shown' b'to' b'be' b'any' b'moult' b'there' b'are' b'a'
    b'very' b'"' b'unique' b'dual' b'form' b'and' b'that' b'them' b'close' b'of' b'because' b'it' b'is' b'among' b'promoting' b'it' b'probably' b'taking' b'...' b'claire'
    b'with' b'it' b',' b'but' b'I' b'think' b'it' b'the' b'right' b'alone' b'"' b'.' b'The' b'same' b'one' b'@-@' b'time' b'dreary' b'species' b'on'
    b'a' b'warning' b'deck' b',' b'an' b'degree' b'showing' b'a' b'3' b'@.@' b'5' b'environment' b',' b'with' b'four' b'associated' b'broomstick' b'each' b'at' b'females'
    b'.' b'After' b'a' b'bird' b',' b'approximately' b'25' b'%' b'of' b'the' b'population' b'occurs' b'in' b'a' b'channel' b',' b'notably' b'only' b'only' b'far'
    b'too' b'60' b':' b'one' b'@-@' b'length' b'hot' b'pictures' b'.' b'Each' b'first' b'of' b'large' b'pressed' b'females' b'Company' b',' b'who' b'arrive' b'supported'
    b'five' b'or' b'eight' b'bird' b'<unk>' b'to' b'accompany' b'a' b'female' b'nighttime' b'change' b'.' b'<unk>' b'chicks' b'have' b'been' b'high' b',' b'dubbed' b'one'
    b'over' b'her' b'striking' b'as' b'Rebbie' b'can' b'her' b'face' b'.' b'These' b'rather' b'late' b'Holmes' b'begins' b'to' b'be' b'NOK' b'so' b'avoided' b'or'
    b'once' b'instead' b'of' b'themselves' b'and' b'killed' b'very' b'distinguished' b'prey' b'.' b'inhibiting' b'females' b'are' b'almost' b'IBC' b'on' b'them' b',' b'and' b'were'
    b'some' b'soft' b',' b'such' b'as' b'intact' b'repetition' b'of' b'the' b'flash' b'.' b'<eos>' b'<eos>' b'=' b'=' b'tripadi' b'=' b'=' b'<eos>' b'<eos>'
    b'The' b'population' b'of' b'the' b'orbit' b'of' b'Ceres' b'are' b'an' b'special' b'reference' b'for' b'vi' b'.' b'Other' b'examples' b'of' b'over' b'10' b'cm'
    b'(' b'2' b'ft' b')' b'high' b'coin' b'may' b'be' b'before' b'once' b'rigid' b'.' b'Males' b'are' b'present' b',' b'can' b'the' b'eye' b','
    b'and' b'some' b'eggs' b'were' b'creatures' b'.' b'Banksia' b'De' b'All\xc4\x81h' b'the' b'unlikely' b'mushroom' b'as' b'<unk>' b'salts' b'between' b'their' b'observations' b'and' b'<unk>'
    b',' b'then' b'soon' b'under' b'the' b'own' b',' b'planets' b'of' b'Fledglings' b'that' b'they' b'were' b'swallowed' b'at' b'a' b'predator' b'.' b'Their' b'rocky'
    b'acts' b'include' b'these' b'<unk>' b',' b'often' b'on' b'a' b'reduction' b'so' b'strongly' b'needed' b'to' b'protect' b'multiple' b'.' b'Several' b'distinct' b'names' b'and'
    b'may' b'be' b'intruders' b',' b'so' b'when' b'they' b'call' b'it' b'is' b'related' b'to' b'its' b'space' b'.' b'However' b',' b'as' b'any' b','
    b'close' b'to' b'long' b'females' b'(' b'called' b'"' b'so' b'more' b'1070' b')' b'"' b',' b'were' b'introduced' b';' b'however' b',' b'it' b'will'
    b'control' b'are' b'found' b',' b'referring' b'to' b'them' b'he' b'<unk>' b'like' b'some' b'of' b'his' b'other' b'works' b'.' b'He' b'gently' b'sings' b'that'
    b'"' b'he' b'intended' b'call' b'to' b'<unk>' b'"' b',' b'noting' b'it' b'should' b'prove' b',' b'or' b'many' b'out' b'day' b'in' b'adults' b'.'
    b'Despite' b'some' b'more' b'than' b'2' b'@.@' b'8' b'%' b',' b'agricultural' b'occurs' b'long' b',' b'alive' b'is' b'Programmes' b'@-@' b'green' b',' b'4'
    b'@-@' b'frequency' b'.' b'Once' b'expelled' b'at' b'a' b'two' b'@-@' b'conflict' b'<unk>' b'sense' b',' b'they' b'may' b'certainly' b'be' b'consumed' b'between' b'prey'
    b'\xe2\x80\x93' b'taking' b'24' b'%' b'on' b'encompassing' b'food' b'and' b'expecting' b'.' b'Furthermore' b',' b'it' b'has' b'13' b'possibilities' b'that' b'can' b'be' b'distinguished'
    b'.' b'Some' b'karate' b'frequently' b'become' b'also' b'additions' b'in' b'mice' b'.' b'East' b'parasites' b'occurs' b'or' b'occurs' b'to' b'Molotovsk' b',' b'simply' b'internationally'
    b'suggested' b'where' b'they' b'always' b'inflicted' b'angle' b'.' b'It' b'may' b'be' b'introduced' b'to' b'have' b'evolved' b'almost' b'shells' b'.' b'Their' b'Fayette' b'dress'
    b'may' b'be' b'rendered' b'guilty' b'of' b'Rahardjo' b'.' b'A' b'kakapo' b'is' b'about' b'touch' b'fox' b'orders' b'Regulations' b'.' b'The' b'eternal' b'wings' b'can'
    b'be' b'distinguished' b'for' b'triangulation' b'at' b'the' b'east' b'makes' b'by' b'<unk>' b',' b'leaving' b'somewhat' b'one' b'of' b'a' b'time' b'hours' b',' b'and'
    b'often' b'largely' b'annually' b'.' b'A' b'rate' b'of' b'<unk>' b'molecules' b',' b'emptied' b'it' b'is' b'rarely' b'underlying' b'.' b'Through' b'they' b'feed' b'and'
    b'kelvin' b',' b'some' b'proteins' b',' b'often' b'about' b'firmly' b'if' b'DAGs' b'is' b'obvious' b'.' b'This' b'organ' b'is' b'Leptoceratopsidae' b',' b'depending' b'from'
    b'Alta' b'.' b'Muldaur' b'indicate' b',' b'"' b'they' b'needs' b'on' b',' b'they' b'find' b'them' b'into' b'their' b'abdomen' b'to' b'Mumbai' b'.' b'At'
    b'a' b'very' b'nests' b',' b'when' b'finds' b'a' b'remnant' b'undivided' b'"' b'.' b'This' b'behaviour' b'may' b'be' b'more' b'small' b'than' b'their' b'<unk>'
    b'or' b'yellow' b'field' b',' b'or' b'symbols' b'it' b'one' b'from' b'<unk>' b',' b'originated' b'to' b'a' b'ring' b'DAG' b',' b'and' b'worshipped' b'by'
    b'the' b'two' b'<unk>' b'happens' b',' b'emperor' b'der' b'Eliot' b'.' b'The' b'booms' b'occur' b'the' b'head' b'"' b'Saw' b'"' b'spectral' b'out' b'revived'
    b'by' b'predators' b'across' b'Sleaford' b',' b'most' b'notably' b'water' b'leaf' b'or' b'even' b'traced' b'.' b'They' b'are' b'protected' b'or' b'assigned' b'.' b'It'
    b'is' b'pioneered' b'by' b'a' b'individual' b'1145' b'that' b'luminous' b'its' b'heaviest' b'status' b'to' b'their' b'anal' b'flash' b'directions' b'when' b'in' b'the' b'country'
    b',' b'they' b'normally' b'show' b'little' b'vocational' b'side' b'colonies' b'on' b'the' b'masonry' b'.' b'Phil' b'emerges' b'(' b'by' b'which' b'there' b'is' b'no'
    b'bird' b'@-@' b'frequency' b',' b'but' b'may' b'have' b'developed' b'some' b'other' b'confirmation' b'to' b'rise' b'their' b'food' b'common' b'provinces' b'.' b'<unk>' b'on'
    b'the' b'head' b'of' b'that' b'breeding' b'edge' b'is' b'it' b'.' b'An' b'man' b'has' b'only' b'been' b'spurring' b'nationally' b',' b'and' b'with' b'its'
    b'set' b'up' b'to' b'<unk>' b',' b'on' b'the' b'other' b'side' b'of' b'Ulster' b'beyond' b'West' b'Africa' b',' b'Canada' b'is' b'directly' b'depicted' b'.'
    b'An' b'broadly' b'male' b'Syrian' b'parrot' b'village' b'fish' b'exists' b'after' b'she' b'makes' b'her' b'a' b'hole' b'Watershed' b',' b'somewhat' b'kill' b'only' b'because'
    b'they' b'<unk>' b'but' b'Trip' b',' b'while' b'is' b'able' b'to' b'paint' b'them' b'.' b'With' b'this' b',' b'them' b'may' b'insist' b'with' b'nuclear'
    b'food' b'.' b'<eos>' b'Grant' b'extend' b'to' b'Hamburg' b'with' b'first' b'time' b';' b'the' b'100' b'layer' b'of' b'all' b'species' b'are' b'sit' b'on'
    b'their' b'Kentrosaurus' b'.' b'The' b'scales' b'where' b'insects' b'may' b'be' b'To' b'promotion' b'to' b'be' b'killed' b'to' b'end' b'it' b'.' b'The' b'most'
    b'investigating' b'europium' b'sense' b'can' b'indicate' b'that' b'food' b'widespread' b'mathematical' b'properties' b'.' b'<eos>' b'There' b'are' b'discontinued' b'structures' b'including' b'principally' b',' b'greatly'
    b'<unk>' b'.' b'These' b'regions' b'do' b'not' b'be' b'realized' b'to' b'be' b'found' b'metres' b'when' b'by' b'this' b'hand' b'having' b'four' b'two' b'females'
    b'of' b'distinct' b'landslides' b'.' b'<eos>' b'As' b'it' b'may' b'not' b'be' b'pursued' b'to' b'other' b',' b'<unk>' b'are' b'capable' b'of' b'chambers' b'of'
    b'rupture' b'.' b'Common' b'areas' b'have' b'a' b'clinical' b'objective' b'named' b'they' b'find' b'jobs' b'or' b'survive' b'towards' b'parasites' b'without' b'native' b',' b'24'
    b'people' b',' b'and' b'lower' b'or' b'birds' b'.' b'A' b'female' b'video' b'kneeling' b'and' b'structural' b'male' b'display' b',' b'which' b'is' b'found' b'by'
    b'functional' b'spots' b',' b'accelerate' b'and' b'internally' b'mbar' b',' b'targeting' b'food' b'portions' b'which' b'he' b'was' b'wooded' b'from' b'eating' b'domains' b',' b'Independence'





.. GENERATED FROM PYTHON SOURCE LINES 191-196

It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:

.. GENERATED FROM PYTHON SOURCE LINES 196-241

.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into bsz parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the bsz batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].reshape(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)








.. GENERATED FROM PYTHON SOURCE LINES 242-251

4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values

.. GENERATED FROM PYTHON SOURCE LINES 251-259

.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): DynamicQuantizedLinear(in_features=256, out_features=33278, dtype=torch.qint8, qscheme=torch.per_tensor_affine)
    )




.. GENERATED FROM PYTHON SOURCE LINES 260-262

The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:

.. GENERATED FROM PYTHON SOURCE LINES 262-271

.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Size (MB): 113.944608
    Size (MB): 79.739034




.. GENERATED FROM PYTHON SOURCE LINES 272-276

Second, we see faster inference time, with no difference in evaluation loss:

Note: we set the number of threads to one for single threaded comparison, since quantized
models run single threaded.

.. GENERATED FROM PYTHON SOURCE LINES 276-288

.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 214.2
    loss: 5.168
    elapsed time (seconds): 109.8




.. GENERATED FROM PYTHON SOURCE LINES 289-300

Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 5 minutes  32.728 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
