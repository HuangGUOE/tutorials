
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "advanced/dynamic_quantization_tutorial.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(beta) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we will apply the easiest form of quantization -
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.

.. GENERATED FROM PYTHON SOURCE LINES 22-32

.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F








.. GENERATED FROM PYTHON SOURCE LINES 33-39

1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.

.. GENERATED FROM PYTHON SOURCE LINES 39-73

.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))








.. GENERATED FROM PYTHON SOURCE LINES 74-82

2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.

.. GENERATED FROM PYTHON SOURCE LINES 82-132

.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')








.. GENERATED FROM PYTHON SOURCE LINES 133-141

3. Load the pre-trained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pre-trained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.

.. GENERATED FROM PYTHON SOURCE LINES 141-161

.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )




.. GENERATED FROM PYTHON SOURCE LINES 162-165

Now let's generate some text to ensure that the pre-trained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_

.. GENERATED FROM PYTHON SOURCE LINES 165-190

.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b'considerable' b'crime' b'print' b'the' b'<unk>' b',' b'while' b'it' b'was' b'the' b'general' b'way' b'to' b'make' b'those' b'of' b'only' b'one' b'million' b'shows'
    b'of' b'each' b'competition' b'.' b'flowing' b'that' b'use' b'in' b'comparison' b'to' b'Norway' b"'s" b'language' b'over' b'six' b'years' b',' b'the' b'<unk>' b'@-@'
    b'history' b'Lieutenant' b'well' b'led' b'the' b'Ceres' b'of' b'integration' b'to' b'cancel' b'providing' b'an' b'public' b'becomes' b'a' b'planet' b'of' b'picking' b'@-@' b'white'
    b'an' b'33' b'@-@' b'minute' b'conversion' b'with' b'preacher' b'and' b'(' b'rapper' b')' b'.' b'1879' b'occasionally' b'focus' b'on' b'the' b'Yellow' b'Abbey' b'Atlantic'
    b';' b'BMW' b'or' b'the' b'<unk>' b'race' b'university' b'were' b'much' b'misused' b',' b'before' b'to' b'rise' b'the' b'<unk>' b'(' b'<unk>' b')' b','
    b'Katia' b'(' b'1189' b')' b',' b'a' b'members' b'of' b'bishops' b',' b'and' b'anterior' b'as' b'a' b'Celtic' b'response' b',' b'movement' b'carry' b'constantly'
    b'.' b'Although' b'a' b'steady' b'deal' b'Viking' b'value' b'rapidly' b'increased' b',' b'a' b'story' b'of' b'home' b'spin' b'in' b'submission' b'and' b'collected' b'one'
    b'@-@' b'one' b',' b'twice' b',' b'outline' b'when' b')' b'have' b'an' b'threshold' b'.' b'<eos>' b'"' b'Last' b'Majesty' b'"' b'was' b'a' b'slow'
    b'species' b'force' b'from' b'spy' b'by' b'the' b'socialist' b'Ramgarh' b'newspaper' b'for' b'which' b'he' b'was' b'more' b'told' b'.' b'<eos>' b'<eos>' b'=' b'='
    b'Cited' b'etymology' b'=' b'=' b'<eos>' b'<eos>' b'Hornung' b'consists' b'of' b'two' b'children' b',' b'a' b'remix' b'of' b'70' b'@,@' b'000' b'is' b'in'
    b'waves' b'.' b'<unk>' b'has' b'been' b'described' b'as' b'"' b'smart' b'@-@' b'archery' b'"' b',' b'although' b'his' b'number' b'may' b'MMR' b'.' b'There'
    b'are' b'most' b'most' b'traditional' b'gender' b'composers' b',' b'producing' b'gowns' b'his' b'range' b'they' b'think' b'.' b'It' b'is' b'called' b"'" b'"' b'"'
    b'Addicted' b'of' b'Patton' b'"' b',' b'which' b'is' b'also' b'mainly' b'written' b'.' b'During' b'the' b'quote' b'for' b'the' b'landscape' b',' b'Brown' b'features'
    b'a' b'flying' b'runway' b'warning' b'at' b'where' b'the' b'iambic' b'curve' b'cannot' b'be' b'<unk>' b',' b'if' b'they' b'are' b'directly' b'offered' b'failed' b'to'
    b'appoint' b')' b'.' b'If' b'this' b'process' b'is' b'often' b'well' b'@-@' b'akin' b'to' b'be' b',' b'or' b'once' b',' b'they' b'seem' b'to'
    b'gain' b'males' b'a' b'series' b'of' b'mates' b',' b'individuals' b'of' b'carbon' b',' b'their' b'<unk>' b',' b'and' b'other' b'snakes' b',' b'a' b'ice'
    b',' b'or' b'confronted' b'.' b'The' b'male' b'is' b'a' b'absolute' b'tree' b'towards' b'them' b'.' b'In' b'addition' b',' b'the' b'female' b'included' b'a'
    b'series' b'of' b'a' b'ceratopsian' b'vulnerable' b'day' b',' b'which' b'will' b'then' b'look' b'by' b'<unk>' b'.' b'<eos>' b'A' b'performances' b'timing' b'occurs' b'.'
    b'<eos>' b'Kajal' b'was' b'incorporated' b'to' b'a' b'global' b'review' b'of' b'convection' b'and' b'improving' b'a' b'village' b'Bodymoor' b'Desire' b':' b'for' b'whom' b'they'
    b'help' b'its' b'head' b'moves' b'.' b'They' b'turn' b'to' b'leave' b',' b'and' b'though' b'they' b'can' b'pull' b'and' b'they' b'still' b'lie' b'to'
    b'Dresden' b',' b'and' b'ends' b'of' b'different' b'while' b'they' b'fail' b'to' b'be' b'attempt' b'to' b'overcome' b'machine' b'\xe2\x80\x93' b'males' b',' b'as' b'they'
    b'were' b'different' b'for' b'their' b'partners' b'.' b'regrets' b'showed' b'these' b'by' b'them' b',' b'<unk>' b',' b'complexes' b',' b'and' b'scales' b'such' b'as'
    b'other' b'as' b'<unk>' b',' b'but' b'some' b'components' b'enter' b'<unk>' b'.' b'<unk>' b'of' b'accidental' b'individuals' b'vertex' b'expects' b'more' b'has' b'a' b'high'
    b'windows' b',' b'seated' b'on' b'a' b'lot' b'of' b'human' b'fat' b',' b'greater' b'wings' b',' b'<unk>' b'titles' b'and' b'Inari' b'.' b'They' b'also'
    b'can' b'cause' b'par' b'from' b'body' b'or' b'even' b'suspected' b'movement' b'and' b'ate' b'because' b'they' b'are' b'strengthening' b'by' b'Homarus' b'.' b'<unk>' b'Cat'
    b'were' b'happening' b'slightly' b'with' b'Astraeus' b',' b'as' b'they' b'have' b'only' b'mentioned' b'.' b'Like' b'this' b'chapel' b',' b'without' b'it' b'cannot' b'be'
    b'<unk>' b'larvae' b',' b'functional' b'characters' b'recognized' b'bulbous' b',' b'pass' b'joy' b',' b'are' b'male' b',' b'they' b'specialized' b',' b'and' b'as' b'they'
    b'flanking' b',' b'to' b'consume' b'chromosomes' b',' b'by' b'transmitted' b'texts' b'such' b'as' b'Z.' b'vulgaris' b',' b'even' b'Perrie' b"'s" b'beak' b'are' b'repulse'
    b'after' b'human' b',' b'so' b'when' b'they' b'put' b'fiestas' b'so' b'body' b'to' b'their' b'fine' b'statutes' b'or' b'related' b'up' b'.' b'The' b'starling'
    b'sees' b'resolves' b'vital' b'"' b'vain' b'"' b'or' b'living' b'into' b'those' b'that' b'are' b'tossed' b'a' b'space' b'from' b'attempting' b'to' b'SUO' b'to'
    b'inspect' b'native' b'.' b'With' b'a' b'female' b'time' b'of' b'a' b'average' b'is' b'simple' b'to' b'give' b'less' b'worth' b'beyond' b'their' b'big' b'daughter'
    b'from' b'square' b'feet' b'(' b'12' b'ft' b')' b'high' b'apart' b'to' b'form' b'their' b'screen' b'each' b'transitive' b'.' b'The' b'shorter' b'spectrum' b'call'
    b'further' b'224' b'while' b'they' b'are' b'deer' b'pattern' b'.' b'<eos>' b'At' b'once' b'there' b'have' b'been' b'evidence' b'whether' b'their' b'spots' b'had' b'more'
    b'knowing' b'.' b'Males' b'suggest' b'it' b'would' b'be' b'the' b'first' b'choice' b'to' b'find' b'a' b'rich' b'masala' b'bird' b'per' b'constellation' b'(' b'trout'
    b'to' b'produce' b',' b'snake' b'and' b'USSR' b')' b'and' b'Olorotitan' b',' b'or' b'hollow' b'powers' b'from' b'a' b'open' b'scientist' b',' b'which' b'have'
    b'Raffles' b'taste' b',' b'and' b'the' b'well' b'@-@' b'body' b'female' b'woodpile' b'.' b'A' b'female' b'leaves' b'kakapo' b'between' b'da' b'galericulata' b'with' b'coastal'
    b'<unk>' b'and' b'champion' b'programme' b'have' b'contact' b'to' b'Ceres' b'via' b'each' b'other' b'.' b'It' b'received' b'its' b'first' b'practice' b'in' b'electrical' b'Apple'
    b'(' b'shutting' b'by' b'<unk>' b'@-@' b'<unk>' b')' b'and' b'the' b'other' b'Zimbabwe' b'male' b'(' b'<unk>' b')' b'0' b':' b'grows' b'in' b'1852'
    b'(' b'half' b'of' b'33' b'\xe2\x80\x93' b'2' b'December' b'2016' b')' b'.' b'<eos>' b'Northern' b'Ireland' b',' b'for' b'example' b'primarily' b'the' b'second' b'in'
    b'which' b'Islamic' b'saints' b'(' b'which' b'a' b'female' b')' b'of' b'<unk>' b'are' b'larger' b',' b'hanging' b'of' b'muscles' b'that' b'represent' b'very' b'therapy'
    b'reading' b'and' b'the' b'eggs' b'policies' b'.' b'The' b'basic' b'body' b',' b'dozens' b'hooked' b'when' b'they' b'should' b'have' b'cases' b'to' b'attract' b'descendant'
    b'must' b'negotiate' b'a' b'planet' b'.' b'Behind' b'moorland' b'nuclei' b'that' b'it' b'can' b'bring' b'to' b'the' b'diversity' b'of' b'DNA' b'to' b'her' b'nest'
    b'.' b'Many' b'trees' b'often' b'feed' b'in' b'some' b'areas' b'and' b'dull' b'birds' b'.' b'upset' b',' b'Iran' b'said' b'that' b'if' b'forcing' b'as'
    b'of' b'female' b',' b'it' b'may' b'be' b'<unk>' b'if' b'their' b'male' b'nuclei' b'holding' b'a' b'eye' b'and' b'needs' b'to' b'grow' b'.' b'<eos>'
    b'High' b'starlings' b'may' b'be' b'recommended' b'to' b'be' b'completely' b'distant' b',' b'as' b'even' b'no' b'components' b'form' b'to' b'their' b'small' b'country' b'.'
    b'Both' b'female' b'feed' b'for' b'by' b'male' b'eggs' b'has' b'not' b'doubts' b'for' b'survival' b'.' b'On' b'papyrus' b'BC' b',' b'the' b'imposition' b'of'
    b'a' b'white' b'eye' b'lauding' b'ensued' b'through' b'possession' b'in' b'opening' b',' b'and' b'relay' b'pressure' b'explains' b'to' b'their' b'mating' b'tap' b'for' b'other'
    b'flanks' b'.' b'Parts' b'such' b'as' b'<unk>' b'(' b'Snow' b')' b'is' b'a' b'concentration' b'of' b'family' b'Sylvester' b'50' b'\xe2\x80\x93' b'7' b'May' b'that'
    b"'m" b'Wicca' b'(' b'HIV' b')' b'environment' b',' b'as' b'he' b'is' b'weakening' b'up' b'by' b'widely' b'separated' b'removing' b'his' b'parent' b'for' b'another'
    b'when' b'the' b'head' b'becomes' b'a' b'deliberate' b'safe' b'of' b'they' b'can' b'be' b'been' b'broadly' b'exchanged' b'to' b'require' b'after' b'females' b'or' b'sexual'





.. GENERATED FROM PYTHON SOURCE LINES 191-196

It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:

.. GENERATED FROM PYTHON SOURCE LINES 196-241

.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into bsz parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the bsz batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].reshape(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)








.. GENERATED FROM PYTHON SOURCE LINES 242-251

4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values

.. GENERATED FROM PYTHON SOURCE LINES 251-259

.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): DynamicQuantizedLinear(in_features=256, out_features=33278, dtype=torch.qint8, qscheme=torch.per_tensor_affine)
    )




.. GENERATED FROM PYTHON SOURCE LINES 260-262

The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:

.. GENERATED FROM PYTHON SOURCE LINES 262-271

.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Size (MB): 113.944608
    Size (MB): 79.739034




.. GENERATED FROM PYTHON SOURCE LINES 272-276

Second, we see faster inference time, with no difference in evaluation loss:

Note: we set the number of threads to one for single threaded comparison, since quantized
models run single threaded.

.. GENERATED FROM PYTHON SOURCE LINES 276-288

.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 217.6
    loss: 5.168
    elapsed time (seconds): 119.4




.. GENERATED FROM PYTHON SOURCE LINES 289-300

Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 5 minutes  46.268 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
