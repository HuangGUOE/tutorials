
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "advanced/dynamic_quantization_tutorial.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(beta) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we will apply the easiest form of quantization -
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.

.. GENERATED FROM PYTHON SOURCE LINES 22-32

.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F








.. GENERATED FROM PYTHON SOURCE LINES 33-39

1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.

.. GENERATED FROM PYTHON SOURCE LINES 39-73

.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))








.. GENERATED FROM PYTHON SOURCE LINES 74-82

2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.

.. GENERATED FROM PYTHON SOURCE LINES 82-132

.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')








.. GENERATED FROM PYTHON SOURCE LINES 133-141

3. Load the pre-trained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pre-trained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.

.. GENERATED FROM PYTHON SOURCE LINES 141-161

.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )




.. GENERATED FROM PYTHON SOURCE LINES 162-165

Now let's generate some text to ensure that the pre-trained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_

.. GENERATED FROM PYTHON SOURCE LINES 165-190

.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b'Piano' b'.' b'At' b'Wimbledon' b'in' b'1982' b'it' b'<unk>' b'its' b'former' b'vocals' b'for' b'six' b'<unk>' b',' b'and' b'the' b'other' b'<unk>' b'drivers'
    b',' b'which' b'also' b'alternatively' b'finally' b'combined' b'the' b'male' b'.' b'In' b'the' b'first' b'study' b',' b'including' b'the' b'cessation' b'of' b'warmth' b','
    b'<unk>' b'his' b'distinctive' b'experience' b'had' b'a' b'supreme' b'foot' b'on' b'folk' b'or' b'brown' b'levels' b'.' b'At' b'about' b'two' b'years' b',' b'an'
    b'writer' b'called' b'"' b'Neversoft' b'!' b'"' b'diatoms' b'.' b'Stores' b'master' b'Bridge' b'explains' b'that' b'Ceres' b'efforts' b'over' b'this' b'period' b'of' b'a'
    b'emotions' b'by' b'nature' b'.' b'The' b'Bahr' b'planet' b'begins' b'the' b'most' b'first' b'features' b'of' b'a' b'variety' b'of' b'literacy' b',' b'which' b'characteristic'
    b'in' b'medium' b'@-@' b'rich' b'data' b'between' b'that' b'Polish' b'or' b'mathematics' b'.' b'conducted' b',' b'they' b'are' b'FreeStyleGames' b'baker' b'Historical' b'<unk>' b'for'
    b'the' b'crazy' b'epic' b'Flores' b'(' b'IV' b'Begley' b')' b'as' b'a' b'result' b'of' b'crosses' b'a' b'map' b"'s" b'relationship' b'.' b'In' b'July'
    b',' b'when' b'dwarf' b'introduced' b',' b'they' b'formed' b'women' b'Director' b'Shakespeare' b'viewed' b'Sylvia' b'maintain' b'channels' b'and' b'that' b'of' b'the' b'bird' b'is'
    b'a' b'Przewalski' b'Croix' b';' b'mainly' b'they' b'was' b'true' b'to' b'be' b'Amla\xc3\xadb' b'axial' b'.' b'A' b'thinking' b'of' b'Les' b'conformations' b'was' b'also'
    b'considered' b'on' b'comparison' b'to' b'a' b'Jews' b'by' b'Furtado' b',' b'though' b'as' b'being' b'the' b'best' b'problem' b'to' b'consider' b'condoms' b'from' b'North'
    b'Korea' b'.' b'Local' b'ibis' b'Smash' b'Insular' b'Pretty' b'shot' b'@-@' b'Gallagher' b'in' b'Aldwych' b',' b'as' b'he' b'scored' b'a' b'nuclear' b'World' b'Corps'
    b'since' b'Romania' b',' b'which' b'inspired' b'it' b'into' b'enclosure' b'"' b'in' b'Lincoln' b'"' b'.' b'boy' b'Beverly' b'Cramer' b'was' b'named' b'reduce' b'in'
    b'feral' b'possession' b'since' b'a' b'1998' b'manner' b'.' b'However' b',' b'advertisements' b'officially' b'perform' b'ferrying' b'persona' b':' b'"' b'guy' b'communicating' b'an' b'end'
    b'depth' b'at' b'<unk>' b'"' b'east' b'regeneration' b'Gillespie' b',' b'Houston' b'notes' b'something' b'with' b'stories' b',' b'<unk>' b'that' b'year' b'were' b'left' b'.'
    b'But' b'so' b'a' b'collection' b'of' b'friends' b',' b'people' b'and' b'warned' b'and' b'their' b'overall' b'segments' b'were' b'at' b'about' b'least' b'3' b'years'
    b'in' b'the' b'deaths' b'.' b'There' b'was' b'impressed' b'his' b'books' b'to' b'weapon' b'<unk>' b'\xe2\x80\x94' b'<unk>' b',' b'<unk>' b',' b'Immigration' b',' b'mountain'
    b'Tara' b',' b'Ten' b',' b'and' b'MW' b'.' b'For' b'conclusively' b',' b'they' b'report' b'infusion' b',' b'having' b'overseen' b'Vargas' b'Joseph' b'Bandicoot' b'with'
    b'a' b'ancient' b'program' b'of' b'45' b'times' b',' b'while' b'one' b'@-@' b'advertising' b'belong' b'to' b'the' b'kingship' b'they' b'adopted' b'.' b'The' b'<unk>'
    b'experience' b'(' b'February' b'16' b',' b'1996' b')' b'remains' b'greatly' b'"' b'synthesis' b'"' b',' b'which' b'will' b'be' b'less' b'unlikely' b'and' b'derived'
    b'from' b'by' b'a' b'"' b'flat' b'"' b'separate' b'planet' b',' b'less' b'loud' b'influence' b'.' b'Another' b'team' b'has' b'shot' b'between' b'a' b'mild'
    b'was' b'criticized' b'by' b'a' b'triumvirate' b',' b'with' b'the' b'other' b'competitive' b'vanquishing' b'novels' b',' b'by' b'4' b'@.@' b'62' b',' b'5' b','
    b'and' b'35' b'million' b'people' b'finished' b'to' b'be' b'Numerous' b'wooden' b'times' b'.' b'In' b'2006' b',' b'Jifna' b'scored' b'Nielsen' b'Ray' b'Bignell' b','
    b'a' b'member' b'of' b'Bath' b'EST' b'in' b'plaza' b'in' b'1909' b',' b'winning' b'text' b'to' b'an' b'new' b'planet' b'(' b'2010' b')' b'was'
    b'approaching' b'for' b'.' b'<eos>' b'The' b'moralitas' b'of' b'rhyme' b'was' b'a' b'complex' b'tourist' b'funeral' b'with' b'his' b'lifetime' b'in' b'coal' b'.' b'In'
    b'2006' b',' b'a' b'proposal' b'in' b'whom' b',' b'RNF' b'lignotuber' b'in' b'romantic' b'associations' b',' b'Sam' b'"' b'growing' b'"' b',' b'initially' b'"'
    b'Chou' b'"' b'Catherine' b'"' b'<unk>' b'"' b'him' b'were' b'administered' b'as' b'the' b'only' b'representative' b'of' b'<unk>' b'.' b'One' b'seven' b'are' b'short'
    b'in' b'the' b'United' b'States' b'on' b'October' b'17' b',' b'2015' b',' b'al' b'<unk>' b',' b'founded' b'by' b'6' b'\xe2\x80\x93' b'14' b'Geek' b','
    b'before' b'coming' b'into' b'a' b'performed' b'Shaiva' b'college' b'season' b';' b'in' b'other' b'religious' b'games' b',' b'abundance' b'of' b'critics' b',' b'Nebraska' b','
    b'grand' b',' b'and' b'Stravinsky' b'.' b'<eos>' b'<eos>' b'<eos>' b'=' b'Generally' b'Exercise' b'Quite' b'Stand' b'=' b'<eos>' b'<eos>' b'On' b'26' b'April' b'1848'
    b'was' b'a' b'fact' b'between' b'<unk>' b'and' b'1977' b'.' b'Damage' b'declared' b'reinstated' b'for' b'little' b'intensive' b',' b'which' b'claimed' b'the' b'starting' b'fundamental'
    b'proximity' b'for' b'<unk>' b',' b'Port' b'Adam' b'<unk>' b',' b'a' b'Jimi' b'Talent' b'/' b'0000' b',' b'Central' b'Sufjan' b'Mitchell' b',' b'August' b'27'
    b',' b'1929' b'.' b'<eos>' b'With' b'not' b'pressured' b'unsuccessful' b'active' b'stories' b',' b'the' b'4' b'%' b'boulevard' b'on' b'English' b'snowfall' b'reached' b'a'
    b'sling' b'Nambu' b'Dragon' b'<unk>' b'Two' b'votes' b'and' b'once' b'once' b',' b'after' b'a' b'Jifna' b"'s" b'designer' b'on' b'A' b'left' b'length' b','
    b'George' b'Hey' b'Pirelli' b',' b'frequent' b'100' b'October' b'1919' b'.' b'However' b'President' b'Richard' b'Wyatt' b'commented' b'to' b'begin' b'greatly' b'through' b'<unk>' b';'
    b'drew' b'using' b'much' b'change' b',' b'laureate' b'Stevens' b'<unk>' b'IslandTM' b'was' b'longer' b'well' b'@-@' b'old' b',' b'running' b'in' b'only' b'1850' b'March'
    b'excluded' b'in' b'the' b'preventing' b'election' b'in' b'the' b'United' b'Kingdom' b'.' b'After' b'returning' b'to' b'them' b'of' b'the' b'close' b'schedule' b'of' b'respawn'
    b',' b'the' b'encyclical' b'headquarters' b'used' b'over' b'to' b'investigate' b'unknowingly' b'or' b'spent' b'their' b'honorary' b'when' b'Formula' b"'Malley" b'is' b'hindered' b'by' b'undated'
    b'Irish' b'shear' b',' b'created' b'by' b'residents' b'.' b'<unk>' b',' b'shame' b',' b'and' b'Boulez' b'Sil' b'were' b'a' b'target' b'to' b'be' b'a'
    b'legislation' b'and' b'suggested' b'.' b'There' b'have' b'been' b'large' b'development' b'among' b'immediate' b'interests' b'\xe2\x80\x93' b'buried' b'in' b'a' b'review' b'at' b'each' b'long'
    b'source' b'composed' b'entering' b'every' b'broad' b'originator' b'of' b'about' b'20' b'%' b'over' b'a' b'year' b'.' b'<eos>' b'<eos>' b'=' b'=' b'History' b'history'
    b'=' b'=' b'<eos>' b'<eos>' b'According' b'to' b'one' b'of' b'these' b'quarter' b',' b'productive' b',' b'his' b'structural' b'pear' b',' b'the' b'capital' b','
    b'and' b'angle' b',' b'some' b'of' b'common' b'stories' b'were' b'credited' b'in' b'evidence' b'for' b'course' b',' b'and' b'impure' b',' b'was' b'since' b'the'
    b'<unk>' b',' b'in' b'men' b'<unk>' b'as' b'Israel' b',' b'which' b'had' b'also' b'allowed' b'them' b'it' b'was' b'exiled' b'.' b'Development' b'only' b'survive'
    b'below' b'lying' b'it' b'from' b'6' b'@.@' b'4' b'centimetres' b'(' b'71' b'@.@' b'8' b'mm' b')' b'high' b'strength' b',' b'particularly' b'during' b'years'
    b'to' b'be' b'become' b'transmitted' b'and' b'Havers' b',' b'resulting' b'on' b'island' b',' b'resulted' b'with' b'points' b'.' b'At' b'this' b'reason' b'they' b'are'
    b'home' b'.' b'The' b'last' b'Formula' b'Crash' b"'s" b'body' b'is' b'based' b'by' b'the' b'western' b'1920s' b'.' b'During' b'the' b'first' b'quarter' b','
    b'architectural' b',' b'running' b'cuisine' b'in' b'other' b'states' b',' b'fast' b'doors' b'have' b'also' b'adopted' b'more' b'than' b'50' b'kilometres' b'(' b'4' b'@.@'
    b'5' b'in' b')' b'long' b'.' b'Two' b'other' b'sub' b'pairs' b'have' b'shown' b'floor' b'status' b'between' b'1' b'@.@' b'23' b'million' b'years' b'ago'
    b'include' b'they' b'looked' b'into' b'the' b'island' b'forward' b'.' b'Defensive' b'dust' b'arising' b',' b'usually' b'excluded' b'<unk>' b'such' b'as' b'pixie' b'injuries' b','
    b'were' b'more' b'likely' b'for' b'paradoxical' b'languages' b'.' b'On' b'a' b'western' b'down' b'with' b'new' b'starlings' b',' b'develops' b'Indiana' b',' b'workers' b','





.. GENERATED FROM PYTHON SOURCE LINES 191-196

It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:

.. GENERATED FROM PYTHON SOURCE LINES 196-241

.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into bsz parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the bsz batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].reshape(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)








.. GENERATED FROM PYTHON SOURCE LINES 242-251

4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values

.. GENERATED FROM PYTHON SOURCE LINES 251-259

.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): DynamicQuantizedLinear(in_features=256, out_features=33278, dtype=torch.qint8, qscheme=torch.per_tensor_affine)
    )




.. GENERATED FROM PYTHON SOURCE LINES 260-262

The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:

.. GENERATED FROM PYTHON SOURCE LINES 262-271

.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Size (MB): 113.944608
    Size (MB): 79.739034




.. GENERATED FROM PYTHON SOURCE LINES 272-276

Second, we see faster inference time, with no difference in evaluation loss:

Note: we set the number of threads to one for single threaded comparison, since quantized
models run single threaded.

.. GENERATED FROM PYTHON SOURCE LINES 276-288

.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 202.0
    loss: 5.168
    elapsed time (seconds): 109.0




.. GENERATED FROM PYTHON SOURCE LINES 289-300

Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 5 minutes  19.555 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
