
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "advanced/dynamic_quantization_tutorial.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(beta) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we will apply the easiest form of quantization -
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.

.. GENERATED FROM PYTHON SOURCE LINES 22-32

.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F








.. GENERATED FROM PYTHON SOURCE LINES 33-39

1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.

.. GENERATED FROM PYTHON SOURCE LINES 39-73

.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))








.. GENERATED FROM PYTHON SOURCE LINES 74-82

2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.

.. GENERATED FROM PYTHON SOURCE LINES 82-132

.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')








.. GENERATED FROM PYTHON SOURCE LINES 133-141

3. Load the pre-trained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pre-trained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.

.. GENERATED FROM PYTHON SOURCE LINES 141-161

.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )




.. GENERATED FROM PYTHON SOURCE LINES 162-165

Now let's generate some text to ensure that the pre-trained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_

.. GENERATED FROM PYTHON SOURCE LINES 165-190

.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b'densities' b',' b'following' b'a' b'goal' b';' b'national' b'among' b'Allah' b'in' b'several' b'decades' b'on' b'many' b'birds' b'in' b'employer' b'Mars' b'.' b'Further'
    b'texts' b'<unk>' b'to' b'be' b'introduced' b'and' b'generally' b'Huddersfield' b',' b'they' b'are' b'given' b'by' b'sights' b'whose' b'ill' b'release' b',' b'they' b'were'
    b'also' b'able' b'to' b'enhance' b'them' b',' b'while' b'peregrine' b'Jones' b'criticized' b'positive' b'awareness' b'in' b'continent' b',' b'comparing' b'argument' b'intact' b'in' b'his'
    b'large' b',' b'development' b',' b'containing' b'hail' b'and' b'desires' b'.' b'Since' b'this' b'level' b'of' b'the' b'1761' b'planet' b'is' b'the' b'wing' b'of'
    b'<unk>' b'(' b'Palermo' b')' b',' b'that' b'is' b'carrying' b'by' b'heroic' b'<unk>' b',' b'headed' b'<unk>' b',' b'illustrations' b',' b'walking' b'Hanoi' b','
    b'and' b'moralitas' b'when' b'they' b'find' b'them' b'.' b'<eos>' b'The' b'kakapo' b'was' b'specifically' b'a' b'thick' b'terrible' b'centre' b'established' b'by' b'139' b'@.@'
    b'7' b'seconds' b',' b'according' b'to' b'an' b'group' b'of' b'attractions' b'in' b'support' b'\xe2\x80\x94' b'either' b'market' b',' b'revamped' b'areas' b'and' b'helpful' b','
    b'including' b'what' b'77' b'Panthers' b'(' b'eight' b'other' b'simple' b'large' b'Max' b'gigs' b')' b',' b'<unk>' b'.' b'This' b'independently' b'dust' b'is' b'a'
    b'example' b'of' b'times' b',' b'and' b'this' b'is' b'introduced' b'of' b'very' b'labour' b'assigned' b'for' b'small' b',' b'Euclid' b',' b'adopted' b'their' b'reagent'
    b',' b'<unk>' b'a' b'perfect' b'fore' b'call' b'.' b'The' b'female' b'is' b'normally' b'Fork' b'so' b'around' b'a' b'Irish' b'shop' b',' b'while' b'the'
    b'male' b'often' b'takes' b'the' b'Kotick' b'(' b'it' b'in' b'Railroad' b')' b',' b'but' b'by' b'exposed' b'is' b'unable' b'to' b'be' b'covered' b'by'
    b'Lord' b'(' b'II' b')' b'.' b'Similarly' b',' b'in' b'his' b'highest' b'subspecies' b',' b'it' b'is' b'a' b'coracoid' b'ditch' b'that' b'references' b'to'
    b'a' b'long' b'rather' b'hours' b'.' b'The' b'prematurely' b',' b'have' b'Frenchmen' b'solenoid' b',' b'and' b'are' b'being' b'forms' b'conservative' b'when' b'the' b'cloud'
    b'served' b'as' b'long' b'as' b'state' b';' b'This' b',' b'when' b'females' b'recommended' b'almost' b'4' b'\xe2\x80\x93' b'2' b'kilometres' b'(' b'4' b'@.@' b'5'
    b'in' b')' b',' b'it' b'may' b'be' b'related' b'.' b'<eos>' b'<unk>' b'estimates' b':' b'A' b'birds' b'towers' b',' b'which' b'DCPA' b'descendants' b'may'
    b'be' b'secondary' b'in' b'legs' b'before' b'being' b'worth' b'native' b'@-@' b'like' b'as' b'they' b'typically' b'feed' b'.' b'Also' b',' b'they' b'are' b'being'
    b'reduced' b'to' b'teeth' b',' b'or' b'in' b'natural' b',' b'like' b'poles' b',' b'and' b'Fatima' b'foraging' b'.' b'The' b'encroaching' b'notes' b'of' b'a'
    b'renting' b'condition' b'will' b'be' b'found' b'by' b'so' b'Moskin' b'to' b'block' b'its' b'enemies' b':' b'"' b'afforded' b'between' b'this' b'maintenance' b'is' b'extratropical'
    b'to' b'you' b'can' b'be' b'consumed' b'to' b'do' b'anything' b'that' b'they' b'are' b'perhaps' b'because' b'us' b'sheep' b'is' b'sometimes' b'rendered' b'quality' b'.'
    b'"' b'demons' b'changes' b'by' b'other' b'others' b'by' b'nutrient' b'constitute' b'small' b'arsenic' b',' b'which' b'has' b'been' b'further' b'assigned' b'to' b'Bergmann' b'.'
    b'They' b'could' b'seem' b'any' b'horse' b'to' b'explain' b'eastern' b'native' b',' b'and' b'in' b'particular' b'it' b'was' b'revealed' b'beyond' b'any' b'other' b'pain'
    b'.' b'<eos>' b'However' b',' b'they' b'considered' b'further' b'for' b'its' b'availability' b':' b'they' b'have' b'toadstool' b'89A' b'.' b'Another' b'starlings' b'occurs' b'or'
    b'unchanged' b'just' b'by' b'dioxide' b'is' b'reduced' b'to' b'the' b'MGM' b'myth' b'and' b'then' b'aside' b'other' b'products' b'from' b'Soundgarden' b'.' b'<eos>' b'All\xc4\x81h'
    b',' b'on' b'the' b'hind' b'surface' b',' b'gave' b'New' b'Zealand' b',' b'and' b'which' b'provides' b'it' b'to' b'and' b'obtain' b'electric' b'.' b'inducing'
    b'layer' b'muscular' b'Laud' b',' b'preventing' b'the' b'kakapo' b',' b'or' b'for' b'the' b'female' b'.' b'In' b'this' b'manner' b',' b'landowner' b'Structural' b'wedge'
    b'(' b'Robert' b'<unk>' b')' b'polypeptide' b'of' b'Ceres' b'and' b'stories' b'(' b'anything' b')' b'represents' b'the' b'parks' b'have' b'evolved' b'rich' b'cells' b'longer'
    b'.' b'It' b'may' b'be' b'limited' b'that' b'Domoina' b'connected' b'around' b'a' b'plumage' b'after' b'or' b'they' b'<unk>' b'his' b'age' b'to' b'attract' b'from'
    b'Ceres' b'.' b'Kaufman' b'(' b'remains' b'of' b'\xc4\x80c\xc4\x81rya' b')' b'is' b'not' b'dissipating' b'from' b'their' b'Tauri' b'workload' b'and' b'Dubois' b'strengthens' b'greater' b'Triple'
    b'Udell' b',' b'including' b'turn' b'being' b'eaten' b'by' b'two' b'Wirraways' b'.' b'This' b'will' b'seem' b'segregated' b'evolved' b'and' b'spends' b'up' b'them' b'out'
    b'females' b'calls' b'increases' b'.' b'objects' b'can' b'be' b'Vandernoot' b'elevated' b',' b'particularly' b'some' b'warriors' b'they' b'are' b'set' b'in' b'1841' b'.' b'Also'
    b',' b'they' b'have' b'completing' b'to' b'disperse' b'explicit' b'starlings' b'.' b'"' b'nesting' b'Maya' b'parasites' b'violacea' b'mostly' b'east' b'much' b'to' b'do' b'lesser'
    b'<unk>' b'.' b'"' b'Common' b'prototypes' b'include' b'different' b'variant' b'of' b'items' b'and' b'depth' b',' b'food' b'microscopy' b'.' b'One' b'Americans' b'include' b'<unk>'
    b',' b'Homarinus' b',' b'relapse' b',' b'and' b'mud' b',' b'occasionally' b'sealed' b'by' b'negatively' b'through' b'frescoes' b'.' b'This' b'conclave' b'was' b'greatly' b'described'
    b'by' b'stories' b'such' b'as' b'magical' b'hunting' b',' b'and' b'were' b'often' b'spoken' b'to' b'completing' b'1129' b'in' b'Australia' b'and' b'foil' b'red' b'@-@'
    b'herding' b'spots' b'.' b'<unk>' b'have' b'successfully' b'survived' b'force' b'during' b'various' b'consumption' b',' b'such' b'as' b'white' b'and' b'DNA' b'components' b'.' b'Other'
    b'kakapo' b'were' b'named' b',' b'and' b'there' b'are' b'no' b'population' b'that' b'some' b'were' b'Fritt' b'offspring' b'.' b'In' b'length' b'light' b',' b'they'
    b'must' b'fly' b'topics' b',' b'by' b'special' b'or' b'Trachodon' b',' b'so' b'the' b'entire' b'Boat' b'County' b'<unk>' b'has' b'announced' b'round' b'a' b'common'
    b'population' b'after' b'the' b'breeding' b'Ghat' b'.' b'As' b'the' b'bird' b'attracted' b'the' b'same' b'as' b'completing' b'through' b'they' b'they' b'care' b'.' b'The'
    b'New' b'Zealand' b'monarch' b'moves' b'to' b'broods' b'on' b'Irish' b'stands' b',' b'with' b'which' b'a' b'female' b'causes' b'aground' b'in' b'then' b'.' b'<eos>'
    b'Young' b'male' b'are' b'often' b'associated' b'in' b'both' b'Australia' b',' b'but' b'often' b'diving' b'when' b'recently' b'to' b'appear' b'on' b'their' b'diet' b'.'
    b'<unk>' b'by' b'other' b'birds' b'were' b'probably' b'<unk>' b'and' b'this' b'they' b'do' b'any' b'place' b'after' b'they' b'fails' b'area' b'.' b'Also' b'<unk>'
    b'with' b'DNA' b'when' b',' b'recent' b',' b'those' b'of' b'<unk>' b'faceless' b'a' b'mouse' b"'s" b'ground' b'.' b'In' b'the' b'hymenium' b',' b'they'
    b'even' b'feed' b'on' b'across' b'their' b'greater' b'<unk>' b',' b'so' b',' b'by' b'they' b'are' b'completely' b'<unk>' b'or' b'hereditary' b'.' b'<eos>' b'As'
    b'so' b'are' b'known' b'as' b'the' b'planets' b',' b'they' b'is' b'often' b'targeted' b'to' b'avalanche' b'by' b'<unk>' b'.' b'Females' b'are' b'particularly' b'heard'
    b',' b'although' b'this' b'lays' b'historically' b'accreditation' b'.' b'Each' b'young' b'object' b'may' b'be' b'seen' b'in' b'consultation' b'with' b'skull' b'may' b'be' b'first'
    b'unlocked' b'in' b'other' b'species' b'.' b'One' b'these' b'starlings' b'were' b'tasked' b'in' b'1829' b'.' b'Water' b'father' b"'" b'platform' b'follows' b'of' b'Norse'
    b'<unk>' b';' b'disadvantages' b'describes' b'<unk>' b'are' b'frequently' b'forests' b'.' b'In' b'Southeastern' b'regions' b'known' b'as' b'it' b'block' b'many' b'divine' b'short' b'.'
    b'There' b'is' b'no' b'gunfight' b'of' b'reddish' b'activity' b',' b'flightless' b'or' b'<unk>' b'white' b',' b'for' b'second' b'and' b'the' b'amount' b'of' b'brownish'
    b'pain' b'from' b'18-' b'to' b'sit' b'to' b'a' b'way' b'from' b'asleep' b'sculpture' b'.' b'Each' b'same' b'stop' b'(' b'in' b'rule' b'Mercury' b'has'
    b'a' b'female' b'when' b'children' b',' b'yellow' b'and' b'grey' b'is' b'dead' b'sq' b'.' b'It' b'resembles' b'patrons' b'of' b'common' b'Grass' b'@-@' b'shaped'





.. GENERATED FROM PYTHON SOURCE LINES 191-196

It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:

.. GENERATED FROM PYTHON SOURCE LINES 196-241

.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into bsz parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the bsz batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].reshape(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)








.. GENERATED FROM PYTHON SOURCE LINES 242-251

4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values

.. GENERATED FROM PYTHON SOURCE LINES 251-259

.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): DynamicQuantizedLinear(in_features=256, out_features=33278, dtype=torch.qint8, qscheme=torch.per_tensor_affine)
    )




.. GENERATED FROM PYTHON SOURCE LINES 260-262

The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:

.. GENERATED FROM PYTHON SOURCE LINES 262-271

.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Size (MB): 113.944608
    Size (MB): 79.739034




.. GENERATED FROM PYTHON SOURCE LINES 272-276

Second, we see faster inference time, with no difference in evaluation loss:

Note: we set the number of threads to one for single threaded comparison, since quantized
models run single threaded.

.. GENERATED FROM PYTHON SOURCE LINES 276-288

.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 195.6
    loss: 5.168
    elapsed time (seconds): 102.8




.. GENERATED FROM PYTHON SOURCE LINES 289-300

Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 5 minutes  6.511 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
