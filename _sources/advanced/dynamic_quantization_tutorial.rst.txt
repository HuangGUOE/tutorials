
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "advanced/dynamic_quantization_tutorial.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(beta) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we will apply the easiest form of quantization -
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.

.. GENERATED FROM PYTHON SOURCE LINES 22-32

.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F








.. GENERATED FROM PYTHON SOURCE LINES 33-39

1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.

.. GENERATED FROM PYTHON SOURCE LINES 39-73

.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))








.. GENERATED FROM PYTHON SOURCE LINES 74-82

2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.

.. GENERATED FROM PYTHON SOURCE LINES 82-132

.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')








.. GENERATED FROM PYTHON SOURCE LINES 133-141

3. Load the pre-trained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pre-trained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.

.. GENERATED FROM PYTHON SOURCE LINES 141-161

.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )




.. GENERATED FROM PYTHON SOURCE LINES 162-165

Now let's generate some text to ensure that the pre-trained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_

.. GENERATED FROM PYTHON SOURCE LINES 165-190

.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b'.' b'<eos>' b'<unk>' b'to' b'be' b'representative' b'venerable' b',' b'most' b'Nederlands' b',' b'zoologist' b'S.' b'Brat' b',' b'618' b'St.' b'Young' b',' b'"'
    b'Dog' b'Boy' b'"' b',' b'"' b'Irish' b'"' b';' b'was' b'in' b'"' b'widely' b'sophisticated' b'of' b'the' b'many' b'sources' b',' b'following' b'the'
    b'light' b'following' b'Harrison' b',' b'and' b'the' b'tongue' b'is' b'kind' b'of' b'upright' b',' b'with' b'all' b'being' b'used' b',' b'found' b'well' b'as'
    b'"' b'from' b'advance' b'and' b'white' b'immediate' b'coverage' b'.' b'Lady' b'Boom' b'I' b'heard' b'authority' b'from' b'a' b'inspiration' b'although' b'and' b'did' b'not'
    b'"' b'lose' b'immediate' b'success' b'through' b'Brown' b'"' b'.' b'<eos>' b'In' b'his' b'book' b',' b'ballad' b'assured' b'an' b'Rebecca' b'feature' b'keen' b'by'
    b'harmony' b'and' b'<unk>' b'.' b'A' b'physicist' b'who' b'has' b'killed' b'an' b'chair' b'with' b'head' b',' b'depicting' b'theory' b'a' b'game' b'winning' b'by'
    b'the' b'Russian' b'Maids' b'travel' b'to' b'bureaucratic' b'Zum\xc3\xa1rraga' b'.' b'By' b'an' b'ceremony' b'of' b'\xe2\x82\xb9' b'8' b'million' b'watching' b'Basilica' b'(' b'Gentil' b')'
    b',' b'he' b'is' b'also' b'ported' b'to' b'This' b'writing' b'they' b'hope' b'of' b'a' b'shirt' b"'" b'Galentine' b'and' b'the' b'writing' b"'" b'Away'
    b"'" b'(' b'<unk>' b')' b'<unk>' b'party' b'called' b'"' b'The' b'sacred' b'proudest' b'a' b'broomstick' b'"' b',' b'and' b'will' b'act' b'some' b'of'
    b'his' b'interactions' b'.' b'The' b'Your' b'cannot' b'lift' b'in' b'all' b'support' b'as' b'the' b'Baltic' b'/' b'requiring' b'food' b'Perry' b'Boy' b';' b'it'
    b'has' b'also' b'Stop' b'purification' b'up' b'by' b'2002' b'.' b'The' b'game' b"'s" b'eighth' b'pair' b'are' b'predicted' b'to' b'be' b'"' b'hard' b'"'
    b',' b'and' b'it' b'sank' b'a' b'specific' b'<unk>' b';' b'he' b'does' b'not' b'own' b'however' b'that' b'have' b'come' b'back' b'slightly' b'for' b'before'
    b'other' b'lines' b'and' b'focuses' b'on' b'death' b'.' b'Game' b'is' b'commonly' b'resisted' b'so' b'of' b'their' b'one' b'@-@' b'third' b'children' b'on' b'himself'
    b'.' b'He' b'was' b'very' b'acceptable' b'to' b'sheriff' b'in' b'old' b'history' b',' b'and' b'objects' b'how' b'Darke' b'"' b'I' b'won' b'a' b'sense'
    b'of' b'screen' b'solar' b'forces' b'.' b'"' b'One' b'of' b'these' b'occasions' b',' b'like' b'learning' b',' b'can' b'be' b'played' b'in' b'French' b'or'
    b'Colman' b'.' b'<eos>' b'Chennselaig' b'first' b'sibling' b',' b'with' b'these' b'1690' b',' b'prompted' b'short' b'periods' b'of' b'an' b'heads' b'though' b'the' b'reign'
    b'of' b'people' b'whose' b'concerto' b'on' b'their' b'yet' b'Lambourn' b'instead' b'to' b'be' b'uncertainty' b'.' b'Moreover' b',' b'he' b'discusses' b'"' b'ligature' b'of'
    b'FISA' b'"' b'.' b'<eos>' b'<eos>' b'<eos>' b'=' b'SbCl' b'toads' b'=' b'<eos>' b'<eos>' b'The' b'Wind' b'essay' b'has' b'Roddenberry' b'handled' b'the' b'Armed'
    b'Unit' b'in' b'the' b'New' b'York' b'Times' b'.' b'The' b'Hispanic' b'moved' b'within' b'field' b'championships' b',' b'one' b'of' b'those' b'Ireland' b'from' b'half'
    b'in' b'620' b'and' b'half' b'of' b'San' b'divination' b',' b'standing' b'of' b'flights' b'until' b'his' b'death' b',' b'but' b'around' b'its' b'demolition' b'a'
    b'action' b'presented' b'a' b'special' b'person' b'containing' b'the' b'same' b'character' b'connecting' b'576' b'.' b'Communist' b'developments' b'are' b'now' b'low' b';' b'its' b'Japanese'
    b'regiment' b'made' b'their' b'number' b'of' b'protein' b'features' b'who' b'taught' b'he' b'admitted' b'from' b'Plantain' b',' b'Inn' b'Edition' b',' b'the' b'task' b'of'
    b'additionally' b'and' b'irrigation' b',' b'but' b'introducing' b'turbulence' b'for' b'.' b'<unk>' b'under' b'<unk>' b'inept' b';' b'in' b'several' b'theatres' b',' b'pro' b'@-@'
    b'pressed' b'lyrics' b'were' b'greatest' b'of' b'Glitter' b'.' b'Condom' b'appears' b'in' b'northern' b'London' b',' b'though' b'other' b'stories' b'were' b'given' b'accommodation' b'of'
    b'48' b'\xc3\x89cole' b'(' b'60' b'\xc2\xb0' b'deaths' b')' b'of' b'ten' b'lakes' b'.' b'<eos>' b'Unknown' b'with' b'newly' b'workers' b'concentrated' b'in' b'all' b'organized'
    b'years' b',' b'windows' b'might' b'be' b'sickly' b'over' b'developing' b'territory' b',' b'and' b'they' b'finished' b'until' b'they' b'conclude' b'inadequate' b'for' b'six' b'years'
    b'.' b'With' b'not' b'to' b'do' b'yet' b'difficult' b'to' b'get' b'any' b'islands' b'it' b'did' b'not' b'be' b'seen' b',' b'as' b'they' b'were'
    b'rejected' b'so' b'.' b'Further' b'that' b'Nicole' b"'s" b'education' b'be' b'taken' b'in' b'other' b'languages' b'to' b'pave' b'under' b'reinforcements' b'because' b'of' b'four'
    b'to' b'secure' b'.' b'In' b'2015' b',' b'the' b'blocked' b'firm' b'recognized' b'forts' b',' b'primarily' b'"' b'152Eu' b'"' b',' b'which' b'is' b'launched'
    b'in' b'some' b'countries' b'urban' b'trees' b'like' b'kerb' b'or' b'urban' b'non' b'@-@' b'migratory' b'.' b'He' b'Here' b'long' b'State' b',' b'a' b'planet'
    b'which' b'might' b'be' b'widely' b'hostile' b'.' b'Occasionally' b',' b'the' b'source' b'of' b'kakapo' b'were' b'led' b'by' b'her' b'smaller' b'<unk>' b'.' b'Even'
    b'the' b'crime' b'Crash' b'wasps' b'considers' b'obligation' b'to' b'(' b'3' b'@.@' b'5' b'in' b')' b',' b'it' b'has' b'four' b'short' b'times' b'leading'
    b'to' b'Ocean' b'State' b',' b'with' b'evidence' b'from' b'an' b'lodging' b'family' b'.' b'Less' b'large' b'means' b'and' b'are' b'introduced' b'to' b'related' b','
    b'and' b'the' b'latter' b'lost' b';' b'each' b'is' b'the' b'spore' b'language' b'forcing' b'hundreds' b'of' b'anyone' b'to' b'be' b'proper' b'at' b'night' b'.'
    b'<unk>' b'often' b'occurred' b'Tale' b'.' b'There' b'are' b'further' b'over' b'various' b'things' b':' b'the' b'phosphors' b'of' b'accession' b';' b'less' b'than' b'it'
    b',' b'or' b'\xe2\x80\xb3' b'strips' b',' b'functions' b',' b'or' b'up' b'some' b'down' b',' b'associated' b'by' b'other' b'gum' b'lower' b',' b'green' b'howitzers'
    b'.' b'It' b'may' b'be' b'<unk>' b'by' b'<unk>' b',' b'marrow' b',' b'<unk>' b',' b'Stepmother' b',' b'<unk>' b',' b'and' b'neighborhood' b'are' b'into'
    b'species' b'of' b'Latin' b'1777' b'.' b'<eos>' b'<eos>' b'=' b'=' b'Traditional' b'providing' b'languages' b'=' b'=' b'<eos>' b'<eos>' b'<eos>' b'=' b'=' b'Description'
    b'=' b'=' b'<eos>' b'<eos>' b'The' b'earliest' b'difference' b'after' b'the' b'Latin' b'@-@' b'language' b'river' b'was' b'manufactured' b'by' b'Ruthenia' b',' b'<unk>' b','
    b'<unk>' b',' b'feral' b',' b'and' b'Allegro' b'.' b'In' b'1887' b',' b'the' b'bird' b'bought' b'England' b'in' b'California' b',' b'rework' b'of' b'what'
    b'included' b'suitable' b'Uncut' b',' b'derived' b'longest' b'Sin' b'.' b'Cayuga' b'demos' b'are' b'necessary' b'into' b'birds' b'History' b'.' b'There' b'are' b'no' b'evidence'
    b'of' b'these' b'concentrations' b'to' b'Africa' b'.' b'There' b'are' b'numerous' b'species' b'of' b'population' b'species' b',' b'particularly' b'to' b'praise' b',' b'so' b'isotopes'
    b'not' b'were' b'to' b'control' b'as' b'dream' b'.' b'If' b'they' b'are' b'spread' b'across' b'<unk>' b',' b'they' b'are' b'not' b'less' b'remote' b','
    b'mostly' b'over' b'other' b'cells' b'.' b'A' b'female' b'transitioned' b'Mandy' b"'s" b'Council' b',' b'a' b'proportional' b'starling' b'Lebanon' b',' b'and' b'reaches' b'a'
    b'computerized' b'pits' b'from' b'mycorrhizal' b'ridge' b'.' b'<eos>' b'2' b'large' b'neutrons' b'usually' b'spans' b'from' b'average' b',' b'and' b'as' b'corresponding' b'south' b'of'
    b'rather' b'tracks' b'to' b'produce' b'services' b'known' b'as' b'flightless' b',' b'bridges' b'for' b'pews' b'.' b'Mkhedruli' b'swells' b'and' b'their' b'finds' b'Homarinus' b'renumbered'
    b'there' b',' b'but' b'so' b'they' b'are' b'introduced' b'to' b'total' b'.' b'However' b',' b'the' b'kakapo' b"'s" b'tail' b'is' b'heavily' b'Astronomers' b','
    b'because' b',' b'which' b'do' b'attain' b'to' b'do' b'do' b'is' b'a' b'planet' b'.' b'Both' b'other' b'scale' b'@-@' b'frequency' b'behaviour' b'measure' b'suburbs'
    b',' b'and' b'the' b'eggs' b'for' b'grandparents' b'headgear' b'are' b'mostly' b'imitated' b'.' b'With' b'his' b'astute' b'<unk>' b',' b'they' b'amounted' b'Owen' b','
    b'lamps' b'and' b'residues' b'have' b'to' b'be' b'statistically' b'so' b'able' b'to' b'accomplish' b'state' b'like' b'Ceres' b'or' b'food' b'.' b'As' b'an' b'result'





.. GENERATED FROM PYTHON SOURCE LINES 191-196

It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:

.. GENERATED FROM PYTHON SOURCE LINES 196-241

.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into bsz parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the bsz batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].reshape(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)








.. GENERATED FROM PYTHON SOURCE LINES 242-251

4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values

.. GENERATED FROM PYTHON SOURCE LINES 251-259

.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): DynamicQuantizedLinear(in_features=256, out_features=33278, dtype=torch.qint8, qscheme=torch.per_tensor_affine)
    )




.. GENERATED FROM PYTHON SOURCE LINES 260-262

The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:

.. GENERATED FROM PYTHON SOURCE LINES 262-271

.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Size (MB): 113.944608
    Size (MB): 79.739034




.. GENERATED FROM PYTHON SOURCE LINES 272-276

Second, we see faster inference time, with no difference in evaluation loss:

Note: we set the number of threads to one for single threaded comparison, since quantized
models run single threaded.

.. GENERATED FROM PYTHON SOURCE LINES 276-288

.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 199.7
    loss: 5.168
    elapsed time (seconds): 107.0




.. GENERATED FROM PYTHON SOURCE LINES 289-300

Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 5 minutes  15.156 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
