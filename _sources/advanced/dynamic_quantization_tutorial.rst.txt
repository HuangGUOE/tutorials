
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "advanced/dynamic_quantization_tutorial.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(beta) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we will apply the easiest form of quantization -
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.

.. GENERATED FROM PYTHON SOURCE LINES 22-32

.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F








.. GENERATED FROM PYTHON SOURCE LINES 33-39

1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.

.. GENERATED FROM PYTHON SOURCE LINES 39-73

.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))








.. GENERATED FROM PYTHON SOURCE LINES 74-82

2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.

.. GENERATED FROM PYTHON SOURCE LINES 82-132

.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')








.. GENERATED FROM PYTHON SOURCE LINES 133-141

3. Load the pre-trained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pre-trained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.

.. GENERATED FROM PYTHON SOURCE LINES 141-161

.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )




.. GENERATED FROM PYTHON SOURCE LINES 162-165

Now let's generate some text to ensure that the pre-trained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_

.. GENERATED FROM PYTHON SOURCE LINES 165-190

.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b'Judith' b'de' b"'t" b'guard' b'the' b'planet' b'was' b'<unk>' b'.' b'The' b'Krishna' b'(' b'Paul' b'Odyssey' b')' b'likewise' b'was' b'a' b'Tauti\xc5\xa1ka' b'anthropologist'
    b'pistol' b'are' b'rerouted' b'between' b'Tata' b',' b'S' b'onwards' b'on' b'the' b'expulsion' b'of' b'upheavals' b'(' b'low' b',' b'9' b'\xe2\x80\x93' b'4' b'%'
    b')' b',' b'8' b'%' b'at' b'uncertainty' b',' b'peaking' b'on' b'a' b'breeze' b'.' b'The' b'European' b'Whig' b'was' b'created' b'from' b'African' b'Falling'
    b',' b'Fox' b',' b'Southern' b',' b'and' b'Rockies' b'using' b'a' b'flood' b'in' b'Newton' b',' b'and' b'.' b'Banksia' b'of' b'Boom' b'University' b'was'
    b'Porter' b'@-@' b'air' b'to' b'be' b'given' b'as' b'maturity' b'in' b'the' b'Kakapo' b'Sea' b'during' b'an' b'November' b'10' b',' b'2015' b'record' b'of'
    b'Journal' b'\xe2\x80\x93' b'genre' b'some' b'year' b'.' b'They' b',' b'in' b'a' b'decision' b'to' b'declare' b'runaway' b'<unk>' b',' b'from' b'which' b'impact' b'in'
    b'design' b'was' b'probably' b'executed' b'.' b'The' b'phone' b'of' b'Definitions' b'for' b'Sun' b'<unk>' b'detected' b'26' b'in' b'1801' b',' b'and' b'treaties' b'with'
    b'the' b'growth' b'of' b'Hits' b'.' b'Anthony' b'galericulata' b'with' b'actively' b'being' b'presumed' b'made' b'for' b'maximum' b'Sheffield' b'.' b'Another' b'mayor' b'remains' b'a'
    b'series' b'of' b'bound' b'scenario' b'designed' b'forming' b'its' b'tomb' b'.' b'The' b'wars' b'have' b'autonomous' b'acclaim' b'between' b'Roman' b'and' b'African' b'communities' b','
    b'which' b'is' b'in' b'turn' b'drill' b'from' b'them' b'.' b'Radio' b'called' b'Hanuman' b'where' b'however' b',' b'about' b'100' b'%' b'of' b'\xe5\xa4\xa7\xe7\xa9\xba' b'<unk>'
    b',' b'is' b'a' b'reference' b'between' b'Control' b',' b'<unk>' b'.' b'In' b'1899' b',' b'this' b'may' b'be' b'Economics' b',' b'after' b'a' b'Arundel'
    b'planet' b'system' b'in' b'Turkey' b',' b'Nebraska' b',' b'in' b'1921' b'.' b'<eos>' b'Once' b'even' b',' b'pupils' b'are' b'<unk>' b',' b'and' b'they'
    b'were' b'up' b'by' b'Soon' b'fire' b'swimmers' b'and' b'buildings' b'.' b'According' b'to' b'Donaghy' b'Men' b',' b'"' b'They' b'stood' b'around' b'punter' b'province'
    b',' b'other' b'those' b'which' b'left' b'other' b'carries' b',' b'it' b'is' b'very' b'unique' b'for' b'only' b'scientific' b'sequence' b'book' b'<unk>' b'<unk>' b','
    b'Please' b'Banksia' b'"' b'was' b'delayed' b'and' b'uniform' b'a' b'episode' b'that' b'no' b'batting' b'activity' b'of' b'judo' b';' b'falling' b'to' b'Florida' b'in'
    b'1874' b'.' b'<eos>' b'According' b'to' b'"' b'the' b'sky' b'board' b'"' b',' b'the' b'kakapo' b'originated' b'in' b'2' b'@.@' b'4' b'kilometres' b'('
    b'8' b'@.@' b'8' b'in' b')' b'from' b'an' b'previous' b'economy' b'with' b'deliberate' b'bird' b'593' b'.' b'The' b'panel' b'was' b'seen' b'as' b'follows'
    b',' b'and' b'in' b'non' b'@-@' b'reported' b'regiments' b',' b'the' b'litres' b'of' b'32' b'or' b'2' b'%' b'of' b'an' b'male' b',' b'and'
    b'submerged' b'when' b'institutions' b'would' b'be' b'released' b'if' b'it' b'will' b'be' b'seen' b'.' b'In' b'the' b'1860s' b',' b'and' b'also' b'damaged' b'but'
    b'small' b'divalent' b'amounts' b'is' b'more' b'older' b'longer' b'than' b'bearing' b'Serbs' b'.' b'<unk>' b',' b'very' b'original' b',' b'statues' b'are' b'smaller' b'as'
    b'back' b'with' b'Bosworth' b'as' b'thighs' b',' b'and' b'prevent' b'the' b'show' b',' b'they' b'then' b'certainly' b'become' b'able' b'to' b'become' b'the' b'Persians'
    b'.' b'<eos>' b'One' b'male' b'information' b'from' b'their' b'cores' b'also' b'cannot' b'be' b'more' b'toxic' b',' b'<unk>' b'eyes' b'for' b'instinctively' b',' b'<unk>'
    b',' b'electricity' b',' b'yellow' b',' b'geography' b',' b'dredge' b',' b'fires' b',' b'sickle' b',' b'and' b'<unk>' b'.' b'The' b'darkening' b'districts' b'may'
    b'take' b'order' b'a' b'\xe1\x83\xbb' b'amount' b'of' b'Asia' b'as' b'it' b'have' b'vipers' b'or' b'starting' b'their' b'consequences' b'.' b'<eos>' b'A' b'female' b'known'
    b'as' b'The' b'solitaire' b',' b'mounts' b'from' b'Europe' b'and' b'electroplating' b',' b'has' b'an' b'more' b'common' b'addition' b'to' b'port' b'or' b'niches' b'.'
    b'<eos>' b'As' b'the' b'inner' b'range' b'in' b'the' b'bright' b'Fiordland' b',' b'many' b'days' b'have' b'been' b'reduced' b'inside' b'place' b'.' b'<eos>' b'I.'
    b'ridiculed' b'(' b'bone' b'Adams' b')' b',' b'West' b'province' b',' b'Corythosaurus' b',' b'<unk>' b',' b'and' b'1788' b'.' b'<unk>' b'some' b'many' b','
    b'moist' b'Irish' b'feathers' b'.' b'They' b'are' b'outnumbered' b'to' b'turn' b'on' b'being' b'Celtic' b'.' b'Despite' b'the' b'<unk>' b'50' b'kilograms' b'advancement' b','
    b'the' b'assortment' b'of' b'written' b'houses' b'took' b'place' b'with' b'water' b',' b'which' b'seems' b'to' b'be' b'swallowed' b'before' b'high' b'.' b'Because' b'of'
    b'up' b',' b'they' b'are' b'until' b'any' b'active' b',' b'but' b'whether' b'is' b'nevertheless' b'primary' b'without' b'the' b'edge' b'of' b'young' b',' b'most'
    b'underlying' b'.' b'lamina' b'is' b'<unk>' b'these' b'erosion' b',' b'which' b'regularly' b'complained' b'the' b'women' b"'" b'tail' b'is' b'poked' b'.' b'It' b'will'
    b'be' b'distinguished' b'by' b'rails' b'to' b'anyone' b'that' b'they' b'do' b'their' b'clarification' b'around' b'it' b'between' b'the' b'Loch' b'planet' b'.' b'<eos>' b'By'
    b'vibrate' b'food' b',' b'double' b'(' b'feeding' b'1' b'%' b')' b'includes' b'these' b'layers' b'known' b'as' b'a' b'planet' b'.' b'After' b'Jains' b"'s"
    b'other' b'source' b',' b'other' b'surface' b'distances' b'varies' b'the' b'same' b'as' b'they' b'stops' b'at' b'home' b')' b'are' b'a' b'applicants' b'between' b'males'
    b'.' b'<eos>' b'After' b'some' b'infections' b',' b'Ceres' b',' b'Wright' b'and' b'rhythm' b',' b'are' b'pure' b'only' b';' b'this' b'bird' b'soon' b'existed'
    b'with' b'may' b'feed' b'into' b'two' b'distinct' b'Bishops' b',' b'which' b'may' b'be' b'here' b'to' b'road' b'sampled' b'that' b'do' b'not' b'be' b'unacceptable'
    b'to' b'the' b'Mexican' b'object' b'.' b'The' b'sheep' b'Jenova' b'Nestor' b'and' b'dear' b';' b'common' b'react' b'have' b'<unk>' b'thermal' b'technique' b',' b'and'
    b'may' b'be' b'comparatively' b'less' b'.' b'With' b'the' b'very' b'strongly' b',' b'food' b',' b'a' b'mature' b'fungal' b'island' b'<unk>' b'appears' b'to' b'be'
    b'Celtic' b'.' b'The' b'approaching' b'winter' b'exposes' b'their' b'posthumously' b'of' b'one' b'events' b"'s" b'wood' b'overly' b',' b'tertiary' b'that' b'they' b'personally' b'constrained'
    b'.' b'<eos>' b'A' b'suggestion' b'does' b'not' b'hardcover' b'a' b'meaningless' b'style' b'(' b'30' b'@.@' b'5' b'metres' b')' b'above' b'50' b'%' b'.'
    b'This' b'species' b'is' b'made' b'due' b'to' b'her' b'exception' b'.' b'As' b'females' b'resemble' b'an' b'Independence' b',' b'river' b',' b'light' b',' b'myeloproliferative'
    b',' b'demons' b',' b'reduces' b'the' b'growing' b'lamp' b'<unk>' b'.' b'<eos>' b'He' b'is' b'known' b'as' b'manifest' b',' b'<unk>' b',' b'<unk>' b','
    b'the' b'plumage' b',' b'Sparta' b',' b'riots' b'figures' b',' b'and' b'Hume' b'.' b'As' b'her' b'head' b',' b'no' b'breeding' b'mature' b'cap' b','
    b'and' b'their' b'host' b'likelihood' b'was' b'well' b'lunar' b'below' b'the' b'palm' b'.' b'<eos>' b'A' b'document' b'with' b'oxygen' b',' b'the' b'other' b'<unk>'
    b'star' b'and' b'<unk>' b'Vice' b'interchromatin' b'(' b'derived' b',' b'studios' b',' b'is' b'abide' b'.' b'If' b'the' b'Qedarites' b'normally' b'intriguing' b'about' b'20'
    b'@.@' b'2' b'%' b'per' b'million' b'years' b'after' b'every' b'million' b'or' b'eight' b'species' b')' b'crown' b'are' b'.' b'In' b'the' b'middle' b','
    b'it' b'is' b'calculated' b'to' b'take' b'bearing' b'the' b'movement' b'of' b'Easter' b'eggs' b'only' b'as' b'they' b'will' b'be' b'different' b'.' b'<eos>' b'Such'
    b'cure' b',' b'or' b'fill' b',' b'"' b'transmission' b'of' b'normal' b'body' b'"' b'or' b',' b'that' b'this' b'cause' b'are' b'that' b'this' b'yield'
    b',' b'aerodrome' b',' b'graves' b'or' b'other' b'aspects' b'of' b'other' b'birds' b'and' b'<unk>' b',' b'and' b'studies' b'of' b'other' b'or' b'Riata' b'astronomical'
    b'activities' b'.' b'A' b'minor' b'bird' b"'s" b'head' b'face' b'are' b'discovered' b'.' b'A' b'Cap' b'Gaelic' b'act' b'is' b'driven' b'to' b'the' b'euro'





.. GENERATED FROM PYTHON SOURCE LINES 191-196

It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:

.. GENERATED FROM PYTHON SOURCE LINES 196-241

.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into bsz parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the bsz batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].reshape(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)








.. GENERATED FROM PYTHON SOURCE LINES 242-251

4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values

.. GENERATED FROM PYTHON SOURCE LINES 251-259

.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): DynamicQuantizedLinear(in_features=256, out_features=33278, dtype=torch.qint8, qscheme=torch.per_tensor_affine)
    )




.. GENERATED FROM PYTHON SOURCE LINES 260-262

The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:

.. GENERATED FROM PYTHON SOURCE LINES 262-271

.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Size (MB): 113.944608
    Size (MB): 79.739034




.. GENERATED FROM PYTHON SOURCE LINES 272-276

Second, we see faster inference time, with no difference in evaluation loss:

Note: we set the number of threads to one for single threaded comparison, since quantized
models run single threaded.

.. GENERATED FROM PYTHON SOURCE LINES 276-288

.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 213.7
    loss: 5.168
    elapsed time (seconds): 107.9




.. GENERATED FROM PYTHON SOURCE LINES 289-300

Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 5 minutes  30.149 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
