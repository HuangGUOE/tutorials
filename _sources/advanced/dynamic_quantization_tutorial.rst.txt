
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "advanced/dynamic_quantization_tutorial.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(beta) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we will apply the easiest form of quantization -
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.

.. GENERATED FROM PYTHON SOURCE LINES 22-32

.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F








.. GENERATED FROM PYTHON SOURCE LINES 33-39

1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.

.. GENERATED FROM PYTHON SOURCE LINES 39-73

.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))








.. GENERATED FROM PYTHON SOURCE LINES 74-82

2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.

.. GENERATED FROM PYTHON SOURCE LINES 82-132

.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')








.. GENERATED FROM PYTHON SOURCE LINES 133-141

3. Load the pre-trained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pre-trained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.

.. GENERATED FROM PYTHON SOURCE LINES 141-161

.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )




.. GENERATED FROM PYTHON SOURCE LINES 162-165

Now let's generate some text to ensure that the pre-trained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_

.. GENERATED FROM PYTHON SOURCE LINES 165-190

.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b'targeted' b'by' b'<unk>' b'@-@' b'<unk>' b'and' b'U.S.' b'Prime' b'Prix' b'.' b'It' b'was' b'released' b'in' b'the' b'<unk>' b'Famitsu' b'Agreement' b'to' b'of'
    b'the' b'Oxford' b'and' b'<unk>' b'Festival' b'.' b'By' b'the' b'fourth' b'seasons' b'of' b'wet' b'study' b'in' b'culture' b',' b'he' b'put' b'his' b'first'
    b'range' b'on' b'his' b'full' b'areas' b':' b'20' b'seconds' b'.' b'Support' b'Santander' b'made' b'Ceres' b'for' b'Blood' b'when' b'that' b'he' b'gave' b'his'
    b'hand' b',' b'until' b'it' b'took' b'Sir' b"'Malley" b'as' b';' b'of' b'his' b'final' b'entry' b'on' b'his' b'role' b'.' b'Later' b',' b'Jordan'
    b'left' b'his' b'next' b'work' b'in' b'Australia' b'.' b'The' b'song' b'is' b'offered' b'in' b'a' b'number' b'of' b'production' b'against' b'two' b'charitable' b'wins'
    b'and' b'finding' b'publishing' b'in' b'France' b'carried' b'their' b'third' b'football' b'video' b'dates' b'.' b'<eos>' b'The' b'Chrono' b'version' b'received' b'@-@' b'received' b'live'
    b'in' b'southern' b'2003' b'to' b'run' b',' b'and' b'was' b'still' b'introduced' b'to' b'Nash' b'together' b'.' b'As' b'hampered' b'"' b'short' b'things' b'"'
    b',' b'The' b'longtime' b'starling' b'would' b'reverse' b'Raffles' b'in' b'nation' b',' b'"' b'Hans' b'The' b'near' b'Home' b'Appearances' b'"' b',' b'as' b'of'
    b'2006' b'to' b'1914' b'.' b'In' b'addition' b',' b'Port' b'O' b'Carr' b'<unk>' b'the' b'victory' b'to' b'find' b'either' b'city' b'gay' b'a' b'house'
    b'"' b'stretcher' b'"' b',' b'a' b'"' b'guessed' b'Singles' b'or' b'commercial' b'<unk>' b'Mariah' b'of' b'Call' b'!' b'"' b',' b'Monica' b'"' b'The'
    b'<unk>' b'<unk>' b'"' b'Company' b'(' b'Mike' b'V' b')' b'and' b'the' b'Stanley' b'Band' b'performed' b'as' b'the' b'Choice' b"'s" b'Tower' b'(' b'tension'
    b')' b'.' b'ballroom' b'put' b'plans' b'to' b'Houston' b',' b'in' b'which' b'he' b'started' b'into' b'a' b'game' b'at' b'this' b'point' b'in' b'the'
    b'NHA' b';' b'his' b'father' b'<unk>' b'claim' b'on' b'reads' b'production' b'.' b'The' b'show' b'of' b'Four' b'children' b'in' b'America' b'went' b'online' b'its'
    b'<unk>' b'and' b'Pre' b'@-@' b'interview' b'into' b'slightly' b'a' b'individual' b'of' b'Scientology' b',' b'and' b'the' b'University' b'instructs' b'Raffles' b'<eos>' b'stole' b'that'
    b'year' b',' b'Hornung' b'decided' b'to' b'entice' b'a' b'President' b'by' b'28' b'@,@' b'000' b'copies' b'on' b'230' b'December' b'.' b'His' b'next' b'trip'
    b',' b'the' b'CEO' b'Shelley' b'Safety' b'Garden' b'was' b'sent' b'to' b'the' b'soundtrack' b'for' b'a' b'supernova' b'in' b'the' b'poorer' b'race' b'.' b'His'
    b'ode' b',' b'The' b'Cage' b',' b'later' b'Rugby' b'Clinch' b"'" b'predecessor' b',' b'actively' b'meant' b'.' b'<eos>' b'<unk>' b'was' b'a' b'Ferrari' b'candidate'
    b'for' b'his' b'fiction' b'Simone' b'at' b'the' b'end' b'of' b'December' b'near' b'concert' b'in' b'April' b'2011' b'.' b'The' b'show' b'brought' b'nearly' b'70'
    b'years' b'to' b'write' b'London' b'include' b'a' b'k' b'in' b'Australian' b'intelligence' b',' b'a' b'"' b'critic' b'@-@' b'type' b'NHL' b'"' b',' b'a'
    b'example' b'of' b'Alabama' b'at' b'Emmanuel' b'Archie' b'Hall' b'on' b'10' b'November' b'1960' b'.' b'The' b'credits' b'was' b'created' b'after' b'with' b'the' b'second'
    b'time' b',' b'Be' b'Lilly' b'and' b'Paul' b'spirituality' b'fork' b'of' b'in' b'1978' b';' b'they' b'were' b'"' b'white' b'to' b'pursue' b'all' b','
    b'to' b'ensure' b';' b'to' b'speak' b'in' b'its' b'life' b'"' b',' b'while' b'despite' b'commitment' b'to' b'his' b'stronger' b'career' b',' b'when' b'Harmonix'
    b'wrote' b'"' b'We' b'wasn' b"'t" b'think' b'in' b',' b'and' b'ECAHA' b'developed' b'a' b'dramatic' b'court' b'"' b',' b'.' b'excels' b'a' b'reviewer'
    b'of' b'The' b'<unk>' b'1964' b',' b'Hornung' b'illustrated' b'The' b'history' b'of' b'Jackson' b'to' b'produce' b'a' b'character' b'Harriet' b'Multi' b'Senior' b'Agency' b','
    b'Australia' b'core' b'<unk>' b'at' b'Anderson' b"'s" b'Madison' b'Military' b'Festival' b',' b'and' b'released' b'in' b'1999' b'in' b'candidate' b'Hearts' b'quasi' b'for' b'Jackie'
    b'twelve' b'years' b'.' b'The' b'Massachusetts' b'opening' b'television' b'Reconstruction' b'Court' b'in' b'1966' b'to' b'Ted' b'Strike' b',' b'Mega' b'fitzWarin' b"'s" b'Thomas' b','
    b'Phil' b'Hunter' b',' b'Washington' b'the' b'12th' b'Race' b',' b'and' b'their' b'110' b'Independent' b',' b'and' b'making' b'the' b'first' b'date' b'on' b'Kristiansand'
    b'jazz' b'Fantasy' b'The' b'City' b'Awards' b'and' b'the' b'correspondent' b'history' b'and' b'the' b'FISA' b'Music' b'Army' b'.' b'Namco' b"'s" b'introduction' b'began' b'137'
    b'ft' b'appeared' b'on' b'a' b'poll' b'on' b'The' b'west' b'version' b',' b'and' b'a' b'total' b'of' b'86' b'in' b'(' b'Digital' b'in' b'('
    b'1990' b')' b',' b'in' b'170' b'@-@' b'February' b'.' b'This' b'first' b'went' b'to' b'work' b'led' b'in' b'maligned' b'with' b'a' b'Yogyakarta' b'@-@'
    b'based' b'record' b'Desmond' b'Foster' b'for' b'Surrender' b'.' b'The' b'Jake' b'Palace' b'was' b'created' b'in' b'captivity' b'until' b'which' b'Universal' b'scored' b'the' b'production'
    b'with' b'the' b'fact' b'.' b'Three' b'musical' b'versions' b'\xe2\x80\x94' b'according' b'to' b'Flies' b',' b'appeared' b'on' b'a' b'rise' b'to' b'an' b'steal' b'which'
    b'took' b'funding' b'to' b'communicate' b'between' b'two' b'others' b',' b'sometimes' b'called' b'"' b'rap' b"'" b'The' b'Power' b'"' b'(' b'1995' b')' b'.'
    b'The' b'later' b'three' b'slowed' b'stars' b',' b'which' b'Celebrity' b'or' b'is' b'published' b'at' b'a' b'Andalee' b'at' b'<unk>' b'Art' b"'s" b'narration' b','
    b'Governor' b'Fuller' b'received' b'another' b'quotation' b'to' b'Metro' b'#' b'4' b'@,@' b'000' b'copies' b'.' b'Alabama' b'received' b'further' b'shots' b'from' b'critics' b'sold'
    b'up' b'to' b'its' b'third' b'studio' b'series' b':' b'he' b'was' b'also' b'named' b'with' b'"' b'the' b'rights' b'of' b'an' b'planet' b'"' b'.'
    b'The' b'Crimson' b'Extinction' b'moved' b'1637' b'Vlachos' b'in' b'December' b'1963' b',' b'allowing' b'no' b'resources' b'as' b'English' b',' b'<unk>' b',' b'and' b'Janet'
    b'themselves' b'.' b'<eos>' b'The' b'book' b'received' b'mostly' b'positive' b'reviews' b'from' b'critics' b',' b'hitting' b'their' b'radio' b'band' b'as' b'one' b'of' b'the'
    b'most' b'founder' b',' b'mostly' b'time' b'"' b'party' b'Gala' b'Is' b'!' b'"' b'and' b'"' b'The' b'Best' b'Day' b'Is' b'"' b'.' b'<eos>'
    b'<eos>' b'=' b'=' b'Publication' b'seller' b'spawned' b'remixes' b'=' b'=' b'<eos>' b'<eos>' b'Hornung' b'had' b'sold' b'shutout' b'in' b'the' b'race' b'track' b'\xe2\x80\x94'
    b'the' b'week' b'in' b'the' b'second' b',' b'despite' b'various' b'gorillas' b'concerns' b'the' b'scenes' b'musical' b'are' b'now' b'because' b'of' b'the' b'Singapore' b'Broadcasting'
    b'Media' b'pathos' b'and' b'Mrs.' b'Johnson' b'\xe2\x80\x94' b'a' b'older' b'public' b'Cam' b'Your' b'priest' b'(' b'Van' b"'Malley" b'of' b'Wanda' b',' b'<unk>' b')'
    b'and' b'<unk>' b'input' b'.' b'The' b'Death' b'plurality' b'may' b'purchase' b'an' b'metal' b'firepower' b'on' b'the' b'four' b'@-@' b'Canadian' b'pace' b',' b'which'
    b'was' b'released' b'as' b'a' b'trademark' b'run' b'by' b'the' b'book' b'.' b'The' b'game' b'Gaurav' b'Romero' b'was' b'given' b'when' b'he' b'could' b'within'
    b'scratch' b'on' b'the' b'COs' b'La' b'Traill' b'both' b'vision' b'(' b'which' b'retiring' b'full' b'parts' b'of' b'Philip' b'Jones' b'had' b'moved' b'to' b'her'
    b'rusher' b',' b'<unk>' b'asking' b'at' b'the' b'<unk>' b'opus' b'and' b'"' b'It' b'Street' b'Cyrus' b'(' b'Word' b')' b'Performance' b'"' b'\xe2\x80\x94' b'which'
    b'season' b'rating' b'this' b'was' b'"' b'sympathetic' b'to' b'both' b'another' b'sex' b'"' b'or' b'"' b'Rudnicki' b'and' b'rectified' b'"' b',' b'stating' b'that'
    b'"' b'I' b'did' b'not' b'really' b'want' b'to' b'be' b'like' b'they' b'very' b'thought' b'I' b'see' b'critique' b'.' b'"' b'awarded' b'writer' b'twins'
    b'was' b'brought' b'by' b'The' b'end' b'of' b'either' b'life' b',' b'blowing' b'down' b'her' b'defensive' b'work' b'from' b'a' b'supernatural' b'coat' b',' b'Georgia'
    b',' b'calling' b'away' b'referring' b'to' b'prose' b'and' b'other' b'stars' b'within' b'his' b'show' b'.' b'The' b'character' b'was' b'mixed' b'with' b'wealthy' b'critics'





.. GENERATED FROM PYTHON SOURCE LINES 191-196

It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:

.. GENERATED FROM PYTHON SOURCE LINES 196-241

.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into bsz parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the bsz batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].reshape(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)








.. GENERATED FROM PYTHON SOURCE LINES 242-251

4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values

.. GENERATED FROM PYTHON SOURCE LINES 251-259

.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): DynamicQuantizedLinear(in_features=256, out_features=33278, dtype=torch.qint8, qscheme=torch.per_tensor_affine)
    )




.. GENERATED FROM PYTHON SOURCE LINES 260-262

The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:

.. GENERATED FROM PYTHON SOURCE LINES 262-271

.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Size (MB): 113.944608
    Size (MB): 79.739034




.. GENERATED FROM PYTHON SOURCE LINES 272-276

Second, we see faster inference time, with no difference in evaluation loss:

Note: we set the number of threads to one for single threaded comparison, since quantized
models run single threaded.

.. GENERATED FROM PYTHON SOURCE LINES 276-288

.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 218.1
    loss: 5.168
    elapsed time (seconds): 114.6




.. GENERATED FROM PYTHON SOURCE LINES 289-300

Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 5 minutes  41.690 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
